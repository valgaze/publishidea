{
  "version": 3,
  "sources": ["../../../../node_modules/adaptivecards/src/strings.ts", "../../../../node_modules/adaptivecards/src/enums.ts", "../../../../node_modules/adaptivecards/src/shared.ts", "../../../../node_modules/adaptivecards/src/utils.ts", "../../../../node_modules/adaptivecards/src/serialization.ts", "../../../../node_modules/adaptivecards/src/host-capabilities.ts", "../../../../node_modules/adaptivecards/src/host-config.ts", "../../../../node_modules/adaptivecards/src/registry.ts", "../../../../node_modules/adaptivecards/src/card-object.ts", "../../../../node_modules/adaptivecards/src/text-formatters.ts", "../../../../node_modules/adaptivecards/src/controls/constants.ts", "../../../../node_modules/adaptivecards/src/controls/menu-item.ts", "../../../../node_modules/adaptivecards/src/controls/collection.ts", "../../../../node_modules/adaptivecards/src/controls/popup-control.ts", "../../../../node_modules/adaptivecards/src/controls/popup-menu.ts", "../../../../node_modules/adaptivecards/src/controls/index.ts", "../../../../node_modules/adaptivecards/src/card-elements.ts", "../../../../node_modules/adaptivecards/src/table.ts", "../../../../node_modules/adaptivecards/src/channel-adapter.ts", "../../../../node_modules/adaptivecards/src/activity-request.ts", "../../../../node_modules/adaptivecards/src/adaptive-applet.ts", "../../../../node_modules/adaptivecards/src/adaptivecards.ts"],
  "sourcesContent": ["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\r\nexport class Strings {\r\n    static readonly errors = {\r\n        unknownElementType: (typeName: string) =>\r\n            `Unknown element type \"${typeName}\". Fallback will be used if present.`,\r\n        unknownActionType: (typeName: string) =>\r\n            `Unknown action type \"${typeName}\". Fallback will be used if present.`,\r\n        elementTypeNotAllowed: (typeName: string) =>\r\n            `Element type \"${typeName}\" is not allowed in this context.`,\r\n        actionTypeNotAllowed: (typeName: string) =>\r\n            `Action type \"${typeName}\" is not allowed in this context.`,\r\n        invalidPropertyValue: (value: any, propertyName: string) =>\r\n            `Invalid value \"${value}\" for property \"${propertyName}\".`,\r\n        showCardMustHaveCard: () =>\r\n            `\"An Action.ShowCard must have its \"card\" property set to a valid AdaptiveCard object.`,\r\n        invalidColumnWidth: (invalidWidth: string) =>\r\n            `Invalid column width \"${invalidWidth}\" - defaulting to \"auto\".`,\r\n        invalidCardVersion: (defaultingToVersion: string) =>\r\n            `Invalid card version. Defaulting to \"${defaultingToVersion}\".`,\r\n        invalidVersionString: (versionString: string) =>\r\n            `Invalid version string \"${versionString}\".`,\r\n        propertyValueNotSupported: (\r\n            value: any,\r\n            propertyName: string,\r\n            supportedInVersion: string,\r\n            versionUsed: string\r\n        ) =>\r\n            `Value \"${value}\" for property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\r\n        propertyNotSupported: (\r\n            propertyName: string,\r\n            supportedInVersion: string,\r\n            versionUsed: string\r\n        ) =>\r\n            `Property \"${propertyName}\" is supported in version ${supportedInVersion}, but you are using version ${versionUsed}.`,\r\n        indexOutOfRange: (index: number) => `Index out of range (${index}).`,\r\n        elementCannotBeUsedAsInline: () =>\r\n            \"RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.\",\r\n        inlineAlreadyParented: () =>\r\n            \"RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.\",\r\n        interactivityNotAllowed: () => \"Interactivity is not allowed.\",\r\n        inputsMustHaveUniqueId: () => \"All inputs must have a unique Id.\",\r\n        choiceSetMustHaveAtLeastOneChoice: () =>\r\n            \"An Input.ChoiceSet must have at least one choice defined.\",\r\n        choiceSetChoicesMustHaveTitleAndValue: () =>\r\n            \"All choices in an Input.ChoiceSet must have their title and value properties set.\",\r\n        propertyMustBeSet: (propertyName: string) => `Property \"${propertyName}\" must be set.`,\r\n        actionHttpHeadersMustHaveNameAndValue: () =>\r\n            \"All headers of an Action.Http must have their name and value properties set.\",\r\n        tooManyActions: (maximumActions: number) =>\r\n            `Maximum number of actions exceeded (${maximumActions}).`,\r\n        tooLittleTimeDelay: (minAutoplayDelay: number) =>\r\n            `Autoplay Delay is too short (${minAutoplayDelay}).`,\r\n        columnAlreadyBelongsToAnotherSet: () => \"This column already belongs to another ColumnSet.\",\r\n        invalidCardType: () =>\r\n            `Invalid or missing card type. Make sure the card's type property is set to \"AdaptiveCard\".`,\r\n        unsupportedCardVersion: (version: string, maxSupportedVersion: string) =>\r\n            `The specified card version (${version}) is not supported or still in preview. The latest released card version is ${maxSupportedVersion}.`,\r\n        duplicateId: (id: string) => `Duplicate Id \"${id}\".`,\r\n        markdownProcessingNotEnabled: () =>\r\n            \"Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown\",\r\n        processMarkdownEventRemoved: () =>\r\n            \"The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.\",\r\n        elementAlreadyParented: () => \"The element already belongs to another container.\",\r\n        actionAlreadyParented: () => \"The action already belongs to another element.\",\r\n        elementTypeNotStandalone: (typeName: string) =>\r\n            `Elements of type ${typeName} cannot be used as standalone elements.`\r\n    };\r\n    static readonly magicCodeInputCard = {\r\n        tryAgain: () => \"That didn't work... let's try again.\",\r\n        pleaseLogin: () =>\r\n            'Please login in the popup. You will obtain a magic code. Paste that code below and select \"Submit\"',\r\n        enterMagicCode: () => \"Enter magic code\",\r\n        pleaseEnterMagicCodeYouReceived: () => \"Please enter the magic code you received.\",\r\n        submit: () => \"Submit\",\r\n        cancel: () => \"Cancel\",\r\n        somethingWentWrong: () => \"Something went wrong. This action can't be handled.\",\r\n        authenticationFailed: () => \"Authentication failed.\"\r\n    };\r\n    static readonly runtime = {\r\n        automaticRefreshPaused: () => \"Automatic refresh paused.\",\r\n        clckToRestartAutomaticRefresh: () => \"Click to restart.\",\r\n        refreshThisCard: () => \"Refresh this card\"\r\n    };\r\n    static readonly hints = {\r\n        dontUseWeightedAndStrecthedColumnsInSameSet: () =>\r\n            \"It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space.\"\r\n    };\r\n    static readonly defaults = {\r\n        inlineActionTitle: () => \"Inline Action\",\r\n        overflowButtonText: () => \"...\",\r\n        mediaPlayerAriaLabel: () => \"Media content\",\r\n        mediaPlayerPlayMedia: () => \"Play media\",\r\n        youTubeVideoPlayer: () => \"YouTube video player\",\r\n        vimeoVideoPlayer: () => \"Vimeo video player\",\r\n        dailymotionVideoPlayer: () => \"Dailymotion video player\"\r\n    };\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/*\r\n    This should really be a string enum, e.g.\r\n\r\n        export enum ContainerStyle {\r\n            Default = \"default\",\r\n            Emphasis = \"emphasis\"\r\n        }\r\n\r\n    However, some hosts do not use a version of TypeScript\r\n    recent enough to understand string enums. This is\r\n    a compatible construct that does not require using\r\n    a more recent version of TypeScript.\r\n\r\n    Also note the \"weird\" way these readonly fields are declared is to work around\r\n    a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    and adopt this syntax for all other static readonly fields.\r\n*/\r\n/* eslint-disable @typescript-eslint/no-extraneous-class, @typescript-eslint/naming-convention */\r\nexport class ContainerStyle {\r\n    static readonly Default: \"default\" = \"default\";\r\n    static readonly Emphasis: \"emphasis\" = \"emphasis\";\r\n    static readonly Accent: \"accent\" = \"accent\";\r\n    static readonly Good: \"good\" = \"good\";\r\n    static readonly Attention: \"attention\" = \"attention\";\r\n    static readonly Warning: \"warning\" = \"warning\";\r\n}\r\n\r\nexport class ActionStyle {\r\n    static readonly Default: \"default\" = \"default\";\r\n    static readonly Positive: \"positive\" = \"positive\";\r\n    static readonly Destructive: \"destructive\" = \"destructive\";\r\n}\r\n\r\nexport class ActionMode {\r\n    static readonly Primary: \"primary\" = \"primary\";\r\n    static readonly Secondary: \"secondary\" = \"secondary\";\r\n}\r\n/* eslint-enable @typescript-eslint/no-extraneous-class, @typescript-eslint/naming-convention */\r\n\r\nexport enum Size {\r\n    Auto,\r\n    Stretch,\r\n    Small,\r\n    Medium,\r\n    Large\r\n}\r\n\r\nexport enum ImageSize {\r\n    Small,\r\n    Medium,\r\n    Large\r\n}\r\n\r\nexport enum SizeUnit {\r\n    Weight,\r\n    Pixel\r\n}\r\n\r\nexport enum TextSize {\r\n    Small,\r\n    Default,\r\n    Medium,\r\n    Large,\r\n    ExtraLarge\r\n}\r\n\r\nexport enum TextWeight {\r\n    Lighter,\r\n    Default,\r\n    Bolder\r\n}\r\n\r\nexport enum FontType {\r\n    Default,\r\n    Monospace\r\n}\r\n\r\nexport enum Spacing {\r\n    None,\r\n    Small,\r\n    Default,\r\n    Medium,\r\n    Large,\r\n    ExtraLarge,\r\n    Padding\r\n}\r\n\r\nexport enum TextColor {\r\n    Default,\r\n    Dark,\r\n    Light,\r\n    Accent,\r\n    Good,\r\n    Warning,\r\n    Attention\r\n}\r\n\r\nexport enum HorizontalAlignment {\r\n    Left,\r\n    Center,\r\n    Right\r\n}\r\n\r\nexport enum VerticalAlignment {\r\n    Top,\r\n    Center,\r\n    Bottom\r\n}\r\n\r\nexport enum ActionAlignment {\r\n    Left,\r\n    Center,\r\n    Right,\r\n    Stretch\r\n}\r\n\r\nexport enum ImageStyle {\r\n    Default,\r\n    Person\r\n}\r\n\r\nexport enum ShowCardActionMode {\r\n    Inline,\r\n    Popup\r\n}\r\n\r\nexport enum Orientation {\r\n    Horizontal,\r\n    Vertical\r\n}\r\n\r\nexport enum FillMode {\r\n    Cover,\r\n    RepeatHorizontally,\r\n    RepeatVertically,\r\n    Repeat\r\n}\r\n\r\nexport enum ActionIconPlacement {\r\n    LeftOfTitle,\r\n    AboveTitle\r\n}\r\n\r\nexport enum InputTextStyle {\r\n    Text,\r\n    Tel,\r\n    Url,\r\n    Email,\r\n    Password\r\n}\r\n\r\nexport enum ValidationPhase {\r\n    Parse,\r\n    ToJSON,\r\n    Validation\r\n}\r\n\r\nexport enum ValidationEvent {\r\n    Hint,\r\n    ActionTypeNotAllowed,\r\n    CollectionCantBeEmpty,\r\n    Deprecated,\r\n    ElementTypeNotAllowed,\r\n    InteractivityNotAllowed,\r\n    InvalidPropertyValue,\r\n    MissingCardType,\r\n    PropertyCantBeNull,\r\n    TooManyActions,\r\n    UnknownActionType,\r\n    UnknownElementType,\r\n    UnsupportedCardVersion,\r\n    DuplicateId,\r\n    UnsupportedProperty,\r\n    RequiredInputsShouldHaveLabel,\r\n    RequiredInputsShouldHaveErrorMessage,\r\n    Other\r\n}\r\n\r\nexport enum ContainerFitStatus {\r\n    FullyInContainer,\r\n    Overflowing,\r\n    FullyOutOfContainer\r\n}\r\n\r\nexport enum TypeErrorType {\r\n    UnknownType,\r\n    ForbiddenType\r\n}\r\n\r\nexport enum RefreshMode {\r\n    Disabled,\r\n    Manual,\r\n    Automatic\r\n}\r\n\r\nexport enum LogLevel {\r\n    Info,\r\n    Warning,\r\n    Error\r\n}", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\n\r\nexport type Refresh = {\r\n    mode: Enums.RefreshMode;\r\n    timeBetweenAutomaticRefreshes: number;\r\n    maximumConsecutiveAutomaticRefreshes: number;\r\n    allowManualRefreshesAfterAutomaticRefreshes: boolean;\r\n};\r\n\r\nexport type AppletsSettings = {\r\n    logEnabled: boolean;\r\n    logLevel: Enums.LogLevel;\r\n    maximumRetryAttempts: number;\r\n    defaultTimeBetweenRetryAttempts: number;\r\n    authPromptWidth: number;\r\n    authPromptHeight: number;\r\n    readonly refresh: Refresh;\r\n    onLogEvent?: (level: Enums.LogLevel, message?: any, ...optionalParams: any[]) => void;\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\r\nexport class GlobalSettings {\r\n    static useAdvancedTextBlockTruncation: boolean = true;\r\n    static useAdvancedCardBottomTruncation: boolean = false;\r\n    static useMarkdownInRadioButtonAndCheckbox: boolean = true;\r\n    static allowMarkForTextHighlighting: boolean = false;\r\n    static alwaysBleedSeparators: boolean = false;\r\n    static enableFullJsonRoundTrip: boolean = false;\r\n    static displayInputValidationErrors: boolean = true;\r\n    static allowPreProcessingPropertyValues: boolean = false;\r\n    static setTabIndexAtCardRoot: boolean = true;\r\n    static enableFallback: boolean = true;\r\n    static useWebkitLineClamp: boolean = true;\r\n    static allowMoreThanMaxActionsInOverflowMenu: boolean = false;\r\n    static removePaddingFromContainersWithBackgroundImage: boolean = false;\r\n    static resetInputsDirtyStateAfterActionExecution: boolean = true;\r\n\r\n    static readonly applets: AppletsSettings = {\r\n        logEnabled: true,\r\n        logLevel: Enums.LogLevel.Error,\r\n        maximumRetryAttempts: 3,\r\n        defaultTimeBetweenRetryAttempts: 3000, // 3 seconds\r\n        authPromptWidth: 400,\r\n        authPromptHeight: 600,\r\n        refresh: {\r\n            mode: Enums.RefreshMode.Manual,\r\n            timeBetweenAutomaticRefreshes: 3000, // 3 seconds\r\n            maximumConsecutiveAutomaticRefreshes: 3,\r\n            allowManualRefreshesAfterAutomaticRefreshes: true\r\n        }\r\n    };\r\n}\r\n\r\nexport const ContentTypes = {\r\n    applicationJson: \"application/json\",\r\n    applicationXWwwFormUrlencoded: \"application/x-www-form-urlencoded\"\r\n};\r\n\r\nexport interface ISeparationDefinition {\r\n    spacing: number;\r\n    lineThickness?: number;\r\n    lineColor?: string;\r\n}\r\n\r\nexport interface IInput {\r\n    id?: string;\r\n    value?: string;\r\n    validateValue(): boolean;\r\n}\r\n\r\nexport type Dictionary<T> = { [key: string]: T };\r\n\r\nexport class StringWithSubstitutions {\r\n    private _isProcessed: boolean = false;\r\n    private _original?: string;\r\n    private _processed?: string;\r\n\r\n    getReferencedInputs(inputs: IInput[], referencedInputs: Dictionary<IInput>) {\r\n        if (!referencedInputs) {\r\n            throw new Error(\"The referencedInputs parameter cannot be null.\");\r\n        }\r\n\r\n        if (this._original) {\r\n            for (const input of inputs) {\r\n                const matches = new RegExp(\"\\\\{{2}(\" + input.id + \").value\\\\}{2}\", \"gi\").exec(\r\n                    this._original\r\n                );\r\n\r\n                if (matches != null && input.id) {\r\n                    referencedInputs[input.id] = input;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    substituteInputValues(inputs: Dictionary<IInput>, contentType: string) {\r\n        this._processed = this._original;\r\n\r\n        if (this._original) {\r\n            const regEx = /\\{{2}([a-z0-9_$@]+).value\\}{2}/gi;\r\n            let matches;\r\n\r\n            while ((matches = regEx.exec(this._original)) !== null && this._processed) {\r\n                for (const key of Object.keys(inputs)) {\r\n                    if (key.toLowerCase() === matches[1].toLowerCase()) {\r\n                        const matchedInput = inputs[key];\r\n\r\n                        let valueForReplace = \"\";\r\n\r\n                        if (matchedInput.value) {\r\n                            valueForReplace = matchedInput.value;\r\n                        }\r\n\r\n                        if (contentType === ContentTypes.applicationJson) {\r\n                            valueForReplace = JSON.stringify(valueForReplace);\r\n                            valueForReplace = valueForReplace.slice(1, -1);\r\n                        } else if (contentType === ContentTypes.applicationXWwwFormUrlencoded) {\r\n                            valueForReplace = encodeURIComponent(valueForReplace);\r\n                        }\r\n\r\n                        this._processed = this._processed.replace(matches[0], valueForReplace);\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isProcessed = true;\r\n    }\r\n\r\n    getOriginal(): string | undefined {\r\n        return this._original;\r\n    }\r\n\r\n    get(): string | undefined {\r\n        if (!this._isProcessed) {\r\n            return this._original;\r\n        } else {\r\n            return this._processed;\r\n        }\r\n    }\r\n\r\n    set(value: string | undefined) {\r\n        this._original = value;\r\n        this._isProcessed = false;\r\n    }\r\n}\r\n\r\nexport class SpacingDefinition {\r\n    left: number = 0;\r\n    top: number = 0;\r\n    right: number = 0;\r\n    bottom: number = 0;\r\n\r\n    constructor(top: number = 0, right: number = 0, bottom: number = 0, left: number = 0) {\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n    }\r\n}\r\n\r\nexport class PaddingDefinition {\r\n    top: Enums.Spacing = Enums.Spacing.None;\r\n    right: Enums.Spacing = Enums.Spacing.None;\r\n    bottom: Enums.Spacing = Enums.Spacing.None;\r\n    left: Enums.Spacing = Enums.Spacing.None;\r\n\r\n    constructor(\r\n        top: Enums.Spacing = Enums.Spacing.None,\r\n        right: Enums.Spacing = Enums.Spacing.None,\r\n        bottom: Enums.Spacing = Enums.Spacing.None,\r\n        left: Enums.Spacing = Enums.Spacing.None\r\n    ) {\r\n        this.top = top;\r\n        this.right = right;\r\n        this.bottom = bottom;\r\n        this.left = left;\r\n    }\r\n}\r\n\r\nexport class SizeAndUnit {\r\n    physicalSize: number;\r\n    unit: Enums.SizeUnit;\r\n\r\n    static parse(input: string, requireUnitSpecifier: boolean = false): SizeAndUnit {\r\n        const result = new SizeAndUnit(0, Enums.SizeUnit.Weight);\r\n\r\n        if (typeof input === \"number\") {\r\n            result.physicalSize = input;\r\n\r\n            return result;\r\n        } else if (typeof input === \"string\") {\r\n            const regExp = /^([0-9]+)(px|\\*)?$/g;\r\n            const matches = regExp.exec(input);\r\n            const expectedMatchCount = requireUnitSpecifier ? 3 : 2;\r\n\r\n            if (matches && matches.length >= expectedMatchCount) {\r\n                result.physicalSize = parseInt(matches[1]);\r\n\r\n                if (matches.length === 3) {\r\n                    if (matches[2] === \"px\") {\r\n                        result.unit = Enums.SizeUnit.Pixel;\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            }\r\n        }\r\n\r\n        throw new Error(\"Invalid size: \" + input);\r\n    }\r\n\r\n    constructor(physicalSize: number, unit: Enums.SizeUnit) {\r\n        this.physicalSize = physicalSize;\r\n        this.unit = unit;\r\n    }\r\n}\r\n\r\nexport interface IResourceInformation {\r\n    url: string;\r\n    mimeType: string;\r\n}\r\n\r\n/**\r\n * Fast UUID generator, RFC4122 version 4 compliant.\r\n * @author Jeff Ward (jcward.com).\r\n * @license MIT license\r\n * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n **/\r\n/* eslint-disable @typescript-eslint/no-extraneous-class, @typescript-eslint/naming-convention, no-bitwise */\r\nexport class UUID {\r\n    private static lut: string[] = [];\r\n\r\n    static generate(): string {\r\n        const d0 = (Math.random() * 0xffffffff) | 0;\r\n        const d1 = (Math.random() * 0xffffffff) | 0;\r\n        const d2 = (Math.random() * 0xffffffff) | 0;\r\n        const d3 = (Math.random() * 0xffffffff) | 0;\r\n\r\n        return (\r\n            UUID.lut[d0 & 0xff] +\r\n            UUID.lut[(d0 >> 8) & 0xff] +\r\n            UUID.lut[(d0 >> 16) & 0xff] +\r\n            UUID.lut[(d0 >> 24) & 0xff] +\r\n            \"-\" +\r\n            UUID.lut[d1 & 0xff] +\r\n            UUID.lut[(d1 >> 8) & 0xff] +\r\n            \"-\" +\r\n            UUID.lut[((d1 >> 16) & 0x0f) | 0x40] +\r\n            UUID.lut[(d1 >> 24) & 0xff] +\r\n            \"-\" +\r\n            UUID.lut[(d2 & 0x3f) | 0x80] +\r\n            UUID.lut[(d2 >> 8) & 0xff] +\r\n            \"-\" +\r\n            UUID.lut[(d2 >> 16) & 0xff] +\r\n            UUID.lut[(d2 >> 24) & 0xff] +\r\n            UUID.lut[d3 & 0xff] +\r\n            UUID.lut[(d3 >> 8) & 0xff] +\r\n            UUID.lut[(d3 >> 16) & 0xff] +\r\n            UUID.lut[(d3 >> 24) & 0xff]\r\n        );\r\n    }\r\n\r\n    static initialize() {\r\n        for (let i = 0; i < 256; i++) {\r\n            UUID.lut[i] = (i < 16 ? \"0\" : \"\") + i.toString(16);\r\n        }\r\n    }\r\n}\r\n\r\nUUID.initialize();\r\n/* eslint-enable @typescript-eslint/no-extraneous-class, @typescript-eslint/naming-convention, no-bitwise */\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Shared from \"./shared\";\r\n\r\n// To work around TypeScript complaining about documentMode not being declared\r\n// on type Document\r\ndeclare global {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    interface Document {\r\n        documentMode?: any;\r\n    }\r\n}\r\n\r\nexport function isInternetExplorer(): boolean {\r\n    // The documentMode property only exists in IE\r\n    return window.document.documentMode !== undefined;\r\n}\r\n\r\nexport function isMobileOS(): boolean {\r\n    const userAgent = window.navigator.userAgent;\r\n\r\n    return (\r\n        !!userAgent.match(/Android/i) || !!userAgent.match(/iPad/i) || !!userAgent.match(/iPhone/i)\r\n    );\r\n}\r\n\r\n/**\r\n * Generate a UUID prepended with \"__ac-\"\r\n */\r\nexport function generateUniqueId(): string {\r\n    return \"__ac-\" + Shared.UUID.generate();\r\n}\r\n\r\nexport function appendChild(node: Node, child: Node | undefined) {\r\n    if (child) {\r\n        node.appendChild(child);\r\n    }\r\n}\r\n\r\nexport function parseString(obj: any, defaultValue?: string): string | undefined {\r\n    return typeof obj === \"string\" ? obj : defaultValue;\r\n}\r\n\r\nexport function parseNumber(obj: any, defaultValue?: number): number | undefined {\r\n    return typeof obj === \"number\" ? obj : defaultValue;\r\n}\r\n\r\nexport function parseBool(value: any, defaultValue?: boolean): boolean | undefined {\r\n    if (typeof value === \"boolean\") {\r\n        return value;\r\n    } else if (typeof value === \"string\") {\r\n        switch (value.toLowerCase()) {\r\n            case \"true\":\r\n                return true;\r\n            case \"false\":\r\n                return false;\r\n            default:\r\n                return defaultValue;\r\n        }\r\n    }\r\n\r\n    return defaultValue;\r\n}\r\n\r\nexport function getEnumValueByName(\r\n    enumType: { [s: number]: string },\r\n    name: string\r\n): number | undefined {\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const key in enumType) {\r\n        const keyAsNumber = parseInt(key, 10);\r\n\r\n        if (keyAsNumber >= 0) {\r\n            const value = enumType[key];\r\n\r\n            if (value && typeof value === \"string\" && value.toLowerCase() === name.toLowerCase()) {\r\n                return keyAsNumber;\r\n            }\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nexport function parseEnum(\r\n    enumType: { [s: number]: string },\r\n    name: string,\r\n    defaultValue?: number\r\n): number | undefined {\r\n    if (!name) {\r\n        return defaultValue;\r\n    }\r\n\r\n    const enumValue = getEnumValueByName(enumType, name);\r\n\r\n    return enumValue !== undefined ? enumValue : defaultValue;\r\n}\r\n\r\nexport function stringToCssColor(color: string | undefined): string | undefined {\r\n    if (color) {\r\n        const regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;\r\n        const matches = regEx.exec(color);\r\n\r\n        if (matches && matches[4]) {\r\n            const a = parseInt(matches[1], 16) / 255;\r\n            const r = parseInt(matches[2], 16);\r\n            const g = parseInt(matches[3], 16);\r\n            const b = parseInt(matches[4], 16);\r\n\r\n            return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n        }\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nfunction truncateWorker(\r\n    element: HTMLElement,\r\n    maxHeight: number,\r\n    fullText: string,\r\n    truncateAt: (text: string, idx: number) => void,\r\n    lineHeight?: number\r\n) {\r\n    const fits = () => {\r\n        // Allow a one pixel overflow to account for rounding differences\r\n        // between browsers\r\n        return maxHeight - element.scrollHeight >= -1.0;\r\n    };\r\n\r\n    if (fits()) {\r\n        return;\r\n    }\r\n\r\n    const breakableIndices = findBreakableIndices(fullText);\r\n    let lo = 0;\r\n    let hi = breakableIndices.length;\r\n    let bestBreakIdx = 0;\r\n\r\n    // Do a binary search for the longest string that fits\r\n    while (lo < hi) {\r\n        const mid = Math.floor((lo + hi) / 2);\r\n        truncateAt(fullText, breakableIndices[mid]);\r\n\r\n        if (fits()) {\r\n            bestBreakIdx = breakableIndices[mid];\r\n            lo = mid + 1;\r\n        } else {\r\n            hi = mid;\r\n        }\r\n    }\r\n\r\n    truncateAt(fullText, bestBreakIdx);\r\n\r\n    // If we have extra room, try to expand the string letter by letter\r\n    // (covers the case where we have to break in the middle of a long word)\r\n    if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {\r\n        let idx = findNextCharacter(fullText, bestBreakIdx);\r\n\r\n        while (idx < fullText.length) {\r\n            truncateAt(fullText, idx);\r\n\r\n            if (fits()) {\r\n                bestBreakIdx = idx;\r\n                idx = findNextCharacter(fullText, idx);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        truncateAt(fullText, bestBreakIdx);\r\n    }\r\n}\r\n\r\nexport function truncateText(element: HTMLElement, maxHeight: number, lineHeight?: number) {\r\n    truncateWorker(\r\n        element,\r\n        maxHeight,\r\n        element.innerText,\r\n        (text: string, idx: number) => {\r\n            element.innerText = text.substring(0, idx) + \"...\";\r\n        },\r\n        lineHeight\r\n    );\r\n}\r\n\r\n/**\r\n * {@link truncate} has been deprecated and is no longer in use internally. This policy passes\r\n * content through as it always has, which is _supposed_ to be dealing with text only (see {@link\r\n * TextBlock.truncateIfSupported}), but had a bug where it might actually pass through an element\r\n * for which innerHTML yielded actual HTML (since fixed).\r\n */\r\nconst ttDeprecatedPolicy = (typeof window === 'undefined') ? undefined : window.trustedTypes?.createPolicy(\"adaptivecards#deprecatedExportedFunctionPolicy\", {\r\n    createHTML: (value) => value\r\n});\r\n\r\n/** @deprecated Use {@link truncateText} instead. */\r\nexport function truncate(element: HTMLElement, maxHeight: number, lineHeight?: number) {\r\n    truncateWorker(\r\n        element,\r\n        maxHeight,\r\n        element.innerHTML,\r\n        (text: string, idx: number) => {\r\n            const truncatedString = text.substring(0, idx) + \"...\";\r\n            const truncatedHTML =\r\n                ttDeprecatedPolicy?.createHTML(truncatedString) ?? truncatedString;\r\n            element.innerHTML = truncatedHTML as string;\r\n        },\r\n        lineHeight\r\n    );\r\n}\r\n\r\nfunction findBreakableIndices(html: string): number[] {\r\n    const results: number[] = [];\r\n    let idx = findNextCharacter(html, -1);\r\n\r\n    while (idx < html.length) {\r\n        if (html[idx] === \" \") {\r\n            results.push(idx);\r\n        }\r\n\r\n        idx = findNextCharacter(html, idx);\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nfunction findNextCharacter(html: string, currIdx: number): number {\r\n    currIdx += 1;\r\n\r\n    // If we found the start of an HTML tag, keep advancing until we get\r\n    // past it, so we don't end up truncating in the middle of the tag\r\n    while (currIdx < html.length && html[currIdx] === \"<\") {\r\n        while (currIdx < html.length && html[currIdx++] !== \">\") {\r\n            continue;\r\n        }\r\n    }\r\n\r\n    return currIdx;\r\n}\r\n\r\nexport function getFitStatus(element: HTMLElement, containerEnd: number): Enums.ContainerFitStatus {\r\n    const start = element.offsetTop;\r\n    const end = start + element.clientHeight;\r\n\r\n    if (end <= containerEnd) {\r\n        return Enums.ContainerFitStatus.FullyInContainer;\r\n    } else if (start < containerEnd) {\r\n        return Enums.ContainerFitStatus.Overflowing;\r\n    } else {\r\n        return Enums.ContainerFitStatus.FullyOutOfContainer;\r\n    }\r\n}\r\n\r\nexport function getScrollX(): number {\r\n    return window.pageXOffset;\r\n}\r\n\r\nexport function getScrollY(): number {\r\n    return window.pageYOffset;\r\n}\r\n\r\nexport function clearElementChildren(element: HTMLElement) {\r\n    while (element.firstChild) {\r\n        element.removeChild(element.firstChild);\r\n    }\r\n}", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { GlobalSettings, SizeAndUnit } from \"./shared\";\r\nimport * as Utils from \"./utils\";\r\nimport * as Enums from \"./enums\";\r\nimport { Strings } from \"./strings\";\r\n\r\nexport interface IValidationEvent {\r\n    source?: SerializableObject;\r\n    phase: Enums.ValidationPhase;\r\n    event: Enums.ValidationEvent;\r\n    message: string;\r\n}\r\n\r\nexport class Version {\r\n    private _versionString: string;\r\n    private _major: number;\r\n    private _minor: number;\r\n    private _isValid: boolean = true;\r\n    private _label?: string;\r\n\r\n    constructor(major: number = 1, minor: number = 1, label?: string) {\r\n        this._major = major;\r\n        this._minor = minor;\r\n        this._label = label;\r\n    }\r\n\r\n    static parse(versionString: string, context: BaseSerializationContext): Version | undefined {\r\n        if (!versionString) {\r\n            return undefined;\r\n        }\r\n\r\n        const result = new Version();\r\n        result._versionString = versionString;\r\n\r\n        const regEx = /(\\d+).(\\d+)/gi;\r\n        const matches = regEx.exec(versionString);\r\n\r\n        if (matches != null && matches.length === 3) {\r\n            result._major = parseInt(matches[1]);\r\n            result._minor = parseInt(matches[2]);\r\n        } else {\r\n            result._isValid = false;\r\n        }\r\n\r\n        if (!result._isValid) {\r\n            context.logParseEvent(\r\n                undefined,\r\n                Enums.ValidationEvent.InvalidPropertyValue,\r\n                Strings.errors.invalidVersionString(result._versionString)\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toString(): string {\r\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\r\n    }\r\n\r\n    toJSON(): any {\r\n        return this.toString();\r\n    }\r\n\r\n    compareTo(otherVersion: Version): number {\r\n        if (!this.isValid || !otherVersion.isValid) {\r\n            throw new Error(\"Cannot compare invalid version.\");\r\n        }\r\n\r\n        if (this.major > otherVersion.major) {\r\n            return 1;\r\n        } else if (this.major < otherVersion.major) {\r\n            return -1;\r\n        } else if (this.minor > otherVersion.minor) {\r\n            return 1;\r\n        } else if (this.minor < otherVersion.minor) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get label(): string {\r\n        return this._label ? this._label : this.toString();\r\n    }\r\n\r\n    get major(): number {\r\n        return this._major;\r\n    }\r\n\r\n    get minor(): number {\r\n        return this._minor;\r\n    }\r\n\r\n    get isValid(): boolean {\r\n        return this._isValid;\r\n    }\r\n}\r\n\r\nexport type TargetVersion = Version | \"*\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\r\nexport class Versions {\r\n    /* eslint-disable @typescript-eslint/naming-convention */\r\n    static readonly v1_0 = new Version(1, 0);\r\n    static readonly v1_1 = new Version(1, 1);\r\n    static readonly v1_2 = new Version(1, 2);\r\n    static readonly v1_3 = new Version(1, 3);\r\n    static readonly v1_4 = new Version(1, 4);\r\n    static readonly v1_5 = new Version(1, 5);\r\n    // If preview tag is added/removed from any version,\r\n    // don't forget to update .ac-schema-version-1-?::after too in adaptivecards-site\\themes\\adaptivecards\\source\\css\\style.css\r\n    static readonly v1_6 = new Version(1, 6, \"1.6 Preview\");\r\n    static readonly latest = Versions.v1_5;\r\n    /* eslint-enable @typescript-eslint/naming-convention */\r\n\r\n    static getAllDeclaredVersions(): Version[] {\r\n        const ctor = <any>Versions;\r\n        const properties: Version[] = [];\r\n\r\n        for (const propertyName in ctor) {\r\n            if (propertyName.match(/^v[0-9_]*$/)) {\r\n                // filter latest\r\n                try {\r\n                    const propertyValue = ctor[propertyName];\r\n\r\n                    if (propertyValue instanceof Version) {\r\n                        properties.push(propertyValue);\r\n                    }\r\n                } catch {\r\n                    // If a property happens to have a getter function and\r\n                    // it throws an exception, we need to catch it here\r\n                }\r\n            }\r\n        }\r\n        return properties.sort((v1: Version, v2: Version) => v1.compareTo(v2));\r\n    }\r\n}\r\n\r\nexport function isVersionLessOrEqual(\r\n    version: TargetVersion,\r\n    targetVersion: TargetVersion\r\n): boolean {\r\n    if (version instanceof Version) {\r\n        if (targetVersion instanceof Version) {\r\n            return targetVersion.compareTo(version) >= 0;\r\n        } else {\r\n            // Target version is *\r\n            return true;\r\n        }\r\n    } else {\r\n        // Version is *\r\n        return true;\r\n    }\r\n}\r\n\r\nexport abstract class BaseSerializationContext {\r\n    private _validationEvents: IValidationEvent[] = [];\r\n\r\n    toJSONOriginalParam: any;\r\n    targetVersion: Version;\r\n\r\n    constructor(targetVersion: Version = Versions.latest) {\r\n        this.targetVersion = targetVersion;\r\n    }\r\n\r\n    serializeValue(\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue: any,\r\n        defaultValue: any = undefined,\r\n        forceDeleteIfNullOrDefault: boolean = false\r\n    ) {\r\n        if (\r\n            propertyValue === null ||\r\n            propertyValue === undefined ||\r\n            propertyValue === defaultValue\r\n        ) {\r\n            if (!GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault) {\r\n                delete target[propertyName];\r\n            }\r\n        } else if (propertyValue === defaultValue) {\r\n            delete target[propertyName];\r\n        } else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeString(\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue?: string,\r\n        defaultValue?: string\r\n    ) {\r\n        if (\r\n            propertyValue === null ||\r\n            propertyValue === undefined ||\r\n            propertyValue === defaultValue\r\n        ) {\r\n            if (!GlobalSettings.enableFullJsonRoundTrip) {\r\n                delete target[propertyName];\r\n            }\r\n        } else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeBool(\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue?: boolean,\r\n        defaultValue?: boolean\r\n    ) {\r\n        if (\r\n            propertyValue === null ||\r\n            propertyValue === undefined ||\r\n            propertyValue === defaultValue\r\n        ) {\r\n            if (!GlobalSettings.enableFullJsonRoundTrip) {\r\n                delete target[propertyName];\r\n            }\r\n        } else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeNumber(\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue?: number,\r\n        defaultValue?: number\r\n    ) {\r\n        if (\r\n            propertyValue === null ||\r\n            propertyValue === undefined ||\r\n            propertyValue === defaultValue ||\r\n            isNaN(propertyValue)\r\n        ) {\r\n            if (!GlobalSettings.enableFullJsonRoundTrip) {\r\n                delete target[propertyName];\r\n            }\r\n        } else {\r\n            target[propertyName] = propertyValue;\r\n        }\r\n    }\r\n\r\n    serializeEnum(\r\n        enumType: { [s: number]: string },\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue: number | undefined,\r\n        defaultValue: number | undefined = undefined\r\n    ) {\r\n        if (\r\n            propertyValue === null ||\r\n            propertyValue === undefined ||\r\n            propertyValue === defaultValue\r\n        ) {\r\n            if (!GlobalSettings.enableFullJsonRoundTrip) {\r\n                delete target[propertyName];\r\n            }\r\n        } else {\r\n            target[propertyName] = enumType[propertyValue];\r\n        }\r\n    }\r\n\r\n    serializeArray(\r\n        target: { [key: string]: any },\r\n        propertyName: string,\r\n        propertyValue: any[] | undefined\r\n    ) {\r\n        const items = [];\r\n\r\n        if (propertyValue) {\r\n            for (const item of propertyValue) {\r\n                let serializedItem: any = undefined;\r\n\r\n                if (item instanceof SerializableObject) {\r\n                    serializedItem = item.toJSON(this);\r\n                } else if (item.toJSON) {\r\n                    serializedItem = item.toJSON();\r\n                } else {\r\n                    serializedItem = item;\r\n                }\r\n\r\n                if (serializedItem !== undefined) {\r\n                    items.push(serializedItem);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (items.length === 0) {\r\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\r\n                delete target[propertyName];\r\n            }\r\n        } else {\r\n            this.serializeValue(target, propertyName, items);\r\n        }\r\n    }\r\n\r\n    clearEvents() {\r\n        this._validationEvents = [];\r\n    }\r\n\r\n    logEvent(\r\n        source: SerializableObject | undefined,\r\n        phase: Enums.ValidationPhase,\r\n        event: Enums.ValidationEvent,\r\n        message: string\r\n    ) {\r\n        this._validationEvents.push({\r\n            source: source,\r\n            phase: phase,\r\n            event: event,\r\n            message: message\r\n        });\r\n    }\r\n\r\n    logParseEvent(\r\n        source: SerializableObject | undefined,\r\n        event: Enums.ValidationEvent,\r\n        message: string\r\n    ) {\r\n        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\r\n    }\r\n\r\n    getEventAt(index: number): IValidationEvent {\r\n        return this._validationEvents[index];\r\n    }\r\n\r\n    get eventCount(): number {\r\n        return this._validationEvents.length;\r\n    }\r\n}\r\n\r\nclass SimpleSerializationContext extends BaseSerializationContext {}\r\n\r\nexport class PropertyDefinition {\r\n    private static _sequentialNumber: number = 0;\r\n\r\n    getInternalName(): string {\r\n        return this.name;\r\n    }\r\n\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): any {\r\n        return source[this.name];\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: any,\r\n        context: BaseSerializationContext\r\n    ): void {\r\n        context.serializeValue(target, this.name, value, this.defaultValue);\r\n    }\r\n\r\n    readonly sequentialNumber: number;\r\n\r\n    isSerializationEnabled: boolean = true;\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly defaultValue?: any,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => any\r\n    ) {\r\n        this.sequentialNumber = PropertyDefinition._sequentialNumber;\r\n\r\n        PropertyDefinition._sequentialNumber++;\r\n    }\r\n}\r\n\r\nexport class StringProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): string | undefined {\r\n        const parsedValue = Utils.parseString(source[this.name], this.defaultValue);\r\n        const isUndefined =\r\n            parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\r\n\r\n        if (!isUndefined && this.regEx !== undefined) {\r\n            const matches = this.regEx.exec(parsedValue);\r\n\r\n            if (!matches) {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidPropertyValue(parsedValue, this.name)\r\n                );\r\n\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        return parsedValue;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: string | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        context.serializeString(\r\n            target,\r\n            this.name,\r\n            value === \"\" && this.treatEmptyAsUndefined ? undefined : value,\r\n            this.defaultValue\r\n        );\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly treatEmptyAsUndefined: boolean = true,\r\n        readonly regEx?: RegExp,\r\n        readonly defaultValue?: string,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string\r\n    ) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class BoolProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): boolean | undefined {\r\n        return Utils.parseBool(source[this.name], this.defaultValue);\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: object,\r\n        value: boolean | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        context.serializeBool(target, this.name, value, this.defaultValue);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly defaultValue?: boolean,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => any\r\n    ) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class NumProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): number | undefined {\r\n        return Utils.parseNumber(source[this.name], this.defaultValue);\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: number | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        context.serializeNumber(target, this.name, value, this.defaultValue);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly defaultValue?: number,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => any\r\n    ) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class PixelSizeProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): number | undefined {\r\n        let result: number | undefined = undefined;\r\n        const value = source[this.name];\r\n\r\n        if (typeof value === \"string\") {\r\n            let isValid = false;\r\n\r\n            try {\r\n                const size = SizeAndUnit.parse(value, true);\r\n\r\n                if (size.unit === Enums.SizeUnit.Pixel) {\r\n                    result = size.physicalSize;\r\n\r\n                    isValid = true;\r\n                }\r\n            } catch {\r\n                // Do nothing. A parse error is emitted below\r\n            }\r\n\r\n            if (!isValid) {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidPropertyValue(source[this.name], \"minHeight\")\r\n                );\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: number | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined\r\n        );\r\n    }\r\n}\r\n\r\nexport interface IVersionedValue<TValue> {\r\n    value: TValue;\r\n    targetVersion?: Version;\r\n}\r\n\r\nexport class StringArrayProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): string[] | undefined {\r\n        const sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined || !Array.isArray(sourceValue)) {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        const result: string[] = [];\r\n\r\n        for (const value of sourceValue) {\r\n            if (typeof value === \"string\") {\r\n                result.push(value);\r\n            } else {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    `Invalid array value \"${JSON.stringify(\r\n                        value\r\n                    )}\" of type \"${typeof value}\" ignored for \"${this.name}\".`\r\n                );\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: string[] | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        context.serializeArray(target, this.name, value);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly defaultValue?: string[],\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string[] | undefined\r\n    ) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class ValueSetProperty extends PropertyDefinition {\r\n    isValidValue(value: string, context: BaseSerializationContext): boolean {\r\n        for (const versionedValue of this.values) {\r\n            if (value.toLowerCase() === versionedValue.value.toLowerCase()) {\r\n                const targetVersion = versionedValue.targetVersion\r\n                    ? versionedValue.targetVersion\r\n                    : this.targetVersion;\r\n\r\n                return targetVersion.compareTo(context.targetVersion) <= 0;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): string | undefined {\r\n        const sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        if (typeof sourceValue === \"string\") {\r\n            for (const versionedValue of this.values) {\r\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\r\n                    const targetVersion = versionedValue.targetVersion\r\n                        ? versionedValue.targetVersion\r\n                        : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        return versionedValue.value;\r\n                    } else {\r\n                        context.logParseEvent(\r\n                            sender,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            Strings.errors.propertyValueNotSupported(\r\n                                sourceValue,\r\n                                this.name,\r\n                                targetVersion.toString(),\r\n                                context.targetVersion.toString()\r\n                            )\r\n                        );\r\n\r\n                        return this.defaultValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        context.logParseEvent(\r\n            sender,\r\n            Enums.ValidationEvent.InvalidPropertyValue,\r\n            Strings.errors.invalidPropertyValue(sourceValue, this.name)\r\n        );\r\n\r\n        return this.defaultValue;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: string | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        let invalidValue = false;\r\n\r\n        if (value !== undefined) {\r\n            invalidValue = true;\r\n\r\n            for (const versionedValue of this.values) {\r\n                if (versionedValue.value === value) {\r\n                    const targetVersion = versionedValue.targetVersion\r\n                        ? versionedValue.targetVersion\r\n                        : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        invalidValue = false;\r\n\r\n                        break;\r\n                    } else {\r\n                        context.logEvent(\r\n                            sender,\r\n                            Enums.ValidationPhase.ToJSON,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            Strings.errors.propertyValueNotSupported(\r\n                                value,\r\n                                this.name,\r\n                                targetVersion.toString(),\r\n                                context.targetVersion.toString()\r\n                            )\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invalidValue) {\r\n            context.serializeValue(target, this.name, value, this.defaultValue, true);\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly values: IVersionedValue<string>[],\r\n        readonly defaultValue?: string,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string\r\n    ) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n    }\r\n}\r\n\r\nexport class EnumProperty<TEnum extends { [s: number]: string }> extends PropertyDefinition {\r\n    private _values: IVersionedValue<number>[] = [];\r\n\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): number | undefined {\r\n        const sourceValue = source[this.name];\r\n\r\n        if (typeof sourceValue !== \"string\") {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        const enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\r\n\r\n        if (enumValue !== undefined) {\r\n            for (const versionedValue of this.values) {\r\n                if (versionedValue.value === enumValue) {\r\n                    const targetVersion = versionedValue.targetVersion\r\n                        ? versionedValue.targetVersion\r\n                        : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        return enumValue;\r\n                    } else {\r\n                        context.logParseEvent(\r\n                            sender,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            Strings.errors.propertyValueNotSupported(\r\n                                sourceValue,\r\n                                this.name,\r\n                                targetVersion.toString(),\r\n                                context.targetVersion.toString()\r\n                            )\r\n                        );\r\n\r\n                        return this.defaultValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        context.logParseEvent(\r\n            sender,\r\n            Enums.ValidationEvent.InvalidPropertyValue,\r\n            Strings.errors.invalidPropertyValue(sourceValue, this.name)\r\n        );\r\n\r\n        return this.defaultValue;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: number | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        let invalidValue = false;\r\n\r\n        if (value !== undefined) {\r\n            invalidValue = true;\r\n\r\n            for (const versionedValue of this.values) {\r\n                if (versionedValue.value === value) {\r\n                    const targetVersion = versionedValue.targetVersion\r\n                        ? versionedValue.targetVersion\r\n                        : this.targetVersion;\r\n\r\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                        invalidValue = false;\r\n\r\n                        break;\r\n                    } else {\r\n                        context.logEvent(\r\n                            sender,\r\n                            Enums.ValidationPhase.ToJSON,\r\n                            Enums.ValidationEvent.InvalidPropertyValue,\r\n                            Strings.errors.invalidPropertyValue(value, this.name)\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!invalidValue) {\r\n            context.serializeEnum(this.enumType, target, this.name, value, this.defaultValue);\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly enumType: TEnum,\r\n        readonly defaultValue?: number,\r\n        values?: IVersionedValue<number>[],\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => number\r\n    ) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n\r\n        if (!values) {\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in enumType) {\r\n                const keyAsNumber = parseInt(key, 10);\r\n\r\n                if (keyAsNumber >= 0) {\r\n                    this._values.push({ value: keyAsNumber });\r\n                }\r\n            }\r\n        } else {\r\n            this._values = values;\r\n        }\r\n    }\r\n\r\n    get values(): IVersionedValue<number>[] {\r\n        return this._values;\r\n    }\r\n}\r\n\r\nexport type SerializableObjectType = { new (): SerializableObject };\r\n\r\nexport class SerializableObjectProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): SerializableObject | undefined {\r\n        const sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\r\n        }\r\n\r\n        const result = new this.objectType();\r\n        result.parse(sourceValue, context);\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: SerializableObject | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        let serializedValue: object | undefined = undefined;\r\n\r\n        if (value !== undefined && !value.hasAllDefaultValues()) {\r\n            serializedValue = value.toJSON(context);\r\n        }\r\n\r\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\r\n            serializedValue = undefined;\r\n        }\r\n\r\n        context.serializeValue(target, this.name, serializedValue, this.defaultValue, true);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly objectType: SerializableObjectType,\r\n        readonly nullable: boolean = false,\r\n        defaultValue?: SerializableObject\r\n    ) {\r\n        super(targetVersion, name, defaultValue, (sender: SerializableObject) => {\r\n            return this.nullable ? undefined : new this.objectType();\r\n        });\r\n    }\r\n}\r\n\r\nexport class SerializableObjectCollectionProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): SerializableObject[] | undefined {\r\n        const result: SerializableObject[] | undefined = [];\r\n\r\n        const sourceCollection = source[this.name];\r\n\r\n        if (Array.isArray(sourceCollection)) {\r\n            for (const sourceItem of sourceCollection) {\r\n                const item = new this.objectType();\r\n                item.parse(sourceItem, context);\r\n\r\n                result.push(item);\r\n\r\n                if (this.onItemAdded) {\r\n                    this.onItemAdded(sender, item);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result.length > 0\r\n            ? result\r\n            : this.onGetInitialValue\r\n            ? this.onGetInitialValue(sender)\r\n            : undefined;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: SerializableObject[] | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        context.serializeArray(target, this.name, value);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly objectType: SerializableObjectType,\r\n        readonly onItemAdded?: (sender: SerializableObject, item: SerializableObject) => void\r\n    ) {\r\n        super(targetVersion, name, undefined, (sender: SerializableObject) => {\r\n            return [];\r\n        });\r\n    }\r\n}\r\n\r\nexport class CustomProperty<T> extends PropertyDefinition {\r\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): T {\r\n        return this.onParse(sender, this, source, context);\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: T,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        this.onToJSON(sender, this, target, value, context);\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly onParse: (\r\n            sender: SerializableObject,\r\n            property: PropertyDefinition,\r\n            source: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => T,\r\n        readonly onToJSON: (\r\n            sender: SerializableObject,\r\n            property: PropertyDefinition,\r\n            target: PropertyBag,\r\n            value: T,\r\n            context: BaseSerializationContext\r\n        ) => void,\r\n        readonly defaultValue?: T,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => T\r\n    ) {\r\n        super(targetVersion, name, defaultValue, onGetInitialValue);\r\n\r\n        if (!this.onParse) {\r\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\r\n        }\r\n\r\n        if (!this.onToJSON) {\r\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class SerializableObjectSchema {\r\n    private _properties: PropertyDefinition[] = [];\r\n\r\n    indexOf(prop: PropertyDefinition): number {\r\n        for (let i = 0; i < this._properties.length; i++) {\r\n            if (this._properties[i] === prop) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    add(...properties: PropertyDefinition[]) {\r\n        for (const prop of properties) {\r\n            if (this.indexOf(prop) === -1) {\r\n                this._properties.push(prop);\r\n            }\r\n        }\r\n    }\r\n\r\n    remove(...properties: PropertyDefinition[]) {\r\n        for (const prop of properties) {\r\n            while (true) {\r\n                const index = this.indexOf(prop);\r\n\r\n                if (index >= 0) {\r\n                    this._properties.splice(index, 1);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getItemAt(index: number): PropertyDefinition {\r\n        return this._properties[index];\r\n    }\r\n\r\n    getCount(): number {\r\n        return this._properties.length;\r\n    }\r\n}\r\n\r\n// This is a decorator function, used to map SerializableObject descendant class members to\r\n// schema properties\r\nexport function property(prop: PropertyDefinition) {\r\n    return function (target: any, propertyKey: string) {\r\n        const descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\r\n\r\n        if (!descriptor.get && !descriptor.set) {\r\n            descriptor.get = function (this: SerializableObject) {\r\n                return this.getValue(prop);\r\n            };\r\n            descriptor.set = function (this: SerializableObject, value: any) {\r\n                this.setValue(prop, value);\r\n            };\r\n\r\n            Object.defineProperty(target, propertyKey, descriptor);\r\n        }\r\n    };\r\n}\r\n\r\nexport type PropertyBag = { [propertyName: string]: any };\r\n\r\nexport abstract class SerializableObject {\r\n    static onRegisterCustomProperties?: (\r\n        sender: SerializableObject,\r\n        schema: SerializableObjectSchema\r\n    ) => void;\r\n    static defaultMaxVersion: Version = Versions.latest;\r\n\r\n    private static readonly _schemaCache: { [typeName: string]: SerializableObjectSchema } = {};\r\n\r\n    private _propertyBag: PropertyBag = {};\r\n    private _rawProperties: PropertyBag = {};\r\n\r\n    protected abstract getSchemaKey(): string;\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SimpleSerializationContext();\r\n    }\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        const ctor = <any>this.constructor;\r\n        const properties: PropertyDefinition[] = [];\r\n\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const propertyName in ctor) {\r\n            try {\r\n                const propertyValue = ctor[propertyName];\r\n\r\n                if (propertyValue instanceof PropertyDefinition) {\r\n                    properties.push(propertyValue);\r\n                }\r\n            } catch {\r\n                // If a property happens to have a getter function and\r\n                // it throws an exception, we need to catch it here\r\n            }\r\n        }\r\n\r\n        if (properties.length > 0) {\r\n            const sortedProperties = properties.sort(\r\n                (p1: PropertyDefinition, p2: PropertyDefinition) => {\r\n                    if (p1.sequentialNumber > p2.sequentialNumber) {\r\n                        return 1;\r\n                    } else if (p1.sequentialNumber < p2.sequentialNumber) {\r\n                        return -1;\r\n                    }\r\n\r\n                    return 0;\r\n                }\r\n            );\r\n\r\n            schema.add(...sortedProperties);\r\n        }\r\n\r\n        if (SerializableObject.onRegisterCustomProperties) {\r\n            SerializableObject.onRegisterCustomProperties(this, schema);\r\n        }\r\n    }\r\n\r\n    protected getValue(prop: PropertyDefinition): any {\r\n        return this._propertyBag.hasOwnProperty(prop.getInternalName())\r\n            ? this._propertyBag[prop.getInternalName()]\r\n            : prop.defaultValue;\r\n    }\r\n\r\n    protected setValue(prop: PropertyDefinition, value: any) {\r\n        if (value === undefined || value === null) {\r\n            delete this._propertyBag[prop.getInternalName()];\r\n        } else {\r\n            this._propertyBag[prop.getInternalName()] = value;\r\n        }\r\n    }\r\n\r\n    protected internalParse(source: PropertyBag, context: BaseSerializationContext) {\r\n        this._propertyBag = {};\r\n        this._rawProperties = GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\r\n\r\n        if (source) {\r\n            const s = this.getSchema();\r\n\r\n            for (let i = 0; i < s.getCount(); i++) {\r\n                const prop = s.getItemAt(i);\r\n\r\n                if (prop.isSerializationEnabled) {\r\n                    let propertyValue = prop.onGetInitialValue\r\n                        ? prop.onGetInitialValue(this)\r\n                        : undefined;\r\n\r\n                    if (source.hasOwnProperty(prop.name)) {\r\n                        if (prop.targetVersion.compareTo(context.targetVersion) <= 0) {\r\n                            propertyValue = prop.parse(this, source, context);\r\n                        } else {\r\n                            context.logParseEvent(\r\n                                this,\r\n                                Enums.ValidationEvent.UnsupportedProperty,\r\n                                Strings.errors.propertyNotSupported(\r\n                                    prop.name,\r\n                                    prop.targetVersion.toString(),\r\n                                    context.targetVersion.toString()\r\n                                )\r\n                            );\r\n                        }\r\n                    }\r\n\r\n                    this.setValue(prop, propertyValue);\r\n                }\r\n            }\r\n        } else {\r\n            this.resetDefaultValues();\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\r\n        const s = this.getSchema();\r\n        const serializedProperties: string[] = [];\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            const prop = s.getItemAt(i);\r\n\r\n            // Avoid serializing the same property multiple times. This is necessary\r\n            // because some property definitions map to the same underlying schema\r\n            // property\r\n            if (\r\n                prop.isSerializationEnabled &&\r\n                prop.targetVersion.compareTo(context.targetVersion) <= 0 &&\r\n                serializedProperties.indexOf(prop.name) === -1\r\n            ) {\r\n                prop.toJSON(this, target, this.getValue(prop), context);\r\n\r\n                serializedProperties.push(prop.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected shouldSerialize(_context: BaseSerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    maxVersion: Version = SerializableObject.defaultMaxVersion;\r\n\r\n    constructor() {\r\n        const s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            const prop = s.getItemAt(i);\r\n\r\n            if (prop.onGetInitialValue) {\r\n                this.setValue(prop, prop.onGetInitialValue(this));\r\n            }\r\n        }\r\n    }\r\n\r\n    parse(source: PropertyBag, context?: BaseSerializationContext) {\r\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\r\n    }\r\n\r\n    toJSON(context?: BaseSerializationContext): PropertyBag | undefined {\r\n        let effectiveContext: BaseSerializationContext;\r\n\r\n        if (context && context instanceof BaseSerializationContext) {\r\n            effectiveContext = context;\r\n        } else {\r\n            effectiveContext = this.getDefaultSerializationContext();\r\n            effectiveContext.toJSONOriginalParam = context;\r\n        }\r\n\r\n        if (this.shouldSerialize(effectiveContext)) {\r\n            let result: PropertyBag;\r\n\r\n            if (\r\n                GlobalSettings.enableFullJsonRoundTrip &&\r\n                this._rawProperties &&\r\n                typeof this._rawProperties === \"object\"\r\n            ) {\r\n                result = this._rawProperties;\r\n            } else {\r\n                result = {};\r\n            }\r\n\r\n            this.internalToJSON(result, effectiveContext);\r\n\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    hasDefaultValue(prop: PropertyDefinition): boolean {\r\n        return this.getValue(prop) === prop.defaultValue;\r\n    }\r\n\r\n    hasAllDefaultValues(): boolean {\r\n        const s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            const prop = s.getItemAt(i);\r\n\r\n            if (!this.hasDefaultValue(prop)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    resetDefaultValues() {\r\n        const s = this.getSchema();\r\n\r\n        for (let i = 0; i < s.getCount(); i++) {\r\n            const prop = s.getItemAt(i);\r\n\r\n            this.setValue(prop, prop.defaultValue);\r\n        }\r\n    }\r\n\r\n    setCustomProperty(name: string, value: any) {\r\n        const shouldDeleteProperty =\r\n            (typeof value === \"string\" && !value) || value === undefined || value === null;\r\n\r\n        if (shouldDeleteProperty) {\r\n            delete this._rawProperties[name];\r\n        } else {\r\n            this._rawProperties[name] = value;\r\n        }\r\n    }\r\n\r\n    getCustomProperty(name: string): any {\r\n        return this._rawProperties[name];\r\n    }\r\n\r\n    getSchema(): SerializableObjectSchema {\r\n        let schema: SerializableObjectSchema = SerializableObject._schemaCache[this.getSchemaKey()];\r\n\r\n        if (!schema) {\r\n            schema = new SerializableObjectSchema();\r\n\r\n            this.populateSchema(schema);\r\n\r\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\r\n        }\r\n\r\n        return schema;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport {\r\n    TargetVersion,\r\n    Version,\r\n    SerializableObject,\r\n    BaseSerializationContext,\r\n    PropertyBag\r\n} from \"./serialization\";\r\n\r\nexport class HostCapabilities extends SerializableObject {\r\n    private _capabilities: { [key: string]: TargetVersion } = {};\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"HostCapabilities\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: BaseSerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        if (source) {\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const name in source) {\r\n                const jsonVersion = source[name];\r\n\r\n                if (typeof jsonVersion === \"string\") {\r\n                    if (jsonVersion === \"*\") {\r\n                        this.addCapability(name, \"*\");\r\n                    } else {\r\n                        const version = Version.parse(jsonVersion, context);\r\n\r\n                        if (version?.isValid) {\r\n                            this.addCapability(name, version);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const key in this._capabilities) {\r\n            target[key] = this._capabilities[key];\r\n        }\r\n    }\r\n\r\n    addCapability(name: string, version: TargetVersion) {\r\n        this._capabilities[name] = version;\r\n    }\r\n\r\n    removeCapability(name: string) {\r\n        delete this._capabilities[name];\r\n    }\r\n\r\n    clear() {\r\n        this._capabilities = {};\r\n    }\r\n\r\n    hasCapability(name: string, version: TargetVersion): boolean {\r\n        if (this._capabilities.hasOwnProperty(name)) {\r\n            if (version === \"*\" || this._capabilities[name] === \"*\") {\r\n                return true;\r\n            }\r\n\r\n            return version.compareTo(<Version>this._capabilities[name]) <= 0;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    areAllMet(hostCapabilities: HostCapabilities): boolean {\r\n        for (const capabilityName in this._capabilities) {\r\n            if (\r\n                !hostCapabilities.hasCapability(capabilityName, this._capabilities[capabilityName])\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Utils from \"./utils\";\r\nimport * as Shared from \"./shared\";\r\nimport { HostCapabilities } from \"./host-capabilities\";\r\n\r\nfunction parseHostConfigEnum(\r\n    targetEnum: { [s: number]: string },\r\n    value: string | number,\r\n    defaultValue: number\r\n): number {\r\n    if (typeof value === \"string\") {\r\n        const parsedValue = Utils.parseEnum(targetEnum, value, defaultValue);\r\n\r\n        return parsedValue !== undefined ? parsedValue : defaultValue;\r\n    } else if (typeof value === \"number\") {\r\n        return value;\r\n    } else {\r\n        return defaultValue;\r\n    }\r\n}\r\n\r\nexport class ColorDefinition {\r\n    default: string = \"#000000\";\r\n    subtle: string = \"#666666\";\r\n\r\n    constructor(defaultColor?: string, subtleColor?: string) {\r\n        if (defaultColor) {\r\n            this.default = defaultColor;\r\n        }\r\n\r\n        if (subtleColor) {\r\n            this.subtle = subtleColor;\r\n        }\r\n    }\r\n\r\n    parse(obj?: any) {\r\n        if (obj) {\r\n            this.default = obj[\"default\"] || this.default;\r\n            this.subtle = obj[\"subtle\"] || this.subtle;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextColorDefinition extends ColorDefinition {\r\n    readonly highlightColors = new ColorDefinition(\"#22000000\", \"#11000000\");\r\n\r\n    parse(obj?: any) {\r\n        super.parse(obj);\r\n\r\n        if (obj) {\r\n            this.highlightColors.parse(obj[\"highlightColors\"]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class AdaptiveCardConfig {\r\n    allowCustomStyle: boolean = false;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.allowCustomStyle = obj[\"allowCustomStyle\"] || this.allowCustomStyle;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ImageSetConfig {\r\n    imageSize: Enums.Size = Enums.Size.Medium;\r\n    maxImageHeight: number = 100;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.imageSize = obj[\"imageSize\"] != null ? obj[\"imageSize\"] : this.imageSize;\r\n            this.maxImageHeight = Utils.parseNumber(obj[\"maxImageHeight\"], 100)!;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            imageSize: Enums.Size[this.imageSize],\r\n            maxImageHeight: this.maxImageHeight\r\n        };\r\n    }\r\n}\r\n\r\nexport class MediaConfig {\r\n    defaultPoster?: string;\r\n    allowInlinePlayback: boolean = true;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.defaultPoster = obj[\"defaultPoster\"];\r\n            this.allowInlinePlayback = obj[\"allowInlinePlayback\"] || this.allowInlinePlayback;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            defaultPoster: this.defaultPoster,\r\n            allowInlinePlayback: this.allowInlinePlayback\r\n        };\r\n    }\r\n}\r\n\r\nexport class TableConfig {\r\n    cellSpacing: number = 8;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.cellSpacing =\r\n                obj.cellSpacing && typeof obj.cellSpacing === \"number\"\r\n                    ? obj.cellSpacing\r\n                    : this.cellSpacing;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            cellSpacing: this.cellSpacing\r\n        };\r\n    }\r\n}\r\n\r\nexport class BaseTextDefinition {\r\n    size: Enums.TextSize = Enums.TextSize.Default;\r\n    color: Enums.TextColor = Enums.TextColor.Default;\r\n    isSubtle: boolean = false;\r\n    weight: Enums.TextWeight = Enums.TextWeight.Default;\r\n\r\n    constructor(obj?: any) {\r\n        this.parse(obj);\r\n    }\r\n\r\n    parse(obj: any) {\r\n        if (obj) {\r\n            this.size = parseHostConfigEnum(Enums.TextSize, obj[\"size\"], this.size);\r\n            this.color = parseHostConfigEnum(Enums.TextColor, obj[\"color\"], this.color);\r\n            this.isSubtle =\r\n                obj.isSubtle !== undefined && typeof obj.isSubtle === \"boolean\"\r\n                    ? obj.isSubtle\r\n                    : this.isSubtle;\r\n            this.weight = parseHostConfigEnum(\r\n                Enums.TextWeight,\r\n                obj[\"weight\"],\r\n                this.getDefaultWeight()\r\n            );\r\n        }\r\n    }\r\n\r\n    getDefaultWeight(): Enums.TextWeight {\r\n        return Enums.TextWeight.Default;\r\n    }\r\n\r\n    toJSON(): any {\r\n        return {\r\n            size: Enums.TextSize[this.size],\r\n            color: Enums.TextColor[this.color],\r\n            isSubtle: this.isSubtle,\r\n            weight: Enums.TextWeight[this.weight]\r\n        };\r\n    }\r\n}\r\n\r\nexport class TextStyleDefinition extends BaseTextDefinition {\r\n    fontType: Enums.FontType = Enums.FontType.Default;\r\n\r\n    parse(obj: any) {\r\n        super.parse(obj);\r\n\r\n        if (obj) {\r\n            this.fontType = parseHostConfigEnum(Enums.FontType, obj.fontType, this.fontType);\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextStyleSet {\r\n    readonly default: TextStyleDefinition = new TextStyleDefinition();\r\n    readonly heading: TextStyleDefinition = new TextStyleDefinition({\r\n        size: \"Large\",\r\n        weight: \"Bolder\"\r\n    });\r\n    readonly columnHeader: TextStyleDefinition = new TextStyleDefinition({\r\n        weight: \"Bolder\"\r\n    });\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.heading.parse(obj.heading);\r\n            this.columnHeader.parse(obj.columnHeader);\r\n        }\r\n    }\r\n\r\n    getStyleByName(name: string): TextStyleDefinition {\r\n        switch (name.toLowerCase()) {\r\n            case \"heading\":\r\n                return this.heading;\r\n            case \"columnHeader\":\r\n                return this.columnHeader;\r\n            default:\r\n                return this.default;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextBlockConfig {\r\n    headingLevel?: number;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.headingLevel = Utils.parseNumber(obj.headingLevel);\r\n        }\r\n    }\r\n}\r\n\r\nexport class RequiredInputLabelTextDefinition extends BaseTextDefinition {\r\n    suffix?: string = \" *\";\r\n    suffixColor: Enums.TextColor = Enums.TextColor.Attention;\r\n\r\n    parse(obj?: any) {\r\n        super.parse(obj);\r\n\r\n        if (obj) {\r\n            this.suffix = obj[\"suffix\"] || this.suffix;\r\n            this.suffixColor = parseHostConfigEnum(\r\n                Enums.TextColor,\r\n                obj[\"suffixColor\"],\r\n                this.suffixColor\r\n            );\r\n        }\r\n    }\r\n\r\n    toJSON(): any {\r\n        const result = super.toJSON();\r\n        result[\"suffix\"] = this.suffix;\r\n        result[\"suffixColor\"] = Enums.TextColor[this.suffixColor];\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class InputLabelConfig {\r\n    inputSpacing: Enums.Spacing = Enums.Spacing.Small;\r\n    readonly requiredInputs: RequiredInputLabelTextDefinition =\r\n        new RequiredInputLabelTextDefinition();\r\n    readonly optionalInputs: BaseTextDefinition = new BaseTextDefinition();\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.inputSpacing = parseHostConfigEnum(\r\n                Enums.Spacing,\r\n                obj[\"inputSpacing\"],\r\n                this.inputSpacing\r\n            );\r\n            this.requiredInputs = new RequiredInputLabelTextDefinition(obj[\"requiredInputs\"]);\r\n            this.optionalInputs = new BaseTextDefinition(obj[\"optionalInputs\"]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class InputConfig {\r\n    readonly label: InputLabelConfig = new InputLabelConfig();\r\n    readonly errorMessage: BaseTextDefinition = new BaseTextDefinition({\r\n        color: Enums.TextColor.Attention\r\n    });\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.label = new InputLabelConfig(obj[\"label\"]);\r\n            this.errorMessage = new BaseTextDefinition(obj[\"errorMessage\"]);\r\n        }\r\n    }\r\n}\r\n\r\nexport class FactTextDefinition extends BaseTextDefinition {\r\n    wrap: boolean = true;\r\n\r\n    parse(obj?: any) {\r\n        super.parse(obj);\r\n\r\n        if (obj) {\r\n            this.wrap = obj[\"wrap\"] != null ? obj[\"wrap\"] : this.wrap;\r\n        }\r\n    }\r\n\r\n    toJSON(): any {\r\n        const result = super.toJSON();\r\n        result[\"wrap\"] = this.wrap;\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class FactTitleDefinition extends FactTextDefinition {\r\n    maxWidth?: number = 150;\r\n    weight: Enums.TextWeight = Enums.TextWeight.Bolder;\r\n\r\n    constructor(obj?: any) {\r\n        super(obj);\r\n\r\n        if (obj) {\r\n            this.maxWidth = obj[\"maxWidth\"] != null ? obj[\"maxWidth\"] : this.maxWidth;\r\n            this.weight = parseHostConfigEnum(\r\n                Enums.TextWeight,\r\n                obj[\"weight\"],\r\n                Enums.TextWeight.Bolder\r\n            );\r\n        }\r\n    }\r\n\r\n    getDefaultWeight() {\r\n        return Enums.TextWeight.Bolder;\r\n    }\r\n}\r\n\r\nexport class FactSetConfig {\r\n    readonly title: FactTitleDefinition = new FactTitleDefinition();\r\n    readonly value: FactTextDefinition = new FactTextDefinition();\r\n    spacing: number = 10;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.title = new FactTitleDefinition(obj[\"title\"]);\r\n            this.value = new FactTextDefinition(obj[\"value\"]);\r\n            this.spacing =\r\n                obj.spacing && obj.spacing != null ? obj.spacing && obj.spacing : this.spacing;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ShowCardActionConfig {\r\n    actionMode: Enums.ShowCardActionMode = Enums.ShowCardActionMode.Inline;\r\n    inlineTopMargin: number = 16;\r\n    style?: string = Enums.ContainerStyle.Emphasis;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.actionMode = parseHostConfigEnum(\r\n                Enums.ShowCardActionMode,\r\n                obj[\"actionMode\"],\r\n                Enums.ShowCardActionMode.Inline\r\n            );\r\n            this.inlineTopMargin =\r\n                obj[\"inlineTopMargin\"] != null ? obj[\"inlineTopMargin\"] : this.inlineTopMargin;\r\n            this.style =\r\n                obj[\"style\"] && typeof obj[\"style\"] === \"string\"\r\n                    ? obj[\"style\"]\r\n                    : Enums.ContainerStyle.Emphasis;\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            actionMode: Enums.ShowCardActionMode[this.actionMode],\r\n            inlineTopMargin: this.inlineTopMargin,\r\n            style: this.style\r\n        };\r\n    }\r\n}\r\n\r\nexport class ActionsConfig {\r\n    maxActions: number = 5;\r\n    spacing: Enums.Spacing = Enums.Spacing.Default;\r\n    buttonSpacing: number = 20;\r\n    readonly showCard: ShowCardActionConfig = new ShowCardActionConfig();\r\n    preExpandSingleShowCardAction?: boolean = false;\r\n    actionsOrientation: Enums.Orientation = Enums.Orientation.Horizontal;\r\n    actionAlignment: Enums.ActionAlignment = Enums.ActionAlignment.Left;\r\n    iconPlacement: Enums.ActionIconPlacement = Enums.ActionIconPlacement.LeftOfTitle;\r\n    allowTitleToWrap: boolean = false;\r\n    iconSize: number = 16;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            this.maxActions = obj[\"maxActions\"] != null ? obj[\"maxActions\"] : this.maxActions;\r\n            this.spacing = parseHostConfigEnum(\r\n                Enums.Spacing,\r\n                obj.spacing && obj.spacing,\r\n                Enums.Spacing.Default\r\n            );\r\n            this.buttonSpacing =\r\n                obj[\"buttonSpacing\"] != null ? obj[\"buttonSpacing\"] : this.buttonSpacing;\r\n            this.showCard = new ShowCardActionConfig(obj[\"showCard\"]);\r\n            this.preExpandSingleShowCardAction = Utils.parseBool(\r\n                obj[\"preExpandSingleShowCardAction\"],\r\n                false\r\n            );\r\n            this.actionsOrientation = parseHostConfigEnum(\r\n                Enums.Orientation,\r\n                obj[\"actionsOrientation\"],\r\n                Enums.Orientation.Horizontal\r\n            );\r\n            this.actionAlignment = parseHostConfigEnum(\r\n                Enums.ActionAlignment,\r\n                obj[\"actionAlignment\"],\r\n                Enums.ActionAlignment.Left\r\n            );\r\n            this.iconPlacement = parseHostConfigEnum(\r\n                Enums.ActionIconPlacement,\r\n                obj[\"iconPlacement\"],\r\n                Enums.ActionIconPlacement.LeftOfTitle\r\n            );\r\n            this.allowTitleToWrap =\r\n                obj[\"allowTitleToWrap\"] != null ? obj[\"allowTitleToWrap\"] : this.allowTitleToWrap;\r\n\r\n            try {\r\n                const sizeAndUnit = Shared.SizeAndUnit.parse(obj[\"iconSize\"]);\r\n\r\n                if (sizeAndUnit.unit === Enums.SizeUnit.Pixel) {\r\n                    this.iconSize = sizeAndUnit.physicalSize;\r\n                }\r\n            } catch (e) {\r\n                // Swallow this, keep default icon size\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            maxActions: this.maxActions,\r\n            spacing: Enums.Spacing[this.spacing],\r\n            buttonSpacing: this.buttonSpacing,\r\n            showCard: this.showCard,\r\n            preExpandSingleShowCardAction: this.preExpandSingleShowCardAction,\r\n            actionsOrientation: Enums.Orientation[this.actionsOrientation],\r\n            actionAlignment: Enums.ActionAlignment[this.actionAlignment]\r\n        };\r\n    }\r\n}\r\n\r\nexport class ColorSetDefinition {\r\n    private parseSingleColor(obj: any, propertyName: string) {\r\n        if (obj) {\r\n            ((<any>this)[propertyName] as TextColorDefinition).parse(obj[propertyName]);\r\n        }\r\n    }\r\n\r\n    default: TextColorDefinition = new TextColorDefinition();\r\n    dark: TextColorDefinition = new TextColorDefinition();\r\n    light: TextColorDefinition = new TextColorDefinition();\r\n    accent: TextColorDefinition = new TextColorDefinition();\r\n    good: TextColorDefinition = new TextColorDefinition();\r\n    warning: TextColorDefinition = new TextColorDefinition();\r\n    attention: TextColorDefinition = new TextColorDefinition();\r\n\r\n    constructor(obj?: any) {\r\n        this.parse(obj);\r\n    }\r\n\r\n    parse(obj: any) {\r\n        if (obj) {\r\n            this.parseSingleColor(obj, \"default\");\r\n            this.parseSingleColor(obj, \"dark\");\r\n            this.parseSingleColor(obj, \"light\");\r\n            this.parseSingleColor(obj, \"accent\");\r\n            this.parseSingleColor(obj, \"good\");\r\n            this.parseSingleColor(obj, \"warning\");\r\n            this.parseSingleColor(obj, \"attention\");\r\n        }\r\n    }\r\n}\r\n\r\nexport class ContainerStyleDefinition {\r\n    backgroundColor?: string;\r\n\r\n    readonly foregroundColors: ColorSetDefinition = new ColorSetDefinition({\r\n        \"default\": { default: \"#333333\", subtle: \"#EE333333\" },\r\n        \"dark\": { default: \"#000000\", subtle: \"#66000000\" },\r\n        \"light\": { default: \"#FFFFFF\", subtle: \"#33000000\" },\r\n        \"accent\": { default: \"#2E89FC\", subtle: \"#882E89FC\" },\r\n        \"good\": { default: \"#028A02\", subtle: \"#DD027502\" },\r\n        \"warning\": { default: \"#E69500\", subtle: \"#DDE69500\" },\r\n        \"attention\": { default: \"#CC3300\", subtle: \"#DDCC3300\" }\r\n    });\r\n\r\n    highlightBackgroundColor?: string;\r\n    highlightForegroundColor?: string;\r\n    borderColor?: string;\r\n\r\n    parse(obj: any) {\r\n        if (obj) {\r\n            this.backgroundColor = obj[\"backgroundColor\"];\r\n\r\n            this.foregroundColors.parse(obj[\"foregroundColors\"]);\r\n\r\n            this.highlightBackgroundColor = obj[\"highlightBackgroundColor\"];\r\n            this.highlightForegroundColor = obj[\"highlightForegroundColor\"];\r\n\r\n            this.borderColor = obj[\"borderColor\"];\r\n        }\r\n    }\r\n\r\n    constructor(obj?: any) {\r\n        this.parse(obj);\r\n    }\r\n\r\n    get isBuiltIn(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass BuiltInContainerStyleDefinition extends ContainerStyleDefinition {\r\n    get isBuiltIn(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport interface ILineHeightDefinitions {\r\n    small: number;\r\n    medium: number;\r\n    default: number;\r\n    large: number;\r\n    extraLarge: number;\r\n}\r\n\r\nexport class ContainerStyleSet {\r\n    private _allStyles: { [key: string]: ContainerStyleDefinition } = {};\r\n\r\n    constructor(obj?: any) {\r\n        this._allStyles[Enums.ContainerStyle.Default] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Emphasis] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Accent] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Good] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Attention] = new BuiltInContainerStyleDefinition();\r\n        this._allStyles[Enums.ContainerStyle.Warning] = new BuiltInContainerStyleDefinition();\r\n\r\n        if (obj) {\r\n            this._allStyles[Enums.ContainerStyle.Default].parse(obj[Enums.ContainerStyle.Default]);\r\n            this._allStyles[Enums.ContainerStyle.Emphasis].parse(\r\n                obj[Enums.ContainerStyle.Emphasis]\r\n            );\r\n            this._allStyles[Enums.ContainerStyle.Accent].parse(obj[Enums.ContainerStyle.Accent]);\r\n            this._allStyles[Enums.ContainerStyle.Good].parse(obj[Enums.ContainerStyle.Good]);\r\n            this._allStyles[Enums.ContainerStyle.Attention].parse(\r\n                obj[Enums.ContainerStyle.Attention]\r\n            );\r\n            this._allStyles[Enums.ContainerStyle.Warning].parse(obj[Enums.ContainerStyle.Warning]);\r\n\r\n            const customStyleArray = obj[\"customStyles\"];\r\n\r\n            if (customStyleArray && Array.isArray(customStyleArray)) {\r\n                for (const customStyle of customStyleArray) {\r\n                    if (customStyle) {\r\n                        const styleName = customStyle[\"name\"];\r\n\r\n                        if (styleName && typeof styleName === \"string\") {\r\n                            if (this._allStyles.hasOwnProperty(styleName)) {\r\n                                this._allStyles[styleName].parse(customStyle[\"style\"]);\r\n                            } else {\r\n                                this._allStyles[styleName] = new ContainerStyleDefinition(\r\n                                    customStyle[\"style\"]\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        const customStyleArray: any[] = [];\r\n\r\n        Object.keys(this._allStyles).forEach((key) => {\r\n            if (!this._allStyles[key].isBuiltIn) {\r\n                customStyleArray.push({\r\n                    name: key,\r\n                    style: this._allStyles[key]\r\n                });\r\n            }\r\n        });\r\n\r\n        const result: any = {\r\n            default: this.default,\r\n            emphasis: this.emphasis\r\n        };\r\n\r\n        if (customStyleArray.length > 0) {\r\n            result.customStyles = customStyleArray;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getStyleByName(\r\n        name: string | undefined,\r\n        defaultValue?: ContainerStyleDefinition\r\n    ): ContainerStyleDefinition {\r\n        if (name && this._allStyles.hasOwnProperty(name)) {\r\n            return this._allStyles[name];\r\n        } else {\r\n            return defaultValue ? defaultValue : this._allStyles[Enums.ContainerStyle.Default];\r\n        }\r\n    }\r\n\r\n    get default(): ContainerStyleDefinition {\r\n        return this._allStyles[Enums.ContainerStyle.Default];\r\n    }\r\n\r\n    get emphasis(): ContainerStyleDefinition {\r\n        return this._allStyles[Enums.ContainerStyle.Emphasis];\r\n    }\r\n}\r\n\r\nexport interface IFontSizeDefinitions {\r\n    small: number;\r\n    default: number;\r\n    medium: number;\r\n    large: number;\r\n    extraLarge: number;\r\n}\r\n\r\nexport interface IFontWeightDefinitions {\r\n    lighter: number;\r\n    default: number;\r\n    bolder: number;\r\n}\r\n\r\nexport class FontTypeDefinition {\r\n    static readonly monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\r\n\r\n    fontFamily?: string = \"Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif\";\r\n\r\n    fontSizes: IFontSizeDefinitions = {\r\n        small: 12,\r\n        default: 14,\r\n        medium: 17,\r\n        large: 21,\r\n        extraLarge: 26\r\n    };\r\n\r\n    fontWeights: IFontWeightDefinitions = {\r\n        lighter: 200,\r\n        default: 400,\r\n        bolder: 600\r\n    };\r\n\r\n    constructor(fontFamily?: string) {\r\n        if (fontFamily) {\r\n            this.fontFamily = fontFamily;\r\n        }\r\n    }\r\n\r\n    parse(obj?: any) {\r\n        this.fontFamily = obj[\"fontFamily\"] || this.fontFamily;\r\n        this.fontSizes = {\r\n            small: (obj.fontSizes && obj.fontSizes[\"small\"]) || this.fontSizes.small,\r\n            default: (obj.fontSizes && obj.fontSizes[\"default\"]) || this.fontSizes.default,\r\n            medium: (obj.fontSizes && obj.fontSizes[\"medium\"]) || this.fontSizes.medium,\r\n            large: (obj.fontSizes && obj.fontSizes[\"large\"]) || this.fontSizes.large,\r\n            extraLarge: (obj.fontSizes && obj.fontSizes[\"extraLarge\"]) || this.fontSizes.extraLarge\r\n        };\r\n        this.fontWeights = {\r\n            lighter: (obj.fontWeights && obj.fontWeights[\"lighter\"]) || this.fontWeights.lighter,\r\n            default: (obj.fontWeights && obj.fontWeights[\"default\"]) || this.fontWeights.default,\r\n            bolder: (obj.fontWeights && obj.fontWeights[\"bolder\"]) || this.fontWeights.bolder\r\n        };\r\n    }\r\n}\r\n\r\nexport class FontTypeSet {\r\n    default: FontTypeDefinition;\r\n    monospace: FontTypeDefinition;\r\n\r\n    constructor(obj?: any) {\r\n        this.default = new FontTypeDefinition();\r\n        this.monospace = new FontTypeDefinition(\"'Courier New', Courier, monospace\");\r\n\r\n        if (obj) {\r\n            this.default.parse(obj[\"default\"]);\r\n            this.monospace.parse(obj[\"monospace\"]);\r\n        }\r\n    }\r\n\r\n    getStyleDefinition(style: Enums.FontType | undefined): FontTypeDefinition {\r\n        switch (style) {\r\n            case Enums.FontType.Monospace:\r\n                return this.monospace;\r\n            case Enums.FontType.Default:\r\n            default:\r\n                return this.default;\r\n        }\r\n    }\r\n}\r\n\r\nexport class HostConfig {\r\n    readonly hostCapabilities = new HostCapabilities();\r\n\r\n    private _legacyFontType: FontTypeDefinition;\r\n\r\n    choiceSetInputValueSeparator: string = \",\";\r\n    supportsInteractivity: boolean = true;\r\n    lineHeights?: ILineHeightDefinitions;\r\n    fontTypes?: FontTypeSet;\r\n\r\n    readonly spacing = {\r\n        small: 3,\r\n        default: 8,\r\n        medium: 20,\r\n        large: 30,\r\n        extraLarge: 40,\r\n        padding: 15\r\n    };\r\n\r\n    readonly separator = {\r\n        lineThickness: 1,\r\n        lineColor: \"#EEEEEE\"\r\n    };\r\n\r\n    readonly imageSizes = {\r\n        small: 40,\r\n        medium: 80,\r\n        large: 160\r\n    };\r\n\r\n    readonly containerStyles: ContainerStyleSet = new ContainerStyleSet();\r\n    readonly inputs: InputConfig = new InputConfig();\r\n    readonly actions: ActionsConfig = new ActionsConfig();\r\n    readonly adaptiveCard: AdaptiveCardConfig = new AdaptiveCardConfig();\r\n    readonly imageSet: ImageSetConfig = new ImageSetConfig();\r\n    readonly media: MediaConfig = new MediaConfig();\r\n    readonly factSet: FactSetConfig = new FactSetConfig();\r\n    readonly table: TableConfig = new TableConfig();\r\n    readonly textStyles: TextStyleSet = new TextStyleSet();\r\n    readonly textBlock: TextBlockConfig = new TextBlockConfig();\r\n\r\n    cssClassNamePrefix?: string;\r\n    alwaysAllowBleed: boolean = false;\r\n\r\n    constructor(obj?: any) {\r\n        if (obj) {\r\n            if (typeof obj === \"string\" || obj instanceof String) {\r\n                obj = JSON.parse(obj as string);\r\n            }\r\n\r\n            this.choiceSetInputValueSeparator =\r\n                obj && typeof obj[\"choiceSetInputValueSeparator\"] === \"string\"\r\n                    ? obj[\"choiceSetInputValueSeparator\"]\r\n                    : this.choiceSetInputValueSeparator;\r\n            this.supportsInteractivity =\r\n                obj && typeof obj[\"supportsInteractivity\"] === \"boolean\"\r\n                    ? obj[\"supportsInteractivity\"]\r\n                    : this.supportsInteractivity;\r\n\r\n            this._legacyFontType = new FontTypeDefinition();\r\n            this._legacyFontType.parse(obj);\r\n\r\n            if (obj.fontTypes) {\r\n                this.fontTypes = new FontTypeSet(obj.fontTypes);\r\n            }\r\n\r\n            if (obj.lineHeights) {\r\n                this.lineHeights = {\r\n                    small: obj.lineHeights[\"small\"],\r\n                    default: obj.lineHeights[\"default\"],\r\n                    medium: obj.lineHeights[\"medium\"],\r\n                    large: obj.lineHeights[\"large\"],\r\n                    extraLarge: obj.lineHeights[\"extraLarge\"]\r\n                };\r\n            }\r\n\r\n            this.imageSizes = {\r\n                small: (obj.imageSizes && obj.imageSizes[\"small\"]) || this.imageSizes.small,\r\n                medium: (obj.imageSizes && obj.imageSizes[\"medium\"]) || this.imageSizes.medium,\r\n                large: (obj.imageSizes && obj.imageSizes[\"large\"]) || this.imageSizes.large\r\n            };\r\n\r\n            this.containerStyles = new ContainerStyleSet(obj[\"containerStyles\"]);\r\n            this.spacing = {\r\n                small: (obj.spacing && obj.spacing[\"small\"]) || this.spacing.small,\r\n                default: (obj.spacing && obj.spacing[\"default\"]) || this.spacing.default,\r\n                medium: (obj.spacing && obj.spacing[\"medium\"]) || this.spacing.medium,\r\n                large: (obj.spacing && obj.spacing[\"large\"]) || this.spacing.large,\r\n                extraLarge: (obj.spacing && obj.spacing[\"extraLarge\"]) || this.spacing.extraLarge,\r\n                padding: (obj.spacing && obj.spacing[\"padding\"]) || this.spacing.padding\r\n            };\r\n\r\n            this.separator = {\r\n                lineThickness:\r\n                    (obj.separator && obj.separator[\"lineThickness\"]) ||\r\n                    this.separator.lineThickness,\r\n                lineColor: (obj.separator && obj.separator[\"lineColor\"]) || this.separator.lineColor\r\n            };\r\n\r\n            this.inputs = new InputConfig(obj.inputs || this.inputs);\r\n            this.actions = new ActionsConfig(obj.actions || this.actions);\r\n            this.adaptiveCard = new AdaptiveCardConfig(obj.adaptiveCard || this.adaptiveCard);\r\n            this.imageSet = new ImageSetConfig(obj[\"imageSet\"]);\r\n            this.factSet = new FactSetConfig(obj[\"factSet\"]);\r\n            this.textStyles = new TextStyleSet(obj[\"textStyles\"]);\r\n            this.textBlock = new TextBlockConfig(obj[\"textBlock\"]);\r\n        }\r\n    }\r\n\r\n    getFontTypeDefinition(style?: Enums.FontType): FontTypeDefinition {\r\n        if (this.fontTypes) {\r\n            return this.fontTypes.getStyleDefinition(style);\r\n        } else {\r\n            return style === Enums.FontType.Monospace\r\n                ? FontTypeDefinition.monospace\r\n                : this._legacyFontType;\r\n        }\r\n    }\r\n\r\n    getEffectiveSpacing(spacing: Enums.Spacing): number {\r\n        switch (spacing) {\r\n            case Enums.Spacing.Small:\r\n                return this.spacing.small;\r\n            case Enums.Spacing.Default:\r\n                return this.spacing.default;\r\n            case Enums.Spacing.Medium:\r\n                return this.spacing.medium;\r\n            case Enums.Spacing.Large:\r\n                return this.spacing.large;\r\n            case Enums.Spacing.ExtraLarge:\r\n                return this.spacing.extraLarge;\r\n            case Enums.Spacing.Padding:\r\n                return this.spacing.padding;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    paddingDefinitionToSpacingDefinition(\r\n        paddingDefinition: Shared.PaddingDefinition\r\n    ): Shared.SpacingDefinition {\r\n        return new Shared.SpacingDefinition(\r\n            this.getEffectiveSpacing(paddingDefinition.top),\r\n            this.getEffectiveSpacing(paddingDefinition.right),\r\n            this.getEffectiveSpacing(paddingDefinition.bottom),\r\n            this.getEffectiveSpacing(paddingDefinition.left)\r\n        );\r\n    }\r\n\r\n    makeCssClassNames(...classNames: string[]): string[] {\r\n        const result: string[] = [];\r\n\r\n        for (const className of classNames) {\r\n            result.push((this.cssClassNamePrefix ? this.cssClassNamePrefix + \"-\" : \"\") + className);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    makeCssClassName(...classNames: string[]): string {\r\n        const result = this.makeCssClassNames(...classNames).join(\" \");\r\n\r\n        return result ? result : \"\";\r\n    }\r\n\r\n    get fontFamily(): string | undefined {\r\n        return this._legacyFontType.fontFamily;\r\n    }\r\n\r\n    set fontFamily(value: string | undefined) {\r\n        this._legacyFontType.fontFamily = value;\r\n    }\r\n\r\n    get fontSizes(): IFontSizeDefinitions {\r\n        return this._legacyFontType.fontSizes;\r\n    }\r\n\r\n    get fontWeights(): IFontWeightDefinitions {\r\n        return this._legacyFontType.fontWeights;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const defaultHostConfig: HostConfig = new HostConfig({\r\n    supportsInteractivity: true,\r\n    spacing: {\r\n        small: 10,\r\n        default: 20,\r\n        medium: 30,\r\n        large: 40,\r\n        extraLarge: 50,\r\n        padding: 20\r\n    },\r\n    separator: {\r\n        lineThickness: 1,\r\n        lineColor: \"#EEEEEE\"\r\n    },\r\n    fontTypes: {\r\n        default: {\r\n            fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\r\n            fontSizes: {\r\n                small: 12,\r\n                default: 14,\r\n                medium: 17,\r\n                large: 21,\r\n                extraLarge: 26\r\n            },\r\n            fontWeights: {\r\n                lighter: 200,\r\n                default: 400,\r\n                bolder: 600\r\n            }\r\n        },\r\n        monospace: {\r\n            fontFamily: \"'Courier New', Courier, monospace\",\r\n            fontSizes: {\r\n                small: 12,\r\n                default: 14,\r\n                medium: 17,\r\n                large: 21,\r\n                extraLarge: 26\r\n            },\r\n            fontWeights: {\r\n                lighter: 200,\r\n                default: 400,\r\n                bolder: 600\r\n            }\r\n        }\r\n    },\r\n    imageSizes: {\r\n        small: 40,\r\n        medium: 80,\r\n        large: 160\r\n    },\r\n    containerStyles: {\r\n        default: {\r\n            backgroundColor: \"#FFFFFF\",\r\n            foregroundColors: {\r\n                default: {\r\n                    default: \"#333333\",\r\n                    subtle: \"#EE333333\"\r\n                },\r\n                dark: {\r\n                    default: \"#000000\",\r\n                    subtle: \"#66000000\"\r\n                },\r\n                light: {\r\n                    default: \"#FFFFFF\",\r\n                    subtle: \"#33000000\"\r\n                },\r\n                accent: {\r\n                    default: \"#2E89FC\",\r\n                    subtle: \"#882E89FC\"\r\n                },\r\n                attention: {\r\n                    default: \"#cc3300\",\r\n                    subtle: \"#DDcc3300\"\r\n                },\r\n                good: {\r\n                    default: \"#028A02\",\r\n                    subtle: \"#DD027502\"\r\n                },\r\n                warning: {\r\n                    default: \"#e69500\",\r\n                    subtle: \"#DDe69500\"\r\n                }\r\n            }\r\n        },\r\n        emphasis: {\r\n            backgroundColor: \"#08000000\",\r\n            foregroundColors: {\r\n                default: {\r\n                    default: \"#333333\",\r\n                    subtle: \"#EE333333\"\r\n                },\r\n                dark: {\r\n                    default: \"#000000\",\r\n                    subtle: \"#66000000\"\r\n                },\r\n                light: {\r\n                    default: \"#FFFFFF\",\r\n                    subtle: \"#33000000\"\r\n                },\r\n                accent: {\r\n                    default: \"#2E89FC\",\r\n                    subtle: \"#882E89FC\"\r\n                },\r\n                attention: {\r\n                    default: \"#cc3300\",\r\n                    subtle: \"#DDcc3300\"\r\n                },\r\n                good: {\r\n                    default: \"#028A02\",\r\n                    subtle: \"#DD027502\"\r\n                },\r\n                warning: {\r\n                    default: \"#e69500\",\r\n                    subtle: \"#DDe69500\"\r\n                }\r\n            }\r\n        },\r\n        accent: {\r\n            backgroundColor: \"#C7DEF9\",\r\n            foregroundColors: {\r\n                default: {\r\n                    default: \"#333333\",\r\n                    subtle: \"#EE333333\"\r\n                },\r\n                dark: {\r\n                    default: \"#000000\",\r\n                    subtle: \"#66000000\"\r\n                },\r\n                light: {\r\n                    default: \"#FFFFFF\",\r\n                    subtle: \"#33000000\"\r\n                },\r\n                accent: {\r\n                    default: \"#2E89FC\",\r\n                    subtle: \"#882E89FC\"\r\n                },\r\n                attention: {\r\n                    default: \"#cc3300\",\r\n                    subtle: \"#DDcc3300\"\r\n                },\r\n                good: {\r\n                    default: \"#028A02\",\r\n                    subtle: \"#DD027502\"\r\n                },\r\n                warning: {\r\n                    default: \"#e69500\",\r\n                    subtle: \"#DDe69500\"\r\n                }\r\n            }\r\n        },\r\n        good: {\r\n            backgroundColor: \"#CCFFCC\",\r\n            foregroundColors: {\r\n                default: {\r\n                    default: \"#333333\",\r\n                    subtle: \"#EE333333\"\r\n                },\r\n                dark: {\r\n                    default: \"#000000\",\r\n                    subtle: \"#66000000\"\r\n                },\r\n                light: {\r\n                    default: \"#FFFFFF\",\r\n                    subtle: \"#33000000\"\r\n                },\r\n                accent: {\r\n                    default: \"#2E89FC\",\r\n                    subtle: \"#882E89FC\"\r\n                },\r\n                attention: {\r\n                    default: \"#cc3300\",\r\n                    subtle: \"#DDcc3300\"\r\n                },\r\n                good: {\r\n                    default: \"#028A02\",\r\n                    subtle: \"#DD027502\"\r\n                },\r\n                warning: {\r\n                    default: \"#e69500\",\r\n                    subtle: \"#DDe69500\"\r\n                }\r\n            }\r\n        },\r\n        attention: {\r\n            backgroundColor: \"#FFC5B2\",\r\n            foregroundColors: {\r\n                default: {\r\n                    default: \"#333333\",\r\n                    subtle: \"#EE333333\"\r\n                },\r\n                dark: {\r\n                    default: \"#000000\",\r\n                    subtle: \"#66000000\"\r\n                },\r\n                light: {\r\n                    default: \"#FFFFFF\",\r\n                    subtle: \"#33000000\"\r\n                },\r\n                accent: {\r\n                    default: \"#2E89FC\",\r\n                    subtle: \"#882E89FC\"\r\n                },\r\n                attention: {\r\n                    default: \"#cc3300\",\r\n                    subtle: \"#DDcc3300\"\r\n                },\r\n                good: {\r\n                    default: \"#028A02\",\r\n                    subtle: \"#DD027502\"\r\n                },\r\n                warning: {\r\n                    default: \"#e69500\",\r\n                    subtle: \"#DDe69500\"\r\n                }\r\n            }\r\n        },\r\n        warning: {\r\n            backgroundColor: \"#FFE2B2\",\r\n            foregroundColors: {\r\n                default: {\r\n                    default: \"#333333\",\r\n                    subtle: \"#EE333333\"\r\n                },\r\n                dark: {\r\n                    default: \"#000000\",\r\n                    subtle: \"#66000000\"\r\n                },\r\n                light: {\r\n                    default: \"#FFFFFF\",\r\n                    subtle: \"#33000000\"\r\n                },\r\n                accent: {\r\n                    default: \"#2E89FC\",\r\n                    subtle: \"#882E89FC\"\r\n                },\r\n                attention: {\r\n                    default: \"#cc3300\",\r\n                    subtle: \"#DDcc3300\"\r\n                },\r\n                good: {\r\n                    default: \"#028A02\",\r\n                    subtle: \"#DD027502\"\r\n                },\r\n                warning: {\r\n                    default: \"#e69500\",\r\n                    subtle: \"#DDe69500\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    inputs: {\r\n        label: {\r\n            requiredInputs: {\r\n                weight: Enums.TextWeight.Bolder,\r\n                suffix: \" *\",\r\n                suffixColor: Enums.TextColor.Attention\r\n            },\r\n            optionalInputs: {\r\n                weight: Enums.TextWeight.Bolder\r\n            }\r\n        },\r\n        errorMessage: {\r\n            color: Enums.TextColor.Attention,\r\n            weight: Enums.TextWeight.Bolder\r\n        }\r\n    },\r\n    actions: {\r\n        maxActions: 5,\r\n        spacing: Enums.Spacing.Default,\r\n        buttonSpacing: 10,\r\n        showCard: {\r\n            actionMode: Enums.ShowCardActionMode.Inline,\r\n            inlineTopMargin: 16\r\n        },\r\n        actionsOrientation: Enums.Orientation.Horizontal,\r\n        actionAlignment: Enums.ActionAlignment.Left\r\n    },\r\n    adaptiveCard: {\r\n        allowCustomStyle: false\r\n    },\r\n    imageSet: {\r\n        imageSize: Enums.Size.Medium,\r\n        maxImageHeight: 100\r\n    },\r\n    factSet: {\r\n        title: {\r\n            color: Enums.TextColor.Default,\r\n            size: Enums.TextSize.Default,\r\n            isSubtle: false,\r\n            weight: Enums.TextWeight.Bolder,\r\n            wrap: true,\r\n            maxWidth: 150\r\n        },\r\n        value: {\r\n            color: Enums.TextColor.Default,\r\n            size: Enums.TextSize.Default,\r\n            isSubtle: false,\r\n            weight: Enums.TextWeight.Default,\r\n            wrap: true\r\n        },\r\n        spacing: 10\r\n    }\r\n});\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { CardElement, Action } from \"./card-elements\";\r\nimport { SerializableObject, Version, Versions } from \"./serialization\";\r\n\r\n/**\r\n * Describes whether a certain element can be parsed in a \"singleton\" context.\r\n * Specifically, is the element allowed to exist as an object in a context where the\r\n * parent expects an Array of elements (e.g. `AdaptiveCard.body`)\r\n *\r\n * @example - Singleton element in a container (note `items` contains an `object` rather than an `Array<object>`)\r\n * ```json\r\n * {\r\n *     \"type\": \"Container\",\r\n *     \"items\": {\r\n *         \"type\": \"AllowedSingletonElement\"\r\n *     }\r\n * }\r\n * ```\r\n */\r\nexport enum ElementSingletonBehavior {\r\n    /** Element only valid in a singleton context. */\r\n    Only,\r\n    /** Element is allowed in a singleton context, but not required to be a singleton. */\r\n    Allowed,\r\n    /** Element is not allowed to exist in a singleton context. */\r\n    NotAllowed\r\n}\r\n\r\nexport interface ITypeRegistration<T extends SerializableObject> {\r\n    typeName: string;\r\n    objectType: { new (): T };\r\n    schemaVersion: Version;\r\n    singletonBehavior: ElementSingletonBehavior;\r\n}\r\n\r\nexport class CardObjectRegistry<T extends SerializableObject> {\r\n    private _items: { [typeName: string]: ITypeRegistration<T> } = {};\r\n\r\n    findByName(typeName: string): ITypeRegistration<T> | undefined {\r\n        return this._items.hasOwnProperty(typeName) ? this._items[typeName] : undefined;\r\n    }\r\n\r\n    clear() {\r\n        this._items = {};\r\n    }\r\n\r\n    copyTo(target: CardObjectRegistry<T>) {\r\n        const keys = Object.keys(this._items);\r\n\r\n        for (const key of keys) {\r\n            const typeRegistration = this._items[key];\r\n\r\n            target.register(\r\n                typeRegistration.typeName,\r\n                typeRegistration.objectType,\r\n                typeRegistration.schemaVersion,\r\n                typeRegistration.singletonBehavior\r\n            );\r\n        }\r\n    }\r\n\r\n    register(\r\n        typeName: string,\r\n        objectType: { new (): T },\r\n        schemaVersion: Version = Versions.v1_0,\r\n        singletonBehavior: ElementSingletonBehavior = ElementSingletonBehavior.NotAllowed\r\n    ) {\r\n        let registrationInfo = this.findByName(typeName);\r\n\r\n        if (registrationInfo !== undefined) {\r\n            registrationInfo.objectType = objectType;\r\n        } else {\r\n            registrationInfo = {\r\n                typeName: typeName,\r\n                objectType: objectType,\r\n                schemaVersion: schemaVersion,\r\n                singletonBehavior: singletonBehavior\r\n            };\r\n        }\r\n\r\n        this._items[typeName] = registrationInfo;\r\n    }\r\n\r\n    unregister(typeName: string) {\r\n        delete this._items[typeName];\r\n    }\r\n\r\n    createInstance(typeName: string, targetVersion: Version): T | undefined {\r\n        const registrationInfo = this.findByName(typeName);\r\n\r\n        return registrationInfo && registrationInfo.schemaVersion.compareTo(targetVersion) <= 0\r\n            ? new registrationInfo.objectType()\r\n            : undefined;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return Object.keys(this._items).length;\r\n    }\r\n\r\n    getItemAt(index: number): ITypeRegistration<T> {\r\n        return Object.keys(this._items).map((e) => this._items[e])[index];\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\r\nexport class GlobalRegistry {\r\n    private static _elements?: CardObjectRegistry<CardElement>;\r\n    private static _actions?: CardObjectRegistry<Action>;\r\n\r\n    static populateWithDefaultElements(registry: CardObjectRegistry<CardElement>) {\r\n        registry.clear();\r\n\r\n        GlobalRegistry.defaultElements.copyTo(registry);\r\n    }\r\n\r\n    static populateWithDefaultActions(registry: CardObjectRegistry<Action>) {\r\n        registry.clear();\r\n\r\n        GlobalRegistry.defaultActions.copyTo(registry);\r\n    }\r\n\r\n    static readonly defaultElements = new CardObjectRegistry<CardElement>();\r\n    static readonly defaultActions = new CardObjectRegistry<Action>();\r\n    static get elements(): CardObjectRegistry<CardElement> {\r\n        if (!GlobalRegistry._elements) {\r\n            GlobalRegistry._elements = new CardObjectRegistry<CardElement>();\r\n            GlobalRegistry.populateWithDefaultElements(GlobalRegistry._elements);\r\n        }\r\n\r\n        return GlobalRegistry._elements;\r\n    }\r\n\r\n    static get actions(): CardObjectRegistry<Action> {\r\n        if (!GlobalRegistry._actions) {\r\n            GlobalRegistry._actions = new CardObjectRegistry<Action>();\r\n            GlobalRegistry.populateWithDefaultActions(GlobalRegistry._actions);\r\n        }\r\n\r\n        return GlobalRegistry._actions;\r\n    }\r\n\r\n    static reset() {\r\n        GlobalRegistry._elements = undefined;\r\n        GlobalRegistry._actions = undefined;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport { Strings } from \"./strings\";\r\nimport { Dictionary, GlobalSettings } from \"./shared\";\r\nimport { HostConfig } from \"./host-config\";\r\nimport { HostCapabilities } from \"./host-capabilities\";\r\nimport {\r\n    Versions,\r\n    property,\r\n    SerializableObject,\r\n    StringProperty,\r\n    SerializableObjectProperty,\r\n    IValidationEvent,\r\n    PropertyDefinition\r\n} from \"./serialization\";\r\n\r\nexport class ValidationResults {\r\n    readonly allIds: Dictionary<number> = {};\r\n    readonly validationEvents: IValidationEvent[] = [];\r\n\r\n    addFailure(cardObject: CardObject, event: Enums.ValidationEvent, message: string) {\r\n        this.validationEvents.push({\r\n            phase: Enums.ValidationPhase.Validation,\r\n            source: cardObject,\r\n            event: event,\r\n            message: message\r\n        });\r\n    }\r\n}\r\n\r\nexport type CardObjectType = { new (): CardObject };\r\n\r\nexport abstract class CardObject extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly typeNameProperty = new StringProperty(\r\n        Versions.v1_0,\r\n        \"type\",\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        (sender: object) => {\r\n            return (<CardObject>sender).getJsonTypeName();\r\n        }\r\n    );\r\n    static readonly idProperty = new StringProperty(Versions.v1_0, \"id\");\r\n    static readonly requiresProperty = new SerializableObjectProperty(\r\n        Versions.v1_2,\r\n        \"requires\",\r\n        HostCapabilities,\r\n        false,\r\n        new HostCapabilities()\r\n    );\r\n\r\n    protected getSchemaKey(): string {\r\n        return this.getJsonTypeName();\r\n    }\r\n\r\n    @property(CardObject.idProperty)\r\n    id?: string;\r\n\r\n    @property(CardObject.requiresProperty)\r\n    get requires(): HostCapabilities {\r\n        return this.getValue(CardObject.requiresProperty);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private _shouldFallback: boolean = false;\r\n\r\n    protected _parent?: CardObject;\r\n    protected _renderedElement?: HTMLElement;\r\n\r\n    /**\r\n     * Checks if this CardObject contains the given DOM Node.\r\n     * @param node The DOM Node to look for.\r\n     * @returns `true` if the DOM Node was found, `false` otherwise.\r\n     */\r\n    protected contains(node: Node): boolean {\r\n        if (this._renderedElement) {\r\n            return this._renderedElement.contains(node);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    onPreProcessPropertyValue?: (\r\n        sender: CardObject,\r\n        property: PropertyDefinition,\r\n        value: any\r\n    ) => any;\r\n\r\n    abstract getJsonTypeName(): string;\r\n\r\n    abstract get hostConfig(): HostConfig;\r\n\r\n    preProcessPropertyValue(prop: PropertyDefinition, propertyValue?: any): any {\r\n        const value = propertyValue === undefined ? this.getValue(prop) : propertyValue;\r\n\r\n        if (GlobalSettings.allowPreProcessingPropertyValues) {\r\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n            let currentObject: CardObject | undefined = this;\r\n\r\n            while (currentObject && !currentObject.onPreProcessPropertyValue) {\r\n                currentObject = currentObject.parent;\r\n            }\r\n\r\n            if (currentObject && currentObject.onPreProcessPropertyValue) {\r\n                return currentObject.onPreProcessPropertyValue(this, prop, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    setParent(value: CardObject | undefined) {\r\n        this._parent = value;\r\n    }\r\n\r\n    setShouldFallback(value: boolean) {\r\n        this._shouldFallback = value;\r\n    }\r\n\r\n    shouldFallback(): boolean {\r\n        return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);\r\n    }\r\n\r\n    getRootObject(): CardObject {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        let currentObject: CardObject = this;\r\n\r\n        while (currentObject.parent) {\r\n            currentObject = currentObject.parent;\r\n        }\r\n\r\n        return currentObject;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        if (this.id) {\r\n            if (context.allIds.hasOwnProperty(this.id)) {\r\n                if (context.allIds[this.id] === 1) {\r\n                    context.addFailure(\r\n                        this,\r\n                        Enums.ValidationEvent.DuplicateId,\r\n                        Strings.errors.duplicateId(this.id)\r\n                    );\r\n                }\r\n\r\n                context.allIds[this.id] += 1;\r\n            } else {\r\n                context.allIds[this.id] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    validateProperties(): ValidationResults {\r\n        const result = new ValidationResults();\r\n\r\n        this.internalValidateProperties(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Recursively searches this CardObject and any children to find the\r\n     * innermost CardObject that owns the given DOM Node.\r\n     *\r\n     * @param node The DOM Node to look for.\r\n     *\r\n     * @returns The owner of the given DOM Node, or `undefined` if no owner was found.\r\n     */\r\n    findDOMNodeOwner(node: Node): CardObject | undefined {\r\n        // default implementation for CardObjects with no associated children\r\n        return this.contains(node) ? this : undefined;\r\n    }\r\n\r\n    releaseDOMResources() {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    get parent(): CardObject | undefined {\r\n        return this._parent;\r\n    }\r\n\r\n    get renderedElement(): HTMLElement | undefined {\r\n        return this._renderedElement;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nabstract class AbstractTextFormatter {\r\n    private _regularExpression: RegExp;\r\n\r\n    protected abstract internalFormat(lang: string | undefined, matches: RegExpExecArray): string;\r\n\r\n    constructor(regularExpression: RegExp) {\r\n        this._regularExpression = regularExpression;\r\n    }\r\n\r\n    format(lang: string | undefined, input: string | undefined): string | undefined {\r\n        let matches;\r\n\r\n        if (input) {\r\n            let result = input;\r\n\r\n            while ((matches = this._regularExpression.exec(input)) != null) {\r\n                result = result.replace(matches[0], this.internalFormat(lang, matches));\r\n            }\r\n\r\n            return result;\r\n        } else {\r\n            return input;\r\n        }\r\n    }\r\n}\r\n\r\nclass DateFormatter extends AbstractTextFormatter {\r\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\r\n        const date = new Date(Date.parse(matches[1]));\r\n        const format = matches[2] !== undefined ? matches[2].toLowerCase() : \"compact\";\r\n\r\n        if (format !== \"compact\") {\r\n            return date.toLocaleDateString(lang, {\r\n                day: \"numeric\",\r\n                weekday: format,\r\n                month: format,\r\n                year: \"numeric\"\r\n            } as Intl.DateTimeFormatOptions);\r\n        } else {\r\n            return date.toLocaleDateString();\r\n        }\r\n    }\r\n}\r\n\r\nclass TimeFormatter extends AbstractTextFormatter {\r\n    protected internalFormat(lang: string | undefined, matches: RegExpExecArray): string {\r\n        const date = new Date(Date.parse(matches[1]));\r\n\r\n        return date.toLocaleTimeString(lang, { hour: \"numeric\", minute: \"2-digit\" });\r\n    }\r\n}\r\n\r\nexport function formatText(lang: string | undefined, text: string | undefined): string | undefined {\r\n    const formatters: AbstractTextFormatter[] = [\r\n        new DateFormatter(\r\n            /\\{{2}DATE\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))(?:, ?(COMPACT|LONG|SHORT))?\\)\\}{2}/g\r\n        ),\r\n        new TimeFormatter(\r\n            /\\{{2}TIME\\((\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:Z|(?:(?:-|\\+)\\d{2}:\\d{2})))\\)\\}{2}/g\r\n        )\r\n    ];\r\n\r\n    let result = text;\r\n\r\n    for (const formatter of formatters) {\r\n        result = formatter.format(lang, result);\r\n    }\r\n\r\n    return result;\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\r\nexport class Constants {\r\n    static readonly keys = {\r\n        tab: \"Tab\",\r\n        enter: \"Enter\",\r\n        escape: \"Escape\",\r\n        space: \" \",\r\n        up: \"ArrowUp\",\r\n        down: \"ArrowDown\",\r\n        delete: \"Delete\"\r\n    } as const;\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { defaultHostConfig, HostConfig } from \"../host-config\";\r\nimport { Constants } from \"./constants\";\r\n\r\nexport class MenuItem {\r\n    private _hostConfig?: HostConfig;\r\n    private _element: HTMLElement;\r\n    private _value: string;\r\n    private _isEnabled: boolean = true;\r\n\r\n    private click() {\r\n        if (this.isEnabled && this.onClick) {\r\n            this.onClick(this);\r\n        }\r\n    }\r\n\r\n    private updateCssClasses() {\r\n        if (this._element) {\r\n            const effectiveHostConfig = this._hostConfig ? this._hostConfig : defaultHostConfig;\r\n\r\n            this._element.className = effectiveHostConfig.makeCssClassName(\"ac-ctrl\");\r\n            this._element.classList.add(\r\n                effectiveHostConfig.makeCssClassName(\r\n                    this.isEnabled ? \"ac-ctrl-dropdown-item\" : \"ac-ctrl-dropdown-item-disabled\"\r\n                )\r\n            );\r\n\r\n            if (!this.isEnabled) {\r\n                this._element.classList.add(effectiveHostConfig.makeCssClassName(\"ac-disabled\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    readonly key: string;\r\n\r\n    onClick?: (item: MenuItem) => void;\r\n\r\n    constructor(key: string, value: string) {\r\n        this.key = key;\r\n        this._value = value;\r\n    }\r\n\r\n    toString(): string {\r\n        return this.value;\r\n    }\r\n\r\n    render(hostConfig?: HostConfig): HTMLElement {\r\n        this._hostConfig = hostConfig;\r\n\r\n        if (!this._element) {\r\n            this._element = document.createElement(\"span\");\r\n            this._element.innerText = this.value;\r\n            this._element.setAttribute(\"role\", \"menuitem\");\r\n\r\n            if (!this.isEnabled) {\r\n                this._element.setAttribute(\"aria-disabled\", \"true\");\r\n            }\r\n\r\n            this._element.setAttribute(\"aria-current\", \"false\");\r\n            this._element.onmouseup = (_e) => {\r\n                this.click();\r\n            };\r\n            this._element.onkeydown = (e) => {\r\n                if (e.key === Constants.keys.enter) {\r\n                    e.cancelBubble = true;\r\n\r\n                    this.click();\r\n                }\r\n            };\r\n\r\n            this.updateCssClasses();\r\n        }\r\n\r\n        return this._element;\r\n    }\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    set value(newValue: string) {\r\n        this._value = newValue;\r\n\r\n        if (this._element) {\r\n            this._element.innerText = newValue;\r\n        }\r\n    }\r\n\r\n    get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    set isEnabled(value: boolean) {\r\n        if (this._isEnabled !== value) {\r\n            this._isEnabled = value;\r\n\r\n            this.updateCssClasses();\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport class Collection<TItem> {\r\n    private _items: Array<TItem> = [];\r\n\r\n    onItemAdded: (item: TItem) => void;\r\n    onItemRemoved: (item: TItem) => void;\r\n\r\n    get(index: number): TItem {\r\n        return this._items[index];\r\n    }\r\n\r\n    add(item: TItem) {\r\n        this._items.push(item);\r\n\r\n        if (this.onItemAdded) {\r\n            this.onItemAdded(item);\r\n        }\r\n    }\r\n\r\n    remove(item: TItem) {\r\n        const i = this._items.indexOf(item);\r\n\r\n        if (i >= 0) {\r\n            this._items = this._items.splice(i, 1);\r\n\r\n            if (this.onItemRemoved) {\r\n                this.onItemRemoved(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    indexOf(item: TItem): number {\r\n        return this._items.indexOf(item);\r\n    }\r\n\r\n    get length(): number {\r\n        return this._items.length;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Constants } from \"./constants\";\r\nimport * as Utils from \"../utils\";\r\nimport { defaultHostConfig, HostConfig } from \"../host-config\";\r\n\r\nexport abstract class PopupControl {\r\n    private _isOpen: boolean = false;\r\n    private _overlayElement: HTMLElement;\r\n    private _popupElement: HTMLElement;\r\n    private _hostConfig?: HostConfig;\r\n\r\n    protected abstract renderContent(): HTMLElement;\r\n\r\n    onClose: (popupControl: PopupControl, wasCancelled: boolean) => void;\r\n\r\n    keyDown(e: KeyboardEvent) {\r\n        switch (e.key) {\r\n            case Constants.keys.escape:\r\n                this.closePopup(true);\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    render(_rootElementBounds: ClientRect): HTMLElement {\r\n        const element = document.createElement(\"div\");\r\n        element.tabIndex = 0;\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-ctrl\", \"ac-ctrl-popup-container\");\r\n        element.setAttribute(\"role\", \"dialog\");\r\n        element.setAttribute(\"aria-modal\", \"true\");\r\n        element.onkeydown = (e) => {\r\n            this.keyDown(e);\r\n\r\n            return !e.cancelBubble;\r\n        };\r\n\r\n        element.appendChild(this.renderContent());\r\n\r\n        return element;\r\n    }\r\n\r\n    focus() {\r\n        if (this._popupElement) {\r\n            (<HTMLElement>this._popupElement.firstElementChild).focus();\r\n        }\r\n    }\r\n\r\n    popup(rootElement: HTMLElement) {\r\n        if (!this._isOpen) {\r\n            this._overlayElement = document.createElement(\"div\");\r\n            this._overlayElement.className = this.hostConfig.makeCssClassName(\"ac-ctrl-overlay\");\r\n            this._overlayElement.tabIndex = 0;\r\n            this._overlayElement.style.width = document.documentElement.scrollWidth + \"px\";\r\n            this._overlayElement.style.height = document.documentElement.scrollHeight + \"px\";\r\n            this._overlayElement.onfocus = (_e) => {\r\n                this.closePopup(true);\r\n            };\r\n\r\n            document.body.appendChild(this._overlayElement);\r\n\r\n            const rootElementBounds = rootElement.getBoundingClientRect();\r\n\r\n            this._popupElement = this.render(rootElementBounds);\r\n            this._popupElement.classList.remove(\r\n                ...this.hostConfig.makeCssClassNames(\r\n                    \"ac-ctrl-slide\",\r\n                    \"ac-ctrl-slideLeftToRight\",\r\n                    \"ac-ctrl-slideRightToLeft\",\r\n                    \"ac-ctrl-slideTopToBottom\",\r\n                    \"ac-ctrl-slideRightToLeft\"\r\n                )\r\n            );\r\n\r\n            window.addEventListener(\"resize\", (_e) => {\r\n                this.closePopup(true);\r\n            });\r\n\r\n            const rootElementLabel = rootElement.getAttribute(\"aria-label\");\r\n            if (rootElementLabel) {\r\n                this._popupElement.setAttribute(\"aria-label\", rootElementLabel);\r\n            }\r\n\r\n            this._overlayElement.appendChild(this._popupElement);\r\n\r\n            const popupElementBounds = this._popupElement.getBoundingClientRect();\r\n\r\n            const availableSpaceBelow = window.innerHeight - rootElementBounds.bottom;\r\n            const availableSpaceAbove = rootElementBounds.top;\r\n            const availableSpaceRight = window.innerWidth - rootElementBounds.right;\r\n            const availableSpaceLeft = rootElementBounds.left;\r\n\r\n            let left = rootElementBounds.left + Utils.getScrollX();\r\n            let top;\r\n\r\n            if (\r\n                availableSpaceAbove < popupElementBounds.height &&\r\n                availableSpaceBelow < popupElementBounds.height\r\n            ) {\r\n                // Not enough space above or below root element\r\n                const actualPopupHeight = Math.min(popupElementBounds.height, window.innerHeight);\r\n\r\n                this._popupElement.style.maxHeight = actualPopupHeight + \"px\";\r\n\r\n                if (actualPopupHeight < popupElementBounds.height) {\r\n                    top = Utils.getScrollY();\r\n                } else {\r\n                    top =\r\n                        Utils.getScrollY() +\r\n                        rootElementBounds.top +\r\n                        (rootElementBounds.height - actualPopupHeight) / 2;\r\n                }\r\n\r\n                if (\r\n                    availableSpaceLeft < popupElementBounds.width &&\r\n                    availableSpaceRight < popupElementBounds.width\r\n                ) {\r\n                    // Not enough space left or right of root element\r\n                    const actualPopupWidth = Math.min(popupElementBounds.width, window.innerWidth);\r\n\r\n                    this._popupElement.style.maxWidth = actualPopupWidth + \"px\";\r\n\r\n                    if (actualPopupWidth < popupElementBounds.width) {\r\n                        left = Utils.getScrollX();\r\n                    } else {\r\n                        left =\r\n                            Utils.getScrollX() +\r\n                            rootElementBounds.left +\r\n                            (rootElementBounds.width - actualPopupWidth) / 2;\r\n                    }\r\n                } else {\r\n                    // Enough space on the left or right of the root element\r\n                    if (availableSpaceRight >= popupElementBounds.width) {\r\n                        left = Utils.getScrollX() + rootElementBounds.right;\r\n\r\n                        this._popupElement.classList.add(\r\n                            ...this.hostConfig.makeCssClassNames(\r\n                                \"ac-ctrl-slide\",\r\n                                \"ac-ctrl-slideLeftToRight\"\r\n                            )\r\n                        );\r\n                    } else {\r\n                        left =\r\n                            Utils.getScrollX() + rootElementBounds.left - popupElementBounds.width;\r\n\r\n                        this._popupElement.classList.add(\r\n                            ...this.hostConfig.makeCssClassNames(\r\n                                \"ac-ctrl-slide\",\r\n                                \"ac-ctrl-slideRightToLeft\"\r\n                            )\r\n                        );\r\n                    }\r\n                }\r\n            } else {\r\n                // Enough space above or below root element\r\n                if (availableSpaceBelow >= popupElementBounds.height) {\r\n                    top = Utils.getScrollY() + rootElementBounds.bottom;\r\n\r\n                    this._popupElement.classList.add(\r\n                        ...this.hostConfig.makeCssClassNames(\r\n                            \"ac-ctrl-slide\",\r\n                            \"ac-ctrl-slideTopToBottom\"\r\n                        )\r\n                    );\r\n                } else {\r\n                    top = Utils.getScrollY() + rootElementBounds.top - popupElementBounds.height;\r\n\r\n                    this._popupElement.classList.add(\r\n                        ...this.hostConfig.makeCssClassNames(\r\n                            \"ac-ctrl-slide\",\r\n                            \"ac-ctrl-slideBottomToTop\"\r\n                        )\r\n                    );\r\n                }\r\n\r\n                if (availableSpaceRight < popupElementBounds.width) {\r\n                    left = Utils.getScrollX() + rootElementBounds.right - popupElementBounds.width;\r\n                }\r\n            }\r\n\r\n            this._popupElement.style.left = left + \"px\";\r\n            this._popupElement.style.top = top + \"px\";\r\n\r\n            this._popupElement.focus();\r\n\r\n            this._isOpen = true;\r\n        }\r\n    }\r\n\r\n    closePopup(wasCancelled: boolean) {\r\n        if (this._isOpen) {\r\n            document.body.removeChild(this._overlayElement);\r\n\r\n            this._isOpen = false;\r\n\r\n            if (this.onClose) {\r\n                this.onClose(this, wasCancelled);\r\n            }\r\n        }\r\n    }\r\n\r\n    get hostConfig(): HostConfig {\r\n        return this._hostConfig ? this._hostConfig : defaultHostConfig;\r\n    }\r\n\r\n    set hostConfig(value: HostConfig) {\r\n        this._hostConfig = value;\r\n    }\r\n\r\n    get isOpen(): boolean {\r\n        return this._isOpen;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Constants } from \"./constants\";\r\nimport { Collection } from \"./collection\";\r\nimport { PopupControl } from \"./popup-control\";\r\nimport { MenuItem } from \"./menu-item\";\r\n\r\nexport class PopupMenu extends PopupControl {\r\n    private _items: Collection<MenuItem> = new Collection<MenuItem>();\r\n    private _renderedItems: Array<HTMLElement> = [];\r\n    private _selectedIndex: number = -1;\r\n\r\n    protected renderContent(): HTMLElement {\r\n        const element = document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-ctrl ac-popup\");\r\n        element.setAttribute(\"role\", \"listbox\");\r\n\r\n        for (let i = 0; i < this._items.length; i++) {\r\n            const renderedItem = this._items.get(i).render(this.hostConfig);\r\n            renderedItem.tabIndex = 0;\r\n\r\n            element.appendChild(renderedItem);\r\n\r\n            if (i === this.selectedIndex) {\r\n                renderedItem.focus();\r\n            }\r\n\r\n            this._renderedItems.push(renderedItem);\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    keyDown(e: KeyboardEvent) {\r\n        super.keyDown(e);\r\n\r\n        let selectedItemIndex = this._selectedIndex;\r\n\r\n        switch (e.key) {\r\n            case Constants.keys.tab:\r\n                this.closePopup(true);\r\n\r\n                break;\r\n            /*\r\n            case Constants.keys.enter:\r\n                if (this.selectedIndex >= 0) {\r\n                    this.selectedIndex = this.selectedIndex;\r\n\r\n                    this.close();\r\n                }\r\n\r\n                break;\r\n            */\r\n            case Constants.keys.up:\r\n                if (selectedItemIndex <= 0) {\r\n                    selectedItemIndex = this._renderedItems.length - 1;\r\n                } else {\r\n                    selectedItemIndex--;\r\n\r\n                    if (selectedItemIndex < 0) {\r\n                        selectedItemIndex = this._renderedItems.length - 1;\r\n                    }\r\n                }\r\n\r\n                this.selectedIndex = selectedItemIndex;\r\n\r\n                e.cancelBubble = true;\r\n\r\n                break;\r\n            case Constants.keys.down:\r\n                if (selectedItemIndex < 0) {\r\n                    selectedItemIndex = 0;\r\n                } else {\r\n                    selectedItemIndex++;\r\n\r\n                    if (selectedItemIndex >= this._renderedItems.length) {\r\n                        selectedItemIndex = 0;\r\n                    }\r\n                }\r\n\r\n                this.selectedIndex = selectedItemIndex;\r\n\r\n                e.cancelBubble = true;\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    get items(): Collection<MenuItem> {\r\n        return this._items;\r\n    }\r\n\r\n    get selectedIndex(): number {\r\n        return this._selectedIndex;\r\n    }\r\n\r\n    set selectedIndex(index: number) {\r\n        if (index >= 0 && index < this._renderedItems.length) {\r\n            this._renderedItems[index].focus();\r\n\r\n            this._selectedIndex = index;\r\n        }\r\n    }\r\n}\r\n", "// Copyright (C) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport * from \"./menu-item\";\r\nexport * from \"./popup-menu\";\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport {\r\n    PaddingDefinition,\r\n    GlobalSettings,\r\n    SizeAndUnit,\r\n    SpacingDefinition,\r\n    ISeparationDefinition,\r\n    Dictionary,\r\n    StringWithSubstitutions,\r\n    ContentTypes,\r\n    IInput,\r\n    IResourceInformation\r\n} from \"./shared\";\r\nimport * as Utils from \"./utils\";\r\nimport {\r\n    HostConfig,\r\n    defaultHostConfig,\r\n    BaseTextDefinition,\r\n    FontTypeDefinition,\r\n    ColorSetDefinition,\r\n    TextColorDefinition,\r\n    ContainerStyleDefinition,\r\n    TextStyleDefinition\r\n} from \"./host-config\";\r\nimport * as TextFormatters from \"./text-formatters\";\r\nimport { CardObject, ValidationResults } from \"./card-object\";\r\nimport {\r\n    Versions,\r\n    Version,\r\n    property,\r\n    BaseSerializationContext,\r\n    SerializableObject,\r\n    SerializableObjectSchema,\r\n    StringProperty,\r\n    BoolProperty,\r\n    ValueSetProperty,\r\n    EnumProperty,\r\n    SerializableObjectCollectionProperty,\r\n    SerializableObjectProperty,\r\n    PixelSizeProperty,\r\n    NumProperty,\r\n    PropertyBag,\r\n    CustomProperty,\r\n    PropertyDefinition,\r\n    StringArrayProperty\r\n} from \"./serialization\";\r\nimport { CardObjectRegistry, GlobalRegistry, ElementSingletonBehavior } from \"./registry\";\r\nimport { Strings } from \"./strings\";\r\nimport { MenuItem, PopupMenu } from \"./controls\";\r\n\r\n\r\nfunction clearElement(element: HTMLElement) : void {\r\n    const trustedHtml = (typeof window === 'undefined') ? \"\" : (window.trustedTypes?.emptyHTML ?? \"\");\r\n    element.innerHTML = trustedHtml as string;\r\n}\r\n\r\nexport function renderSeparation(\r\n    hostConfig: HostConfig,\r\n    separationDefinition: ISeparationDefinition,\r\n    orientation: Enums.Orientation\r\n): HTMLElement | undefined {\r\n    if (\r\n        separationDefinition.spacing > 0 ||\r\n        (separationDefinition.lineThickness && separationDefinition.lineThickness > 0)\r\n    ) {\r\n        const separator = document.createElement(\"div\");\r\n        separator.className = hostConfig.makeCssClassName(\r\n            \"ac-\" +\r\n                (orientation === Enums.Orientation.Horizontal ? \"horizontal\" : \"vertical\") +\r\n                \"-separator\"\r\n        );\r\n        separator.setAttribute(\"aria-hidden\", \"true\");\r\n\r\n        const color = separationDefinition.lineColor\r\n            ? Utils.stringToCssColor(separationDefinition.lineColor)\r\n            : \"\";\r\n\r\n        if (orientation === Enums.Orientation.Horizontal) {\r\n            if (separationDefinition.lineThickness) {\r\n                separator.style.paddingTop = separationDefinition.spacing / 2 + \"px\";\r\n                separator.style.marginBottom = separationDefinition.spacing / 2 + \"px\";\r\n                separator.style.borderBottom =\r\n                    separationDefinition.lineThickness + \"px solid \" + color;\r\n            } else {\r\n                separator.style.height = separationDefinition.spacing + \"px\";\r\n            }\r\n        } else {\r\n            if (separationDefinition.lineThickness) {\r\n                separator.style.paddingLeft = separationDefinition.spacing / 2 + \"px\";\r\n                separator.style.marginRight = separationDefinition.spacing / 2 + \"px\";\r\n                separator.style.borderRight =\r\n                    separationDefinition.lineThickness + \"px solid \" + color;\r\n            } else {\r\n                separator.style.width = separationDefinition.spacing + \"px\";\r\n            }\r\n        }\r\n\r\n        separator.style.overflow = \"hidden\";\r\n        separator.style.flex = \"0 0 auto\";\r\n\r\n        return separator;\r\n    } else {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport type CardElementHeight = \"auto\" | \"stretch\";\r\n\r\nexport abstract class CardElement extends CardObject {\r\n    //#region Schema\r\n\r\n    static readonly langProperty = new StringProperty(\r\n        Versions.v1_1,\r\n        \"lang\",\r\n        true,\r\n        /^[a-z]{2,3}$/gi\r\n    );\r\n    static readonly isVisibleProperty = new BoolProperty(Versions.v1_2, \"isVisible\", true);\r\n    static readonly separatorProperty = new BoolProperty(Versions.v1_0, \"separator\", false);\r\n    static readonly heightProperty = new ValueSetProperty(\r\n        Versions.v1_1,\r\n        \"height\",\r\n        [{ value: \"auto\" }, { value: \"stretch\" }],\r\n        \"auto\"\r\n    );\r\n    static readonly horizontalAlignmentProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"horizontalAlignment\",\r\n        Enums.HorizontalAlignment\r\n    );\r\n    static readonly spacingProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"spacing\",\r\n        Enums.Spacing,\r\n        Enums.Spacing.Default\r\n    );\r\n\r\n    @property(CardElement.horizontalAlignmentProperty)\r\n    horizontalAlignment?: Enums.HorizontalAlignment;\r\n\r\n    @property(CardElement.spacingProperty)\r\n    spacing: Enums.Spacing;\r\n\r\n    @property(CardElement.separatorProperty)\r\n    separator: boolean;\r\n\r\n    @property(CardElement.heightProperty)\r\n    height: CardElementHeight;\r\n\r\n    @property(CardElement.langProperty)\r\n    get lang(): string | undefined {\r\n        const lang = this.getValue(CardElement.langProperty);\r\n\r\n        if (lang) {\r\n            return lang;\r\n        } else {\r\n            if (this.parent) {\r\n                return this.parent.lang;\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    set lang(value: string | undefined) {\r\n        this.setValue(CardElement.langProperty, value);\r\n    }\r\n\r\n    @property(CardElement.isVisibleProperty)\r\n    get isVisible(): boolean {\r\n        return this.getValue(CardElement.isVisibleProperty);\r\n    }\r\n\r\n    set isVisible(value: boolean) {\r\n        // If the element is going to be hidden, reset any changes that were due\r\n        // to overflow truncation (this ensures that if the element is later\r\n        // un-hidden it has the right content)\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && !value) {\r\n            this.undoOverflowTruncation();\r\n        }\r\n\r\n        if (this.isVisible !== value) {\r\n            this.setValue(CardElement.isVisibleProperty, value);\r\n\r\n            this.updateRenderedElementVisibility();\r\n\r\n            if (this._renderedElement) {\r\n                raiseElementVisibilityChangedEvent(this);\r\n            }\r\n        }\r\n\r\n        if (this._renderedElement) {\r\n            this._renderedElement.setAttribute(\"aria-expanded\", value.toString());\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    private _hostConfig?: HostConfig;\r\n    private _separatorElement?: HTMLElement;\r\n    private _truncatedDueToOverflow: boolean = false;\r\n    private _defaultRenderedElementDisplayMode?: string;\r\n    private _padding?: PaddingDefinition;\r\n\r\n    private internalRenderSeparator(): HTMLElement | undefined {\r\n        const renderedSeparator = renderSeparation(\r\n            this.hostConfig,\r\n            {\r\n                spacing: this.hostConfig.getEffectiveSpacing(this.spacing),\r\n                lineThickness: this.separator ? this.hostConfig.separator.lineThickness : undefined,\r\n                lineColor: this.separator ? this.hostConfig.separator.lineColor : undefined\r\n            },\r\n            this.separatorOrientation\r\n        );\r\n\r\n        if (\r\n            GlobalSettings.alwaysBleedSeparators &&\r\n            renderedSeparator &&\r\n            this.separatorOrientation === Enums.Orientation.Horizontal\r\n        ) {\r\n            // Adjust separator's margins if the option to always bleed separators is turned on\r\n            const parentContainer = this.getParentContainer();\r\n\r\n            if (parentContainer && parentContainer.getEffectivePadding()) {\r\n                const parentPhysicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(\r\n                    parentContainer.getEffectivePadding()\r\n                );\r\n\r\n                renderedSeparator.style.marginLeft = \"-\" + parentPhysicalPadding.left + \"px\";\r\n                renderedSeparator.style.marginRight = \"-\" + parentPhysicalPadding.right + \"px\";\r\n            }\r\n        }\r\n\r\n        return renderedSeparator;\r\n    }\r\n\r\n    private updateRenderedElementVisibility() {\r\n        const displayMode =\r\n            this.isDesignMode() || this.isVisible\r\n                ? this._defaultRenderedElementDisplayMode\r\n                : \"none\";\r\n\r\n        if (this._renderedElement) {\r\n            if (displayMode) {\r\n                this._renderedElement.style.display = displayMode;\r\n            } else {\r\n                this._renderedElement.style.removeProperty(\"display\");\r\n            }\r\n        }\r\n\r\n        if (this._separatorElement) {\r\n            if (this.parent && this.parent.isFirstElement(this)) {\r\n                this._separatorElement.style.display = \"none\";\r\n            } else {\r\n                if (displayMode) {\r\n                    this._separatorElement.style.display = displayMode;\r\n                } else {\r\n                    this._separatorElement.style.removeProperty(\"display\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private hideElementDueToOverflow() {\r\n        if (this._renderedElement && this.isVisible) {\r\n            this._renderedElement.style.visibility = \"hidden\";\r\n\r\n            this.isVisible = false;\r\n            raiseElementVisibilityChangedEvent(this, false);\r\n        }\r\n    }\r\n\r\n    private showElementHiddenDueToOverflow() {\r\n        if (this._renderedElement && !this.isVisible) {\r\n            this._renderedElement.style.removeProperty(\"visibility\");\r\n\r\n            this.isVisible = true;\r\n            raiseElementVisibilityChangedEvent(this, false);\r\n        }\r\n    }\r\n\r\n    // Marked private to emulate internal access\r\n    private handleOverflow(maxHeight: number) {\r\n        if (this.isVisible || this.isHiddenDueToOverflow()) {\r\n            const handled = this.truncateOverflow(maxHeight);\r\n\r\n            // Even if we were unable to truncate the element to fit this time,\r\n            // it still could have been previously truncated\r\n            this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;\r\n\r\n            if (!handled) {\r\n                this.hideElementDueToOverflow();\r\n            } else if (handled && !this.isVisible) {\r\n                this.showElementHiddenDueToOverflow();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Marked private to emulate internal access\r\n    private resetOverflow(): boolean {\r\n        let sizeChanged = false;\r\n\r\n        if (this._truncatedDueToOverflow) {\r\n            this.undoOverflowTruncation();\r\n            this._truncatedDueToOverflow = false;\r\n            sizeChanged = true;\r\n        }\r\n\r\n        if (this.isHiddenDueToOverflow()) {\r\n            this.showElementHiddenDueToOverflow();\r\n        }\r\n\r\n        return sizeChanged;\r\n    }\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SerializationContext();\r\n    }\r\n\r\n    protected createPlaceholderElement(): HTMLElement {\r\n        const styleDefinition = this.getEffectiveStyleDefinition();\r\n        const foregroundCssColor = Utils.stringToCssColor(\r\n            styleDefinition.foregroundColors.default.subtle\r\n        );\r\n\r\n        const element = document.createElement(\"div\");\r\n        element.style.border = \"1px dashed \" + foregroundCssColor;\r\n        element.style.padding = \"4px\";\r\n        element.style.minHeight = \"32px\";\r\n        element.style.fontSize = \"10px\";\r\n\r\n        if (foregroundCssColor) {\r\n            element.style.color = foregroundCssColor;\r\n        }\r\n\r\n        element.innerText = \"Empty \" + this.getJsonTypeName();\r\n\r\n        return element;\r\n    }\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        if (this.height === \"auto\") {\r\n            renderedElement.style.flex = \"0 0 auto\";\r\n        } else {\r\n            renderedElement.style.flex = \"1 1 auto\";\r\n        }\r\n    }\r\n\r\n    protected isDisplayed(): boolean {\r\n        return (\r\n            this._renderedElement !== undefined &&\r\n            this.isVisible &&\r\n            this._renderedElement.offsetHeight > 0\r\n        );\r\n    }\r\n\r\n    protected abstract internalRender(): HTMLElement | undefined;\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        return this.internalRender();\r\n    }\r\n\r\n    protected applyPadding() {\r\n        if (this.separatorElement && this.separatorOrientation === Enums.Orientation.Horizontal) {\r\n            if (GlobalSettings.alwaysBleedSeparators && !this.isBleeding()) {\r\n                const padding = new PaddingDefinition();\r\n\r\n                this.getImmediateSurroundingPadding(padding);\r\n\r\n                const physicalPadding =\r\n                    this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n                this.separatorElement.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\r\n                this.separatorElement.style.marginRight = \"-\" + physicalPadding.right + \"px\";\r\n            } else {\r\n                this.separatorElement.style.marginRight = \"0\";\r\n                this.separatorElement.style.marginLeft = \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Called when this element overflows the bottom of the card.\r\n     * maxHeight will be the amount of space still available on the card (0 if\r\n     * the element is fully off the card).\r\n     */\r\n    protected truncateOverflow(_maxHeight: number): boolean {\r\n        // Child implementations should return true if the element handled\r\n        // the truncation request such that its content fits within maxHeight,\r\n        // false if the element should fall back to being hidden\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * This should reverse any changes performed in truncateOverflow().\r\n     */\r\n    protected undoOverflowTruncation() {\r\n        return;\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition();\r\n    }\r\n\r\n    protected getHasBackground(ignoreBackgroundImages: boolean = false): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getHasBorder(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getPadding(): PaddingDefinition | undefined {\r\n        return this._padding;\r\n    }\r\n\r\n    protected setPadding(value: PaddingDefinition | undefined) {\r\n        this._padding = value;\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return context.elementRegistry.findByName(this.getJsonTypeName()) !== undefined;\r\n    }\r\n\r\n    protected get useDefaultSizing(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get separatorOrientation(): Enums.Orientation {\r\n        return Enums.Orientation.Horizontal;\r\n    }\r\n\r\n    protected get defaultStyle(): string {\r\n        return Enums.ContainerStyle.Default;\r\n    }\r\n\r\n    customCssSelector?: string;\r\n\r\n    parse(source: any, context?: SerializationContext) {\r\n        super.parse(source, context ? context : new SerializationContext());\r\n    }\r\n\r\n    asString(): string | undefined {\r\n        return \"\";\r\n    }\r\n\r\n    isBleeding(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getEffectiveStyle(): string {\r\n        if (this.parent) {\r\n            return this.parent.getEffectiveStyle();\r\n        }\r\n\r\n        return this.defaultStyle;\r\n    }\r\n\r\n    getEffectiveStyleDefinition(): ContainerStyleDefinition {\r\n        return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());\r\n    }\r\n\r\n    getEffectiveTextStyleDefinition(): TextStyleDefinition {\r\n        if (this.parent) {\r\n            return this.parent.getEffectiveTextStyleDefinition();\r\n        }\r\n\r\n        return this.hostConfig.textStyles.default;\r\n    }\r\n\r\n    getForbiddenActionTypes(): ActionType[] {\r\n        return [];\r\n    }\r\n\r\n    getImmediateSurroundingPadding(\r\n        result: PaddingDefinition,\r\n        processTop: boolean = true,\r\n        processRight: boolean = true,\r\n        processBottom: boolean = true,\r\n        processLeft: boolean = true\r\n    ) {\r\n        if (this.parent) {\r\n            let doProcessTop = processTop && this.parent.isTopElement(this);\r\n            let doProcessRight = processRight && this.parent.isRightMostElement(this);\r\n            let doProcessBottom = processBottom && this.parent.isBottomElement(this);\r\n            let doProcessLeft = processLeft && this.parent.isLeftMostElement(this);\r\n\r\n            const effectivePadding = this.parent.getEffectivePadding();\r\n\r\n            if (effectivePadding) {\r\n                if (doProcessTop && effectivePadding.top !== Enums.Spacing.None) {\r\n                    result.top = effectivePadding.top;\r\n\r\n                    doProcessTop = false;\r\n                }\r\n\r\n                if (doProcessRight && effectivePadding.right !== Enums.Spacing.None) {\r\n                    result.right = effectivePadding.right;\r\n\r\n                    doProcessRight = false;\r\n                }\r\n\r\n                if (doProcessBottom && effectivePadding.bottom !== Enums.Spacing.None) {\r\n                    result.bottom = effectivePadding.bottom;\r\n\r\n                    doProcessBottom = false;\r\n                }\r\n\r\n                if (doProcessLeft && effectivePadding.left !== Enums.Spacing.None) {\r\n                    result.left = effectivePadding.left;\r\n\r\n                    doProcessLeft = false;\r\n                }\r\n            }\r\n\r\n            if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {\r\n                this.parent.getImmediateSurroundingPadding(\r\n                    result,\r\n                    doProcessTop,\r\n                    doProcessRight,\r\n                    doProcessBottom,\r\n                    doProcessLeft\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return 0;\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        throw new Error(Strings.errors.indexOutOfRange(index));\r\n    }\r\n\r\n    indexOfAction(action: Action): number {\r\n        for (let i = 0; i < this.getActionCount(); i++) {\r\n            if (this.getActionAt(i) === action) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    remove(): boolean {\r\n        if (this.parent && this.parent instanceof CardElementContainer) {\r\n            return this.parent.removeItem(this);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        this._renderedElement = this.overrideInternalRender();\r\n        this._separatorElement = this.internalRenderSeparator();\r\n\r\n        if (this._renderedElement) {\r\n            if (this.id) {\r\n                this._renderedElement.id = this.id;\r\n            }\r\n\r\n            if (this.customCssSelector) {\r\n                this._renderedElement.classList.add(this.customCssSelector);\r\n            }\r\n\r\n            this._renderedElement.style.boxSizing = \"border-box\";\r\n            this._defaultRenderedElementDisplayMode = this._renderedElement.style.display\r\n                ? this._renderedElement.style.display\r\n                : undefined;\r\n\r\n            this.adjustRenderedElementSize(this._renderedElement);\r\n            this.updateLayout(false);\r\n        } else if (this.isDesignMode()) {\r\n            this._renderedElement = this.createPlaceholderElement();\r\n        }\r\n\r\n        this.getRootElement().updateActionsEnabledState();\r\n\r\n        return this._renderedElement;\r\n    }\r\n\r\n    updateLayout(_processChildren: boolean = true) {\r\n        this.updateRenderedElementVisibility();\r\n        this.applyPadding();\r\n    }\r\n\r\n    updateActionsEnabledState() {\r\n        const allActions = this.getRootElement().getAllActions();\r\n\r\n        for (let action of allActions) {\r\n            action.updateEnabledState();\r\n        }\r\n    }\r\n\r\n    indexOf(_cardElement: CardElement): number {\r\n        return -1;\r\n    }\r\n\r\n    isDesignMode(): boolean {\r\n        const rootElement = this.getRootElement();\r\n\r\n        return rootElement instanceof AdaptiveCard && rootElement.designMode;\r\n    }\r\n\r\n    isFirstElement(_element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isLastElement(_element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isAtTheVeryLeft(): boolean {\r\n        return this.parent\r\n            ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft()\r\n            : true;\r\n    }\r\n\r\n    isAtTheVeryRight(): boolean {\r\n        return this.parent\r\n            ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight()\r\n            : true;\r\n    }\r\n\r\n    isAtTheVeryTop(): boolean {\r\n        return this.parent\r\n            ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop()\r\n            : true;\r\n    }\r\n\r\n    isAtTheVeryBottom(): boolean {\r\n        return this.parent\r\n            ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom()\r\n            : true;\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        return false;\r\n    }\r\n\r\n    isLeftMostElement(_element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isRightMostElement(_element: CardElement): boolean {\r\n        return true;\r\n    }\r\n\r\n    isTopElement(element: CardElement): boolean {\r\n        return this.isFirstElement(element);\r\n    }\r\n\r\n    isBottomElement(element: CardElement): boolean {\r\n        return this.isLastElement(element);\r\n    }\r\n\r\n    isHiddenDueToOverflow(): boolean {\r\n        return (\r\n            this._renderedElement !== undefined &&\r\n            this._renderedElement.style.visibility === \"hidden\"\r\n        );\r\n    }\r\n\r\n    getRootElement(): CardElement {\r\n        return this.getRootObject() as CardElement;\r\n    }\r\n\r\n    getParentContainer(): Container | undefined {\r\n        let currentElement = this.parent;\r\n\r\n        while (currentElement) {\r\n            if (currentElement instanceof Container) {\r\n                return currentElement;\r\n            }\r\n\r\n            currentElement = currentElement.parent;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return [];\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result: Action[] = [];\r\n\r\n        for (let i = 0; i < this.getActionCount(); i++) {\r\n            let action = this.getActionAt(i);\r\n\r\n            if (action) {\r\n                result.push(action);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return [];\r\n    }\r\n\r\n    getElementById(id: string): CardElement | undefined {\r\n        return this.id === id ? this : undefined;\r\n    }\r\n\r\n    getActionById(_id: string): Action | undefined {\r\n        return undefined;\r\n    }\r\n\r\n    getEffectivePadding(): PaddingDefinition {\r\n        const padding = this.getPadding();\r\n\r\n        return padding ? padding : this.getDefaultPadding();\r\n    }\r\n\r\n    getEffectiveHorizontalAlignment(): Enums.HorizontalAlignment {\r\n        if (this.horizontalAlignment !== undefined) {\r\n            return this.horizontalAlignment;\r\n        }\r\n\r\n        if (this.parent) {\r\n            return this.parent.getEffectiveHorizontalAlignment();\r\n        }\r\n\r\n        return Enums.HorizontalAlignment.Left;\r\n    }\r\n\r\n    get hostConfig(): HostConfig {\r\n        if (this._hostConfig) {\r\n            return this._hostConfig;\r\n        } else {\r\n            if (this.parent) {\r\n                return this.parent.hostConfig;\r\n            } else {\r\n                return defaultHostConfig;\r\n            }\r\n        }\r\n    }\r\n\r\n    set hostConfig(value: HostConfig) {\r\n        this._hostConfig = value;\r\n    }\r\n\r\n    get index(): number {\r\n        if (this.parent) {\r\n            return this.parent.indexOf(this);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    get isInteractive(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return true;\r\n    }\r\n\r\n    get isInline(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        if (this.parent && this.separatorElement) {\r\n            return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get separatorElement(): HTMLElement | undefined {\r\n        return this._separatorElement;\r\n    }\r\n\r\n    get parent(): CardElement | undefined {\r\n        return <CardElement>this._parent;\r\n    }\r\n\r\n    getElementSingletonBehavior(): ElementSingletonBehavior {\r\n        return ElementSingletonBehavior.NotAllowed;\r\n    }\r\n}\r\n\r\nexport class ActionProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: SerializationContext\r\n    ): Action | undefined {\r\n        const parent = <CardElement>sender;\r\n\r\n        return context.parseAction(\r\n            parent,\r\n            source[this.name],\r\n            this.forbiddenActionTypes,\r\n            parent.isDesignMode()\r\n        );\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: Action | undefined,\r\n        context: SerializationContext\r\n    ) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            value ? value.toJSON(context) : undefined,\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly forbiddenActionTypes: string[] = []\r\n    ) {\r\n        super(targetVersion, name, undefined);\r\n    }\r\n}\r\n\r\nexport abstract class BaseTextBlock extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly textProperty = new StringProperty(Versions.v1_0, \"text\", true);\r\n    static readonly sizeProperty = new EnumProperty(Versions.v1_0, \"size\", Enums.TextSize);\r\n    static readonly weightProperty = new EnumProperty(Versions.v1_0, \"weight\", Enums.TextWeight);\r\n    static readonly colorProperty = new EnumProperty(Versions.v1_0, \"color\", Enums.TextColor);\r\n    static readonly isSubtleProperty = new BoolProperty(Versions.v1_0, \"isSubtle\");\r\n    static readonly fontTypeProperty = new EnumProperty(Versions.v1_2, \"fontType\", Enums.FontType);\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [\r\n        \"Action.ShowCard\"\r\n    ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        // selectAction is declared on BaseTextBlock but is only exposed on TextRun,\r\n        // so the property is removed from the BaseTextBlock schema.\r\n        schema.remove(BaseTextBlock.selectActionProperty);\r\n    }\r\n\r\n    @property(BaseTextBlock.sizeProperty)\r\n    size?: Enums.TextSize;\r\n\r\n    @property(BaseTextBlock.weightProperty)\r\n    weight?: Enums.TextWeight;\r\n\r\n    @property(BaseTextBlock.colorProperty)\r\n    color?: Enums.TextColor;\r\n\r\n    @property(BaseTextBlock.fontTypeProperty)\r\n    fontType?: Enums.FontType;\r\n\r\n    @property(BaseTextBlock.isSubtleProperty)\r\n    isSubtle?: boolean;\r\n\r\n    @property(BaseTextBlock.textProperty)\r\n    get text(): string | undefined {\r\n        return this.getValue(BaseTextBlock.textProperty);\r\n    }\r\n\r\n    set text(value: string | undefined) {\r\n        this.setText(value);\r\n    }\r\n\r\n    @property(BaseTextBlock.selectActionProperty)\r\n    selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    protected getFontSize(fontType: FontTypeDefinition): number {\r\n        switch (this.effectiveSize) {\r\n            case Enums.TextSize.Small:\r\n                return fontType.fontSizes.small;\r\n            case Enums.TextSize.Medium:\r\n                return fontType.fontSizes.medium;\r\n            case Enums.TextSize.Large:\r\n                return fontType.fontSizes.large;\r\n            case Enums.TextSize.ExtraLarge:\r\n                return fontType.fontSizes.extraLarge;\r\n            default:\r\n                return fontType.fontSizes.default;\r\n        }\r\n    }\r\n\r\n    protected getColorDefinition(\r\n        colorSet: ColorSetDefinition,\r\n        color: Enums.TextColor\r\n    ): TextColorDefinition {\r\n        switch (color) {\r\n            case Enums.TextColor.Accent:\r\n                return colorSet.accent;\r\n            case Enums.TextColor.Dark:\r\n                return colorSet.dark;\r\n            case Enums.TextColor.Light:\r\n                return colorSet.light;\r\n            case Enums.TextColor.Good:\r\n                return colorSet.good;\r\n            case Enums.TextColor.Warning:\r\n                return colorSet.warning;\r\n            case Enums.TextColor.Attention:\r\n                return colorSet.attention;\r\n            default:\r\n                return colorSet.default;\r\n        }\r\n    }\r\n\r\n    protected setText(value: string | undefined) {\r\n        this.setValue(BaseTextBlock.textProperty, value);\r\n    }\r\n\r\n    ariaHidden: boolean = false;\r\n\r\n    constructor(text?: string) {\r\n        super();\r\n\r\n        if (text) {\r\n            this.text = text;\r\n        }\r\n    }\r\n\r\n    init(textDefinition: BaseTextDefinition) {\r\n        this.size = textDefinition.size;\r\n        this.weight = textDefinition.weight;\r\n        this.color = textDefinition.color;\r\n        this.isSubtle = textDefinition.isSubtle;\r\n    }\r\n\r\n    asString(): string | undefined {\r\n        return this.text;\r\n    }\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        const fontType = this.hostConfig.getFontTypeDefinition(this.effectiveFontType);\r\n\r\n        if (fontType.fontFamily) {\r\n            targetElement.style.fontFamily = fontType.fontFamily;\r\n        }\r\n\r\n        let fontSize: number;\r\n\r\n        switch (this.effectiveSize) {\r\n            case Enums.TextSize.Small:\r\n                fontSize = fontType.fontSizes.small;\r\n                break;\r\n            case Enums.TextSize.Medium:\r\n                fontSize = fontType.fontSizes.medium;\r\n                break;\r\n            case Enums.TextSize.Large:\r\n                fontSize = fontType.fontSizes.large;\r\n                break;\r\n            case Enums.TextSize.ExtraLarge:\r\n                fontSize = fontType.fontSizes.extraLarge;\r\n                break;\r\n            default:\r\n                fontSize = fontType.fontSizes.default;\r\n                break;\r\n        }\r\n\r\n        targetElement.style.fontSize = fontSize + \"px\";\r\n\r\n        const colorDefinition = this.getColorDefinition(\r\n            this.getEffectiveStyleDefinition().foregroundColors,\r\n            this.effectiveColor\r\n        );\r\n\r\n        const targetColor = Utils.stringToCssColor(\r\n            this.effectiveIsSubtle ? colorDefinition.subtle : colorDefinition.default\r\n        );\r\n        if (targetColor) {\r\n            targetElement.style.color = targetColor;\r\n        }\r\n\r\n        let fontWeight: number;\r\n\r\n        switch (this.effectiveWeight) {\r\n            case Enums.TextWeight.Lighter:\r\n                fontWeight = fontType.fontWeights.lighter;\r\n                break;\r\n            case Enums.TextWeight.Bolder:\r\n                fontWeight = fontType.fontWeights.bolder;\r\n                break;\r\n            default:\r\n                fontWeight = fontType.fontWeights.default;\r\n                break;\r\n        }\r\n\r\n        targetElement.style.fontWeight = fontWeight.toString();\r\n\r\n        if (this.ariaHidden) {\r\n            targetElement.setAttribute(\"aria-hidden\", \"true\");\r\n        }\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result = super.getAllActions();\r\n\r\n        if (this.selectAction) {\r\n            result.push(this.selectAction);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get effectiveColor(): Enums.TextColor {\r\n        return this.color !== undefined ? this.color : this.getEffectiveTextStyleDefinition().color;\r\n    }\r\n\r\n    get effectiveFontType(): Enums.FontType {\r\n        return this.fontType !== undefined\r\n            ? this.fontType\r\n            : this.getEffectiveTextStyleDefinition().fontType;\r\n    }\r\n\r\n    get effectiveIsSubtle(): boolean {\r\n        return this.isSubtle !== undefined\r\n            ? this.isSubtle\r\n            : this.getEffectiveTextStyleDefinition().isSubtle;\r\n    }\r\n\r\n    get effectiveSize(): Enums.TextSize {\r\n        return this.size !== undefined ? this.size : this.getEffectiveTextStyleDefinition().size;\r\n    }\r\n\r\n    get effectiveWeight(): Enums.TextWeight {\r\n        return this.weight !== undefined\r\n            ? this.weight\r\n            : this.getEffectiveTextStyleDefinition().weight;\r\n    }\r\n}\r\n\r\nexport type TextBlockStyle = \"default\" | \"heading\" | \"columnHeader\";\r\n\r\nexport class TextBlock extends BaseTextBlock {\r\n    //#region Schema\r\n\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_0, \"wrap\", false);\r\n    static readonly maxLinesProperty = new NumProperty(Versions.v1_0, \"maxLines\");\r\n    static readonly styleProperty = new ValueSetProperty(Versions.v1_5, \"style\", [\r\n        { value: \"default\" },\r\n        { value: \"columnHeader\" },\r\n        { value: \"heading\" }\r\n    ]);\r\n\r\n    @property(TextBlock.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    @property(TextBlock.maxLinesProperty)\r\n    maxLines?: number;\r\n\r\n    @property(TextBlock.styleProperty)\r\n    style?: TextBlockStyle;\r\n\r\n    //#endregion\r\n\r\n    private _computedLineHeight: number;\r\n    private _originalInnerHtml: string;\r\n    private _processedText?: string;\r\n    private _treatAsPlainText: boolean = true;\r\n\r\n    private restoreOriginalContent() {\r\n        if (this.renderedElement !== undefined) {\r\n            if (this.maxLines && this.maxLines > 0) {\r\n                this.renderedElement.style.maxHeight =\r\n                    this._computedLineHeight * this.maxLines + \"px\";\r\n            }\r\n\r\n            const originalHtml = TextBlock._ttRoundtripPolicy?.createHTML(this._originalInnerHtml) ?? this._originalInnerHtml;\r\n            this.renderedElement.innerHTML = originalHtml as string;\r\n        }\r\n    }\r\n\r\n    private truncateIfSupported(maxHeight: number): boolean {\r\n        if (this.renderedElement !== undefined) {\r\n            // For now, only truncate TextBlocks that contain just a single\r\n            // paragraph -- since the maxLines calculation doesn't take into\r\n            // account Markdown lists\r\n            const children = this.renderedElement.children;\r\n            const isTextOnly = !children.length;\r\n            const truncationSupported =\r\n                isTextOnly ||\r\n                (children.length === 1 && (<HTMLElement>children[0]).tagName.toLowerCase() === \"p\" && !(<HTMLElement>children[0]).children.length);\r\n\r\n            if (truncationSupported) {\r\n                const element = isTextOnly ? this.renderedElement : <HTMLElement>children[0];\r\n\r\n                Utils.truncateText(element, maxHeight, this._computedLineHeight);\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Markdown processing is handled outside of Adaptive Cards. It's up to the host to ensure that markdown is safely\r\n    // processed.\r\n    private static readonly _ttMarkdownPolicy = (typeof window === 'undefined') ? undefined : window.trustedTypes?.createPolicy(\r\n        \"adaptivecards#markdownPassthroughPolicy\",\r\n        { createHTML: (value) => value }\r\n    );\r\n\r\n    // When \"advanced\" truncation is enabled (see GlobalSettings.useAdvancedCardBottomTruncation and\r\n    // GlobalSettings.useAdvancedTextBlockTruncation), we store the original pre-truncation content in\r\n    // _originalInnerHtml so that we can restore/recalculate truncation later if space availability has changed (see\r\n    // TextBlock.restoreOriginalContent())\r\n    private static readonly _ttRoundtripPolicy = (typeof window === 'undefined') ? undefined : window.trustedTypes?.createPolicy(\r\n        \"adaptivecards#restoreContentsPolicy\",\r\n        { createHTML: (value) => value }\r\n    );\r\n\r\n    protected setText(value: string) {\r\n        super.setText(value);\r\n\r\n        this._processedText = undefined;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._processedText = undefined;\r\n\r\n        if (this.text) {\r\n            const preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\r\n            const hostConfig = this.hostConfig;\r\n\r\n            let element: HTMLElement;\r\n\r\n            if (this.forElementId) {\r\n                const labelElement = document.createElement(\"label\");\r\n                labelElement.htmlFor = this.forElementId;\r\n\r\n                element = labelElement;\r\n            } else {\r\n                element = document.createElement(\"div\");\r\n            }\r\n\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textBlock\"));\r\n            element.style.overflow = \"hidden\";\r\n\r\n            this.applyStylesTo(element);\r\n\r\n            if (this.style === \"heading\") {\r\n                element.setAttribute(\"role\", \"heading\");\r\n\r\n                const headingLevel = this.hostConfig.textBlock.headingLevel;\r\n\r\n                if (headingLevel !== undefined && headingLevel > 0) {\r\n                    element.setAttribute(\"aria-level\", headingLevel.toString());\r\n                }\r\n            }\r\n\r\n            if (this.selectAction && hostConfig.supportsInteractivity) {\r\n                element.onclick = (e) => {\r\n                    if (this.selectAction && this.selectAction.isEffectivelyEnabled()) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this.selectAction.execute();\r\n                    }\r\n                };\r\n\r\n                this.selectAction.setupElementForAccessibility(element);\r\n\r\n                if (this.selectAction.isEffectivelyEnabled()) {\r\n                    element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n                }\r\n            }\r\n\r\n            if (!this._processedText) {\r\n                this._treatAsPlainText = true;\r\n\r\n                let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\r\n\r\n                if (this.useMarkdown && formattedText) {\r\n                    if (GlobalSettings.allowMarkForTextHighlighting) {\r\n                        formattedText = formattedText\r\n                            .replace(/<mark>/g, \"===\")\r\n                            .replace(/<\\/mark>/g, \"/==/\");\r\n                    }\r\n\r\n                    const markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);\r\n\r\n                    if (\r\n                        markdownProcessingResult.didProcess &&\r\n                        markdownProcessingResult.outputHtml\r\n                    ) {\r\n                        this._processedText = markdownProcessingResult.outputHtml;\r\n                        this._treatAsPlainText = false;\r\n\r\n                        // Only process <mark> tag if markdown processing was applied because\r\n                        // markdown processing is also responsible for sanitizing the input string\r\n                        if (GlobalSettings.allowMarkForTextHighlighting && this._processedText) {\r\n                            let markStyle: string = \"\";\r\n                            const effectiveStyle = this.getEffectiveStyleDefinition();\r\n\r\n                            if (effectiveStyle.highlightBackgroundColor) {\r\n                                markStyle +=\r\n                                    \"background-color: \" +\r\n                                    effectiveStyle.highlightBackgroundColor +\r\n                                    \";\";\r\n                            }\r\n\r\n                            if (effectiveStyle.highlightForegroundColor) {\r\n                                markStyle +=\r\n                                    \"color: \" + effectiveStyle.highlightForegroundColor + \";\";\r\n                            }\r\n\r\n                            if (markStyle) {\r\n                                markStyle = 'style=\"' + markStyle + '\"';\r\n                            }\r\n\r\n                            this._processedText = this._processedText\r\n                                .replace(/===/g, \"<mark \" + markStyle + \">\")\r\n                                .replace(/\\/==\\//g, \"</mark>\");\r\n                        }\r\n                    } else {\r\n                        this._processedText = formattedText;\r\n                        this._treatAsPlainText = true;\r\n                    }\r\n                } else {\r\n                    this._processedText = formattedText;\r\n                    this._treatAsPlainText = true;\r\n                }\r\n            }\r\n\r\n            if (!this._processedText) {\r\n                this._processedText = \"\";\r\n            }\r\n\r\n            if (this._treatAsPlainText) {\r\n                element.innerText = this._processedText;\r\n            } else {\r\n                const processedHtml =\r\n                    TextBlock._ttMarkdownPolicy?.createHTML(this._processedText) ??\r\n                    this._processedText;\r\n                element.innerHTML = processedHtml as string;\r\n            }\r\n\r\n            if (element.firstElementChild instanceof HTMLElement) {\r\n                const firstElementChild = element.firstElementChild;\r\n                firstElementChild.style.marginTop = \"0px\";\r\n                firstElementChild.style.width = \"100%\";\r\n\r\n                if (!this.wrap) {\r\n                    firstElementChild.style.overflow = \"hidden\";\r\n                    firstElementChild.style.textOverflow = \"ellipsis\";\r\n                }\r\n            }\r\n\r\n            if (element.lastElementChild instanceof HTMLElement) {\r\n                element.lastElementChild.style.marginBottom = \"0px\";\r\n            }\r\n\r\n            const anchors = element.getElementsByTagName(\"a\");\r\n\r\n            for (const anchor of Array.from(anchors)) {\r\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\r\n                anchor.target = \"_blank\";\r\n                anchor.onclick = (e: MouseEvent) => {\r\n                    if (raiseAnchorClickedEvent(this, anchor, e)) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n                    }\r\n                };\r\n                anchor.oncontextmenu = (e: MouseEvent) => {\r\n                    if (raiseAnchorClickedEvent(this, anchor, e)) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    return true;\r\n                };\r\n            }\r\n\r\n            if (this.wrap) {\r\n                element.style.wordWrap = \"break-word\";\r\n\r\n                if (this.maxLines && this.maxLines > 0) {\r\n                    element.style.overflow = \"hidden\";\r\n\r\n                    if (Utils.isInternetExplorer() || !GlobalSettings.useWebkitLineClamp) {\r\n                        element.style.maxHeight = this._computedLineHeight * this.maxLines + \"px\";\r\n                    } else {\r\n                        // While non standard, --webkit-line-clamp works in every browser (except IE)\r\n                        // and is a great solution to support the maxLines feature with ellipsis\r\n                        // truncation. With --webkit-line-clamp there is need to use explicit line heights\r\n                        element.style.removeProperty(\"line-height\");\r\n                        element.style.display = \"-webkit-box\";\r\n                        element.style.webkitBoxOrient = \"vertical\";\r\n                        element.style.webkitLineClamp = this.maxLines.toString();\r\n                    }\r\n                }\r\n            } else {\r\n                element.style.whiteSpace = \"nowrap\";\r\n                element.style.textOverflow = \"ellipsis\";\r\n            }\r\n\r\n            if (\r\n                GlobalSettings.useAdvancedTextBlockTruncation ||\r\n                GlobalSettings.useAdvancedCardBottomTruncation\r\n            ) {\r\n                this._originalInnerHtml = element.innerHTML;\r\n            }\r\n\r\n            return element;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        if (maxHeight >= this._computedLineHeight) {\r\n            return this.truncateIfSupported(maxHeight);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        this.restoreOriginalContent();\r\n\r\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines) {\r\n            const maxHeight = this._computedLineHeight * this.maxLines;\r\n\r\n            this.truncateIfSupported(maxHeight);\r\n        }\r\n    }\r\n\r\n    useMarkdown: boolean = true;\r\n    forElementId?: string;\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        super.applyStylesTo(targetElement);\r\n\r\n        switch (this.getEffectiveHorizontalAlignment()) {\r\n            case Enums.HorizontalAlignment.Center:\r\n                targetElement.style.textAlign = \"center\";\r\n                break;\r\n            case Enums.HorizontalAlignment.Right:\r\n                targetElement.style.textAlign = \"end\";\r\n                break;\r\n            default:\r\n                targetElement.style.textAlign = \"start\";\r\n                break;\r\n        }\r\n\r\n        const lineHeights = this.hostConfig.lineHeights;\r\n\r\n        if (lineHeights) {\r\n            switch (this.effectiveSize) {\r\n                case Enums.TextSize.Small:\r\n                    this._computedLineHeight = lineHeights.small;\r\n                    break;\r\n                case Enums.TextSize.Medium:\r\n                    this._computedLineHeight = lineHeights.medium;\r\n                    break;\r\n                case Enums.TextSize.Large:\r\n                    this._computedLineHeight = lineHeights.large;\r\n                    break;\r\n                case Enums.TextSize.ExtraLarge:\r\n                    this._computedLineHeight = lineHeights.extraLarge;\r\n                    break;\r\n                default:\r\n                    this._computedLineHeight = lineHeights.default;\r\n                    break;\r\n            }\r\n        } else {\r\n            // Looks like 1.33 is the magic number to compute line-height\r\n            // from font size.\r\n            this._computedLineHeight =\r\n                this.getFontSize(this.hostConfig.getFontTypeDefinition(this.effectiveFontType)) *\r\n                1.33;\r\n        }\r\n\r\n        targetElement.style.lineHeight = this._computedLineHeight + \"px\";\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TextBlock\";\r\n    }\r\n\r\n    getEffectiveTextStyleDefinition(): TextStyleDefinition {\r\n        if (this.style) {\r\n            return this.hostConfig.textStyles.getStyleByName(this.style);\r\n        }\r\n\r\n        return super.getEffectiveTextStyleDefinition();\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = false) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (GlobalSettings.useAdvancedTextBlockTruncation && this.maxLines && this.isDisplayed()) {\r\n            // Reset the element's innerHTML in case the available room for\r\n            // content has increased\r\n            this.restoreOriginalContent();\r\n            this.truncateIfSupported(this._computedLineHeight * this.maxLines);\r\n        }\r\n    }\r\n}\r\n\r\nexport class TextRun extends BaseTextBlock {\r\n    //#region Schema\r\n\r\n    static readonly italicProperty = new BoolProperty(Versions.v1_2, \"italic\", false);\r\n    static readonly strikethroughProperty = new BoolProperty(Versions.v1_2, \"strikethrough\", false);\r\n    static readonly highlightProperty = new BoolProperty(Versions.v1_2, \"highlight\", false);\r\n    static readonly underlineProperty = new BoolProperty(Versions.v1_3, \"underline\", false);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.add(BaseTextBlock.selectActionProperty);\r\n    }\r\n\r\n    @property(TextRun.italicProperty)\r\n    italic: boolean = false;\r\n\r\n    @property(TextRun.strikethroughProperty)\r\n    strikethrough: boolean = false;\r\n\r\n    @property(TextRun.highlightProperty)\r\n    highlight: boolean = false;\r\n\r\n    @property(TextRun.underlineProperty)\r\n    underline: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        if (this.text) {\r\n            const preProcessedText = this.preProcessPropertyValue(BaseTextBlock.textProperty);\r\n            const hostConfig = this.hostConfig;\r\n\r\n            let formattedText = TextFormatters.formatText(this.lang, preProcessedText);\r\n\r\n            if (!formattedText) {\r\n                formattedText = \"\";\r\n            }\r\n\r\n            const element = document.createElement(\"span\");\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-textRun\"));\r\n\r\n            this.applyStylesTo(element);\r\n\r\n            if (this.selectAction && hostConfig.supportsInteractivity) {\r\n                const anchor = document.createElement(\"a\");\r\n                anchor.classList.add(hostConfig.makeCssClassName(\"ac-anchor\"));\r\n\r\n                const href = this.selectAction.getHref();\r\n\r\n                anchor.href = href ? href : \"\";\r\n                anchor.target = \"_blank\";\r\n                anchor.onclick = (e) => {\r\n                    if (this.selectAction && this.selectAction.isEffectivelyEnabled()) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this.selectAction.execute();\r\n                    }\r\n                };\r\n\r\n                this.selectAction.setupElementForAccessibility(anchor);\r\n\r\n                anchor.innerText = formattedText;\r\n\r\n                element.appendChild(anchor);\r\n            } else {\r\n                element.innerText = formattedText;\r\n            }\r\n\r\n            return element;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    applyStylesTo(targetElement: HTMLElement) {\r\n        super.applyStylesTo(targetElement);\r\n\r\n        if (this.italic) {\r\n            targetElement.style.fontStyle = \"italic\";\r\n        }\r\n\r\n        if (this.strikethrough) {\r\n            targetElement.style.textDecoration = \"line-through\";\r\n        }\r\n\r\n        if (this.highlight) {\r\n            const colorDefinition = this.getColorDefinition(\r\n                this.getEffectiveStyleDefinition().foregroundColors,\r\n                this.effectiveColor\r\n            );\r\n\r\n            const backgroundColor = Utils.stringToCssColor(\r\n                this.effectiveIsSubtle\r\n                    ? colorDefinition.highlightColors.subtle\r\n                    : colorDefinition.highlightColors.default\r\n            );\r\n            if (backgroundColor) {\r\n                targetElement.style.backgroundColor = backgroundColor;\r\n            }\r\n        }\r\n\r\n        if (this.underline) {\r\n            targetElement.style.textDecoration = \"underline\";\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TextRun\";\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n\r\n    get isInline(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class RichTextBlock extends CardElement {\r\n    private _inlines: CardElement[] = [];\r\n\r\n    private internalAddInline(inline: CardElement, forceAdd: boolean = false) {\r\n        if (!inline.isInline) {\r\n            throw new Error(Strings.errors.elementCannotBeUsedAsInline());\r\n        }\r\n\r\n        const doAdd: boolean = inline.parent === undefined || forceAdd;\r\n\r\n        if (!doAdd && inline.parent !== this) {\r\n            throw new Error(Strings.errors.inlineAlreadyParented());\r\n        } else {\r\n            inline.setParent(this);\r\n\r\n            this._inlines.push(inline);\r\n        }\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._inlines = [];\r\n\r\n        if (Array.isArray(source[\"inlines\"])) {\r\n            for (const jsonInline of source[\"inlines\"]) {\r\n                let inline: CardElement | undefined;\r\n\r\n                if (typeof jsonInline === \"string\") {\r\n                    const textRun = new TextRun();\r\n                    textRun.text = jsonInline;\r\n\r\n                    inline = textRun;\r\n                } else {\r\n                    // No fallback for inlines in 1.2\r\n                    inline = context.parseElement(this, jsonInline, [], false);\r\n                }\r\n\r\n                if (inline) {\r\n                    this.internalAddInline(inline, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        if (this._inlines.length > 0) {\r\n            const jsonInlines: any[] = [];\r\n\r\n            for (const inline of this._inlines) {\r\n                jsonInlines.push(inline.toJSON(context));\r\n            }\r\n\r\n            context.serializeValue(target, \"inlines\", jsonInlines);\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        if (this._inlines.length > 0) {\r\n            let element: HTMLElement;\r\n\r\n            if (this.forElementId) {\r\n                const labelElement = document.createElement(\"label\");\r\n                labelElement.htmlFor = this.forElementId;\r\n\r\n                element = labelElement;\r\n            } else {\r\n                element = document.createElement(\"div\");\r\n            }\r\n\r\n            element.className = this.hostConfig.makeCssClassName(\"ac-richTextBlock\");\r\n\r\n            switch (this.getEffectiveHorizontalAlignment()) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.textAlign = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.textAlign = \"end\";\r\n                    break;\r\n                default:\r\n                    element.style.textAlign = \"start\";\r\n                    break;\r\n            }\r\n\r\n            let renderedInlines: number = 0;\r\n\r\n            for (const inline of this._inlines) {\r\n                const renderedInline = inline.render();\r\n\r\n                if (renderedInline) {\r\n                    element.appendChild(renderedInline);\r\n\r\n                    renderedInlines++;\r\n                }\r\n            }\r\n\r\n            if (renderedInlines > 0) {\r\n                return element;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    forElementId?: string;\r\n\r\n    asString(): string | undefined {\r\n        let result = \"\";\r\n\r\n        for (const inline of this._inlines) {\r\n            result += inline.asString();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"RichTextBlock\";\r\n    }\r\n\r\n    getInlineCount(): number {\r\n        return this._inlines.length;\r\n    }\r\n\r\n    getInlineAt(index: number): CardElement {\r\n        if (index >= 0 && index < this._inlines.length) {\r\n            return this._inlines[index];\r\n        } else {\r\n            throw new Error(Strings.errors.indexOutOfRange(index));\r\n        }\r\n    }\r\n\r\n    addInline(inline: CardElement | string) {\r\n        if (typeof inline === \"string\") {\r\n            this.internalAddInline(new TextRun(inline));\r\n        } else {\r\n            this.internalAddInline(inline);\r\n        }\r\n    }\r\n\r\n    removeInline(inline: CardElement): boolean {\r\n        const index = this._inlines.indexOf(inline);\r\n\r\n        if (index >= 0) {\r\n            this._inlines[index].setParent(undefined);\r\n            this._inlines.splice(index, 1);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class Fact extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n\r\n    // For historic reasons, the \"title\" schema property is exposed as \"name\" in the OM.\r\n    @property(Fact.titleProperty)\r\n    name?: string;\r\n\r\n    @property(Fact.valueProperty)\r\n    value?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"Fact\";\r\n    }\r\n\r\n    constructor(name?: string, value?: string) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class FactSet extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly factsProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_0,\r\n        \"facts\",\r\n        Fact\r\n    );\r\n\r\n    @property(FactSet.factsProperty)\r\n    facts: Fact[];\r\n\r\n    //#endregion\r\n\r\n    protected get useDefaultSizing(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n        const hostConfig = this.hostConfig;\r\n\r\n        if (this.facts.length > 0) {\r\n            element = document.createElement(\"table\");\r\n            element.style.borderWidth = \"0px\";\r\n            element.style.borderSpacing = \"0px\";\r\n            element.style.borderStyle = \"none\";\r\n            element.style.borderCollapse = \"collapse\";\r\n            element.style.display = \"block\";\r\n            element.style.overflow = \"hidden\";\r\n            element.classList.add(hostConfig.makeCssClassName(\"ac-factset\"));\r\n            element.setAttribute(\"role\", \"presentation\");\r\n\r\n            for (let i = 0; i < this.facts.length; i++) {\r\n                const trElement = document.createElement(\"tr\");\r\n\r\n                if (i > 0) {\r\n                    trElement.style.marginTop = hostConfig.factSet.spacing + \"px\";\r\n                }\r\n\r\n                // Title column\r\n                let tdElement = document.createElement(\"td\");\r\n                tdElement.style.padding = \"0\";\r\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-title\"));\r\n\r\n                if (hostConfig.factSet.title.maxWidth) {\r\n                    tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + \"px\";\r\n                }\r\n\r\n                tdElement.style.verticalAlign = \"top\";\r\n\r\n                let textBlock = new TextBlock();\r\n                textBlock.setParent(this);\r\n                textBlock.text =\r\n                    !this.facts[i].name && this.isDesignMode() ? \"Title\" : this.facts[i].name;\r\n                textBlock.size = hostConfig.factSet.title.size;\r\n                textBlock.color = hostConfig.factSet.title.color;\r\n                textBlock.isSubtle = hostConfig.factSet.title.isSubtle;\r\n                textBlock.weight = hostConfig.factSet.title.weight;\r\n                textBlock.wrap = hostConfig.factSet.title.wrap;\r\n                textBlock.spacing = Enums.Spacing.None;\r\n\r\n                Utils.appendChild(tdElement, textBlock.render());\r\n                Utils.appendChild(trElement, tdElement);\r\n\r\n                // Spacer column\r\n                tdElement = document.createElement(\"td\");\r\n                tdElement.style.width = \"10px\";\r\n\r\n                Utils.appendChild(trElement, tdElement);\r\n\r\n                // Value column\r\n                tdElement = document.createElement(\"td\");\r\n                tdElement.style.padding = \"0\";\r\n                tdElement.style.verticalAlign = \"top\";\r\n                tdElement.classList.add(hostConfig.makeCssClassName(\"ac-fact-value\"));\r\n\r\n                textBlock = new TextBlock();\r\n                textBlock.setParent(this);\r\n                textBlock.text = this.facts[i].value;\r\n                textBlock.size = hostConfig.factSet.value.size;\r\n                textBlock.color = hostConfig.factSet.value.color;\r\n                textBlock.isSubtle = hostConfig.factSet.value.isSubtle;\r\n                textBlock.weight = hostConfig.factSet.value.weight;\r\n                textBlock.wrap = hostConfig.factSet.value.wrap;\r\n                textBlock.spacing = Enums.Spacing.None;\r\n\r\n                Utils.appendChild(tdElement, textBlock.render());\r\n                Utils.appendChild(trElement, tdElement);\r\n                Utils.appendChild(element, trElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"FactSet\";\r\n    }\r\n}\r\n\r\nclass ImageDimensionProperty extends PropertyDefinition {\r\n    getInternalName(): string {\r\n        return this.internalName;\r\n    }\r\n\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): number | undefined {\r\n        let result: number | undefined = undefined;\r\n        const sourceValue = source[this.name];\r\n\r\n        if (sourceValue === undefined) {\r\n            return this.defaultValue;\r\n        }\r\n\r\n        let isValid = false;\r\n\r\n        if (typeof sourceValue === \"string\") {\r\n            try {\r\n                const size = SizeAndUnit.parse(sourceValue, true);\r\n\r\n                if (size.unit === Enums.SizeUnit.Pixel) {\r\n                    result = size.physicalSize;\r\n\r\n                    isValid = true;\r\n                }\r\n            } catch {\r\n                // Swallow the exception\r\n            }\r\n\r\n            // If the source value isn't valid per this property definition,\r\n            // check its validity per the fallback property, if specified\r\n            if (!isValid && this.fallbackProperty) {\r\n                isValid = this.fallbackProperty.isValidValue(sourceValue, context);\r\n            }\r\n        }\r\n\r\n        if (!isValid) {\r\n            context.logParseEvent(\r\n                sender,\r\n                Enums.ValidationEvent.InvalidPropertyValue,\r\n                Strings.errors.invalidPropertyValue(sourceValue, this.name)\r\n            );\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: number | undefined,\r\n        context: BaseSerializationContext\r\n    ) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined\r\n        );\r\n    }\r\n\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly internalName: string,\r\n        readonly fallbackProperty?: ValueSetProperty\r\n    ) {\r\n        super(targetVersion, name);\r\n    }\r\n}\r\n\r\nexport class Image extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n    static readonly altTextProperty = new StringProperty(Versions.v1_0, \"altText\");\r\n    static readonly backgroundColorProperty = new StringProperty(Versions.v1_1, \"backgroundColor\");\r\n    static readonly styleProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        Enums.ImageStyle,\r\n        Enums.ImageStyle.Default\r\n    );\r\n    static readonly sizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"size\",\r\n        Enums.Size,\r\n        Enums.Size.Auto\r\n    );\r\n    static readonly pixelWidthProperty = new ImageDimensionProperty(\r\n        Versions.v1_1,\r\n        \"width\",\r\n        \"pixelWidth\"\r\n    );\r\n    static readonly pixelHeightProperty = new ImageDimensionProperty(\r\n        Versions.v1_1,\r\n        \"height\",\r\n        \"pixelHeight\",\r\n        CardElement.heightProperty\r\n    );\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [\r\n        \"Action.ShowCard\"\r\n    ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.remove(CardElement.heightProperty);\r\n    }\r\n\r\n    @property(Image.urlProperty)\r\n    url?: string;\r\n\r\n    @property(Image.altTextProperty)\r\n    altText?: string;\r\n\r\n    @property(Image.backgroundColorProperty)\r\n    backgroundColor?: string;\r\n\r\n    @property(Image.sizeProperty)\r\n    size: Enums.Size = Enums.Size.Auto;\r\n\r\n    @property(Image.styleProperty)\r\n    style: Enums.ImageStyle = Enums.ImageStyle.Default;\r\n\r\n    @property(Image.pixelWidthProperty)\r\n    pixelWidth?: number;\r\n\r\n    @property(Image.pixelHeightProperty)\r\n    pixelHeight?: number;\r\n\r\n    @property(Image.selectActionProperty)\r\n    selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    private applySize(element: HTMLElement) {\r\n        if (this.pixelWidth || this.pixelHeight) {\r\n            if (this.pixelWidth) {\r\n                element.style.width = this.pixelWidth + \"px\";\r\n            }\r\n\r\n            if (this.pixelHeight) {\r\n                element.style.height = this.pixelHeight + \"px\";\r\n            }\r\n        } else {\r\n            if (this.maxHeight) {\r\n                // If the image is constrained in height, we set its height property and\r\n                // auto and stretch are ignored (default to medium). THis is necessary for\r\n                // ImageSet which uses a maximum image height as opposed to the cards width\r\n                // as a constraining dimension\r\n                switch (this.size) {\r\n                    case Enums.Size.Small:\r\n                        element.style.height = this.hostConfig.imageSizes.small + \"px\";\r\n                        break;\r\n                    case Enums.Size.Large:\r\n                        element.style.height = this.hostConfig.imageSizes.large + \"px\";\r\n                        break;\r\n                    default:\r\n                        element.style.height = this.hostConfig.imageSizes.medium + \"px\";\r\n                        break;\r\n                }\r\n\r\n                element.style.maxHeight = this.maxHeight + \"px\";\r\n            } else {\r\n                switch (this.size) {\r\n                    case Enums.Size.Stretch:\r\n                        element.style.width = \"100%\";\r\n                        break;\r\n                    case Enums.Size.Auto:\r\n                        element.style.maxWidth = \"100%\";\r\n                        break;\r\n                    case Enums.Size.Small:\r\n                        element.style.width = this.hostConfig.imageSizes.small + \"px\";\r\n                        break;\r\n                    case Enums.Size.Large:\r\n                        element.style.width = this.hostConfig.imageSizes.large + \"px\";\r\n                        break;\r\n                    case Enums.Size.Medium:\r\n                        element.style.width = this.hostConfig.imageSizes.medium + \"px\";\r\n                        break;\r\n                }\r\n\r\n                element.style.maxHeight = \"100%\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected get useDefaultSizing() {\r\n        return false;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n\r\n        if (this.url) {\r\n            element = document.createElement(\"div\");\r\n            element.style.display = \"flex\";\r\n            element.style.alignItems = \"flex-start\";\r\n\r\n            // Cache hostConfig to avoid walking the parent hierarchy multiple times\r\n            const hostConfig = this.hostConfig;\r\n\r\n            switch (this.getEffectiveHorizontalAlignment()) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.justifyContent = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.justifyContent = \"flex-end\";\r\n                    break;\r\n                default:\r\n                    element.style.justifyContent = \"flex-start\";\r\n                    break;\r\n            }\r\n\r\n            const imageElement = document.createElement(\"img\");\r\n            imageElement.onload = (_e: Event) => {\r\n                raiseImageLoadedEvent(this);\r\n            };\r\n            imageElement.onerror = (_e: Event) => {\r\n                if (this.renderedElement) {\r\n                    const card = this.getRootElement() as AdaptiveCard;\r\n\r\n                    this.renderedElement;\r\n\r\n                    if (card && card.designMode) {\r\n                        const errorElement = document.createElement(\"div\");\r\n                        errorElement.style.display = \"flex\";\r\n                        errorElement.style.alignItems = \"center\";\r\n                        errorElement.style.justifyContent = \"center\";\r\n                        errorElement.style.backgroundColor = \"#EEEEEE\";\r\n                        errorElement.style.color = \"black\";\r\n                        errorElement.innerText = \":-(\";\r\n                        errorElement.style.padding = \"10px\";\r\n\r\n                        this.applySize(errorElement);\r\n\r\n                        this.renderedElement.appendChild(errorElement);\r\n                    }\r\n                }\r\n\r\n                raiseImageLoadedEvent(this);\r\n            };\r\n            imageElement.style.minWidth = \"0\";\r\n            imageElement.classList.add(hostConfig.makeCssClassName(\"ac-image\"));\r\n\r\n            if (this.selectAction && hostConfig.supportsInteractivity) {\r\n                imageElement.onkeypress = (e) => {\r\n                    if (\r\n                        this.selectAction &&\r\n                        this.selectAction.isEffectivelyEnabled() &&\r\n                        (e.code === \"Enter\" || e.code === \"Space\")\r\n                    ) {\r\n                        // enter or space pressed\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this.selectAction.execute();\r\n                    }\r\n                };\r\n\r\n                imageElement.onclick = (e) => {\r\n                    if (this.selectAction && this.selectAction.isEffectivelyEnabled()) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this.selectAction.execute();\r\n                    }\r\n                };\r\n\r\n                this.selectAction.setupElementForAccessibility(imageElement);\r\n\r\n                if (this.selectAction.isEffectivelyEnabled()) {\r\n                    imageElement.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n                }\r\n            }\r\n\r\n            this.applySize(imageElement);\r\n\r\n            if (this.style === Enums.ImageStyle.Person) {\r\n                imageElement.style.borderRadius = \"50%\";\r\n                imageElement.style.backgroundPosition = \"50% 50%\";\r\n                imageElement.style.backgroundRepeat = \"no-repeat\";\r\n            }\r\n\r\n            const backgroundColor = Utils.stringToCssColor(this.backgroundColor);\r\n            if (backgroundColor) {\r\n                imageElement.style.backgroundColor = backgroundColor;\r\n            }\r\n\r\n            imageElement.src = <string>this.preProcessPropertyValue(Image.urlProperty);\r\n\r\n            const altTextProperty = this.preProcessPropertyValue(Image.altTextProperty);\r\n            if (altTextProperty) {\r\n                imageElement.alt = <string>altTextProperty;\r\n            }\r\n\r\n            element.appendChild(imageElement);\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    maxHeight?: number;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Image\";\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result = super.getAllActions();\r\n\r\n        if (this.selectAction) {\r\n            result.push(this.selectAction);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getActionById(id: string) {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result && this.selectAction) {\r\n            result = this.selectAction.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this.url ? [{ url: this.url, mimeType: \"image\" }] : [];\r\n    }\r\n}\r\n\r\nexport abstract class CardElementContainer extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly selectActionProperty = new ActionProperty(Versions.v1_1, \"selectAction\", [\r\n        \"Action.ShowCard\"\r\n    ]);\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        if (!this.isSelectable) {\r\n            schema.remove(CardElementContainer.selectActionProperty);\r\n        }\r\n    }\r\n\r\n    @property(CardElementContainer.selectActionProperty)\r\n    protected _selectAction?: Action;\r\n\r\n    //#endregion\r\n\r\n    protected isElementAllowed(element: CardElement) {\r\n        return this.hostConfig.supportsInteractivity || !element.isInteractive;\r\n    }\r\n\r\n    protected applyPadding() {\r\n        super.applyPadding();\r\n\r\n        if (!this.renderedElement) {\r\n            return;\r\n        }\r\n\r\n        let physicalPadding = new SpacingDefinition();\r\n\r\n        if (this.getEffectivePadding()) {\r\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(\r\n                this.getEffectivePadding()\r\n            );\r\n        }\r\n\r\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\r\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\r\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\r\n\r\n        this.renderedElement.style.marginRight = \"0\";\r\n        this.renderedElement.style.marginLeft = \"0\";\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // This function is kept but return [] when removing Carousel from code\r\n    protected forbiddenChildElements(): string[] {\r\n        return [];\r\n    }\r\n\r\n    abstract getItemCount(): number;\r\n    abstract getItemAt(index: number): CardElement;\r\n    abstract getFirstVisibleRenderedItem(): CardElement | undefined;\r\n    abstract getLastVisibleRenderedItem(): CardElement | undefined;\r\n    abstract removeItem(item: CardElement): boolean;\r\n\r\n    allowVerticalOverflow: boolean = false;\r\n\r\n    releaseDOMResources() {\r\n        super.releaseDOMResources();\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            this.getItemAt(i).releaseDOMResources();\r\n        }\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            const item = this.getItemAt(i);\r\n\r\n            if (!this.hostConfig.supportsInteractivity && item.isInteractive) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InteractivityNotAllowed,\r\n                    Strings.errors.interactivityNotAllowed()\r\n                );\r\n            }\r\n\r\n            if (!this.isElementAllowed(item)) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InteractivityNotAllowed,\r\n                    Strings.errors.elementTypeNotAllowed(item.getJsonTypeName())\r\n                );\r\n            }\r\n\r\n            item.internalValidateProperties(context);\r\n        }\r\n\r\n        if (this._selectAction) {\r\n            this._selectAction.internalValidateProperties(context);\r\n        }\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        const element = super.render();\r\n\r\n        if (element) {\r\n            const hostConfig = this.hostConfig;\r\n\r\n            if (this.allowVerticalOverflow) {\r\n                element.style.overflowX = \"hidden\";\r\n                element.style.overflowY = \"auto\";\r\n            }\r\n\r\n            if (\r\n                element &&\r\n                this.isSelectable &&\r\n                this._selectAction &&\r\n                hostConfig.supportsInteractivity\r\n            ) {\r\n                element.onclick = (e) => {\r\n                    if (this._selectAction && this._selectAction.isEffectivelyEnabled()) {\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this._selectAction.execute();\r\n                    }\r\n                };\r\n\r\n                element.onkeypress = (e) => {\r\n                    if (\r\n                        this._selectAction &&\r\n                        this._selectAction.isEffectivelyEnabled() &&\r\n                        (e.code === \"Enter\" || e.code === \"Space\")\r\n                    ) {\r\n                        // Enter or space pressed\r\n                        e.preventDefault();\r\n                        e.cancelBubble = true;\r\n\r\n                        this._selectAction.execute();\r\n                    }\r\n                };\r\n\r\n                this._selectAction.setupElementForAccessibility(element);\r\n\r\n                if (this._selectAction.isEffectivelyEnabled()) {\r\n                    element.classList.add(hostConfig.makeCssClassName(\"ac-selectable\"));\r\n                }\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (processChildren) {\r\n            for (let i = 0; i < this.getItemCount(); i++) {\r\n                this.getItemAt(i).updateLayout();\r\n            }\r\n        }\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            result.push(...this.getItemAt(i).getAllInputs(processActions));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result = super.getAllActions();\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            result.push(...this.getItemAt(i).getAllActions());\r\n        }\r\n\r\n        if (this._selectAction) {\r\n            result.push(this._selectAction);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            result.push(...this.getItemAt(i).getResourceInformation());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getElementById(id: string): CardElement | undefined {\r\n        let result = super.getElementById(id);\r\n\r\n        if (!result) {\r\n            for (let i = 0; i < this.getItemCount(); i++) {\r\n                result = this.getItemAt(i).getElementById(id);\r\n\r\n                if (result) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    findDOMNodeOwner(node: Node): CardObject | undefined {\r\n        let target: CardObject | undefined = undefined;\r\n\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            // recur through child elements\r\n            target = this.getItemAt(i).findDOMNodeOwner(node);\r\n\r\n            if (target) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n        // If not found in children, check the actions\r\n        for (let i = 0; i < this.getActionCount(); i++) {\r\n            target = this.getActionAt(i)?.findDOMNodeOwner(node);\r\n\r\n            if (target) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n        // if not found in children or actions, defer to parent implementation\r\n        return super.findDOMNodeOwner(node);\r\n    }\r\n}\r\n\r\nexport class ImageSet extends CardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly imagesProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_0,\r\n        \"images\",\r\n        Image,\r\n        (sender: SerializableObject, item: Image) => {\r\n            item.setParent(<CardElement>sender);\r\n        }\r\n    );\r\n    static readonly imageSizeProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"imageSize\",\r\n        Enums.ImageSize,\r\n        Enums.ImageSize.Medium\r\n    );\r\n\r\n    @property(ImageSet.imagesProperty)\r\n    private _images: Image[] = [];\r\n\r\n    @property(ImageSet.imageSizeProperty)\r\n    imageSize: Enums.ImageSize = Enums.ImageSize.Medium;\r\n\r\n    //#endregion\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let element: HTMLElement | undefined = undefined;\r\n\r\n        if (this._images.length > 0) {\r\n            element = document.createElement(\"div\");\r\n            element.style.display = \"flex\";\r\n            element.style.flexWrap = \"wrap\";\r\n\r\n            for (const image of this._images) {\r\n                switch (this.imageSize) {\r\n                    case Enums.ImageSize.Small:\r\n                        image.size = Enums.Size.Small;\r\n                        break;\r\n                    case Enums.ImageSize.Large:\r\n                        image.size = Enums.Size.Large;\r\n                        break;\r\n                    default:\r\n                        image.size = Enums.Size.Medium;\r\n                        break;\r\n                }\r\n\r\n                image.maxHeight = this.hostConfig.imageSet.maxImageHeight;\r\n\r\n                const renderedImage = image.render();\r\n\r\n                if (renderedImage) {\r\n                    renderedImage.style.display = \"inline-flex\";\r\n                    renderedImage.style.margin = \"0px\";\r\n                    renderedImage.style.marginRight = \"10px\";\r\n\r\n                    Utils.appendChild(element, renderedImage);\r\n                }\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._images.length;\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this._images[index];\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        return this._images && this._images.length > 0 ? this._images[0] : undefined;\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        return this._images && this._images.length > 0\r\n            ? this._images[this._images.length - 1]\r\n            : undefined;\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        if (item instanceof Image) {\r\n            const itemIndex = this._images.indexOf(item);\r\n\r\n            if (itemIndex >= 0) {\r\n                this._images.splice(itemIndex, 1);\r\n\r\n                item.setParent(undefined);\r\n\r\n                this.updateLayout();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ImageSet\";\r\n    }\r\n\r\n    addImage(image: Image) {\r\n        if (!image.parent) {\r\n            this._images.push(image);\r\n\r\n            image.setParent(this);\r\n        } else {\r\n            throw new Error(\"This image already belongs to another ImageSet\");\r\n        }\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;\r\n    }\r\n}\r\n\r\nexport abstract class ContentSource extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly mimeTypeProperty = new StringProperty(Versions.v1_1, \"mimeType\");\r\n    static readonly urlProperty = new StringProperty(Versions.v1_1, \"url\");\r\n\r\n    @property(ContentSource.mimeTypeProperty)\r\n    mimeType?: string;\r\n\r\n    @property(ContentSource.urlProperty)\r\n    url?: string;\r\n\r\n    //#endregion\r\n\r\n    constructor(url?: string, mimeType?: string) {\r\n        super();\r\n\r\n        this.url = url;\r\n        this.mimeType = mimeType;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return this.mimeType && this.url ? true : false;\r\n    }\r\n}\r\n\r\nexport class CaptionSource extends ContentSource {\r\n    //#region Schema\r\n\r\n    static readonly labelProperty = new StringProperty(Versions.v1_6, \"label\");\r\n\r\n    @property(CaptionSource.labelProperty)\r\n    label?: string;\r\n\r\n    //#endregion\r\n\r\n    constructor(url?: string, mimeType?: string, label?: string) {\r\n        super(url, mimeType);\r\n\r\n        this.label = label;\r\n    }\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"CaptionSource\";\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let result: HTMLTrackElement | undefined = undefined;\r\n\r\n        if (this.isValid()) {\r\n            result = document.createElement(\"track\");\r\n            result.src = this.url!;\r\n            result.kind = \"captions\";\r\n            result.label = this.label!;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class MediaSource extends ContentSource {\r\n    protected getSchemaKey(): string {\r\n        return \"MediaSource\";\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let result: HTMLSourceElement | undefined = undefined;\r\n\r\n        if (this.isValid()) {\r\n            result = document.createElement(\"source\");\r\n            result.src = this.url!;\r\n            result.type = this.mimeType!;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport abstract class MediaPlayer {\r\n    private _posterUrl?: string;\r\n\r\n    abstract canPlay(): boolean;\r\n    abstract render(): HTMLElement;\r\n    abstract fetchVideoDetails(): Promise<void>;\r\n\r\n    play() {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    get posterUrl(): string | undefined {\r\n        return this._posterUrl;\r\n    }\r\n\r\n    protected set posterUrl(value: string | undefined) {\r\n        this._posterUrl = value;\r\n    }\r\n\r\n    get selectedMediaType(): string | undefined {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class HTML5MediaPlayer extends MediaPlayer {\r\n    private _selectedMediaType?: string;\r\n    private _selectedSources: MediaSource[] = [];\r\n    private _captionSources: CaptionSource[] = [];\r\n    private _mediaElement?: HTMLMediaElement;\r\n\r\n    private processSources() {\r\n        this._selectedSources = [];\r\n        this._captionSources = [];\r\n        this._selectedMediaType = undefined;\r\n\r\n        for (const source of this.owner.sources) {\r\n            const mimeComponents = source.mimeType ? source.mimeType.split(\"/\") : [];\r\n\r\n            if (mimeComponents.length === 2) {\r\n                if (!this._selectedMediaType) {\r\n                    const index = HTML5MediaPlayer.supportedMediaTypes.indexOf(mimeComponents[0]);\r\n\r\n                    if (index >= 0) {\r\n                        this._selectedMediaType = HTML5MediaPlayer.supportedMediaTypes[index];\r\n                    }\r\n                }\r\n                if (mimeComponents[0] === this._selectedMediaType) {\r\n                    this._selectedSources.push(source);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._captionSources.push(...this.owner.captionSources);\r\n    }\r\n\r\n    static readonly supportedMediaTypes = [\"audio\", \"video\"];\r\n\r\n    constructor(readonly owner: Media) {\r\n        super();\r\n\r\n        this.processSources();\r\n    }\r\n\r\n    canPlay(): boolean {\r\n        return this._selectedSources.length > 0;\r\n    }\r\n\r\n    async fetchVideoDetails() {\r\n        // Nothing to fetch for the HTML5 media player\r\n    }\r\n\r\n    render(): HTMLElement {\r\n        if (this._selectedMediaType === \"video\") {\r\n            this._mediaElement = document.createElement(\"video\");\r\n        } else {\r\n            this._mediaElement = document.createElement(\"audio\");\r\n        }\r\n\r\n        this._mediaElement.setAttribute(\r\n            \"aria-label\",\r\n            this.owner.altText ? this.owner.altText : Strings.defaults.mediaPlayerAriaLabel()\r\n        );\r\n        this._mediaElement.setAttribute(\"webkit-playsinline\", \"\");\r\n        this._mediaElement.setAttribute(\"playsinline\", \"\");\r\n        // We enable crossorigin for cases where the caption file has a different domain than\r\n        // the video file. If the caption file lives in a different domain than the video file\r\n        // and crossorigin is not set, then the caption file will fail to load.\r\n        this._mediaElement.setAttribute(\"crossorigin\", \"\");\r\n        this._mediaElement.autoplay = true;\r\n        this._mediaElement.controls = true;\r\n\r\n        if (Utils.isMobileOS()) {\r\n            this._mediaElement.muted = true;\r\n        }\r\n\r\n        this._mediaElement.preload = \"none\";\r\n        this._mediaElement.style.width = \"100%\";\r\n\r\n        for (const source of this.owner.sources) {\r\n            const renderedSource = source.render();\r\n\r\n            Utils.appendChild(this._mediaElement, renderedSource);\r\n        }\r\n\r\n        for (const captionSource of this.owner.captionSources) {\r\n            if (captionSource.mimeType == \"vtt\") {\r\n                const renderedCaptionSource = captionSource.render();\r\n\r\n                Utils.appendChild(this._mediaElement, renderedCaptionSource);\r\n            }\r\n        }\r\n\r\n        return this._mediaElement;\r\n    }\r\n\r\n    play() {\r\n        if (this._mediaElement) {\r\n            this._mediaElement.play();\r\n        }\r\n    }\r\n\r\n    get selectedMediaType(): string | undefined {\r\n        return this._selectedMediaType;\r\n    }\r\n}\r\n\r\nexport abstract class CustomMediaPlayer extends MediaPlayer {\r\n    constructor(matches: RegExpExecArray) {\r\n        super();\r\n    }\r\n}\r\n\r\nexport abstract class IFrameMediaMediaPlayer extends CustomMediaPlayer {\r\n    private _videoId?: string;\r\n\r\n    constructor(matches: RegExpExecArray, readonly iFrameTitle?: string) {\r\n        super(matches);\r\n\r\n        if (matches.length >= 2) {\r\n            this._videoId = matches[1];\r\n        }\r\n    }\r\n\r\n    abstract getEmbedVideoUrl(): string;\r\n\r\n    canPlay(): boolean {\r\n        return this._videoId !== undefined;\r\n    }\r\n\r\n    render(): HTMLElement {\r\n        let container = document.createElement(\"div\");\r\n        container.style.position = \"relative\";\r\n        container.style.width = \"100%\";\r\n        container.style.height = \"0\";\r\n        container.style.paddingBottom = \"56.25%\";\r\n\r\n        let iFrame = document.createElement(\"iframe\");\r\n        iFrame.style.position = \"absolute\";\r\n        iFrame.style.top = \"0\";\r\n        iFrame.style.left = \"0\";\r\n        iFrame.style.width = \"100%\";\r\n        iFrame.style.height = \"100%\";\r\n        iFrame.src = this.getEmbedVideoUrl();\r\n        iFrame.frameBorder = \"0\";\r\n\r\n        if (this.iFrameTitle) {\r\n            iFrame.title = this.iFrameTitle;\r\n        }\r\n\r\n        iFrame.allow =\r\n            \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\";\r\n        iFrame.allowFullscreen = true;\r\n\r\n        container.appendChild(iFrame);\r\n\r\n        return container;\r\n    }\r\n\r\n    get videoId(): string | undefined {\r\n        return this._videoId;\r\n    }\r\n}\r\n\r\nexport class VimeoPlayer extends IFrameMediaMediaPlayer {\r\n    async fetchVideoDetails(): Promise<void> {\r\n        const oEmbedUrl = `https://vimeo.com/api/oembed.json?url=${this.getEmbedVideoUrl()}`;\r\n\r\n        let response = await fetch(oEmbedUrl);\r\n\r\n        if (response.ok) {\r\n            let json = await response.json();\r\n\r\n            this.posterUrl = json[\"thumbnail_url\"];\r\n        }\r\n    }\r\n\r\n    getEmbedVideoUrl(): string {\r\n        return `https://player.vimeo.com/video/${this.videoId}?autoplay=1`;\r\n    }\r\n}\r\n\r\nexport class DailymotionPlayer extends IFrameMediaMediaPlayer {\r\n    async fetchVideoDetails(): Promise<void> {\r\n        const apiUrl = `https://api.dailymotion.com/video/${this.videoId}?fields=thumbnail_720_url`;\r\n\r\n        let response = await fetch(apiUrl);\r\n\r\n        if (response.ok) {\r\n            let json = await response.json();\r\n\r\n            this.posterUrl = json[\"thumbnail_720_url\"];\r\n        }\r\n    }\r\n\r\n    getEmbedVideoUrl(): string {\r\n        return `https://www.dailymotion.com/embed/video/${this.videoId}?autoplay=1`;\r\n    }\r\n}\r\n\r\nexport class YouTubePlayer extends IFrameMediaMediaPlayer {\r\n    private _startTimeIndex?: number;\r\n\r\n    constructor(matches: RegExpExecArray, readonly iFrameTitle?: string) {\r\n        super(matches, iFrameTitle);\r\n\r\n        if (matches.length >= 3 && matches[2] !== undefined) {\r\n            this._startTimeIndex = parseInt(matches[2]);\r\n        }\r\n    }\r\n\r\n    async fetchVideoDetails(): Promise<void> {\r\n        this.posterUrl = this.videoId\r\n            ? `https://img.youtube.com/vi/${this.videoId}/maxresdefault.jpg`\r\n            : undefined;\r\n    }\r\n\r\n    getEmbedVideoUrl(): string {\r\n        let url = `https://www.youtube.com/embed/${this.videoId}?autoplay=1`;\r\n\r\n        if (this._startTimeIndex !== undefined) {\r\n            url += `&start=${this._startTimeIndex}`;\r\n        }\r\n\r\n        return url;\r\n    }\r\n}\r\n\r\nexport interface ICustomMediaPlayer {\r\n    urlPatterns: RegExp[];\r\n    createMediaPlayer: (matches: RegExpExecArray) => CustomMediaPlayer;\r\n}\r\n\r\nexport class Media extends CardElement {\r\n    static customMediaPlayers: ICustomMediaPlayer[] = [\r\n        {\r\n            urlPatterns: [\r\n                /^(?:https?:\\/\\/)?(?:www.)?youtube.com\\/watch\\?(?=.*v=([\\w\\d-_]+))(?=(?:.*t=(\\d+))?).*/gi,\r\n                /^(?:https?:\\/\\/)?youtu.be\\/([\\w\\d-_]+)(?:\\?t=(\\d+))?/gi\r\n            ],\r\n            createMediaPlayer: (matches) =>\r\n                new YouTubePlayer(matches, Strings.defaults.youTubeVideoPlayer())\r\n        },\r\n        {\r\n            urlPatterns: [/^(?:https?:\\/\\/)?vimeo.com\\/([\\w\\d-_]+).*/gi],\r\n            createMediaPlayer: (matches) =>\r\n                new VimeoPlayer(matches, Strings.defaults.vimeoVideoPlayer())\r\n        },\r\n        {\r\n            urlPatterns: [/^(?:https?:\\/\\/)?(?:www.)?dailymotion.com\\/video\\/([\\w\\d-_]+).*/gi],\r\n            createMediaPlayer: (matches) =>\r\n                new DailymotionPlayer(matches, Strings.defaults.dailymotionVideoPlayer())\r\n        }\r\n    ];\r\n\r\n    //#region Schema\r\n\r\n    static readonly sourcesProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_1,\r\n        \"sources\",\r\n        MediaSource\r\n    );\r\n    static readonly captionSourcesProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_6,\r\n        \"captionSources\",\r\n        CaptionSource\r\n    );\r\n    static readonly posterProperty = new StringProperty(Versions.v1_1, \"poster\");\r\n    static readonly altTextProperty = new StringProperty(Versions.v1_1, \"altText\");\r\n\r\n    @property(Media.sourcesProperty)\r\n    sources: MediaSource[] = [];\r\n\r\n    @property(Media.captionSourcesProperty)\r\n    captionSources: CaptionSource[] = [];\r\n\r\n    @property(Media.posterProperty)\r\n    poster?: string;\r\n\r\n    @property(Media.altTextProperty)\r\n    altText?: string;\r\n\r\n    //#endregion\r\n\r\n    private _mediaPlayer: MediaPlayer;\r\n\r\n    private createMediaPlayer(): MediaPlayer {\r\n        for (let provider of Media.customMediaPlayers) {\r\n            for (let source of this.sources) {\r\n                if (source.url) {\r\n                    for (let pattern of provider.urlPatterns) {\r\n                        let matches = pattern.exec(source.url);\r\n\r\n                        if (matches !== null) {\r\n                            return provider.createMediaPlayer(matches);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new HTML5MediaPlayer(this);\r\n    }\r\n\r\n    private handlePlayButtonInvoke(event: UIEvent): void {\r\n        if (this.hostConfig.media.allowInlinePlayback) {\r\n            event.preventDefault();\r\n            event.cancelBubble = true;\r\n\r\n            if (this.renderedElement) {\r\n                const mediaPlayerElement = this._mediaPlayer.render();\r\n                clearElement(this.renderedElement);\r\n                this.renderedElement.appendChild(mediaPlayerElement);\r\n\r\n                this._mediaPlayer.play();\r\n\r\n                mediaPlayerElement.focus();\r\n            }\r\n        } else {\r\n            if (Media.onPlay) {\r\n                event.preventDefault();\r\n                event.cancelBubble = true;\r\n\r\n                Media.onPlay(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async displayPoster() {\r\n        if (this.renderedElement) {\r\n            const playButtonArrowWidth = 12;\r\n            const playButtonArrowHeight = 15;\r\n\r\n            const posterRootElement = document.createElement(\"div\");\r\n            posterRootElement.className = this.hostConfig.makeCssClassName(\"ac-media-poster\");\r\n            posterRootElement.setAttribute(\"role\", \"contentinfo\");\r\n            posterRootElement.setAttribute(\r\n                \"aria-label\",\r\n                this.altText ? this.altText : Strings.defaults.mediaPlayerAriaLabel()\r\n            );\r\n            posterRootElement.style.position = \"relative\";\r\n            posterRootElement.style.display = \"flex\";\r\n\r\n            let posterUrl = this.poster ? this.poster : this._mediaPlayer.posterUrl;\r\n\r\n            if (!posterUrl) {\r\n                posterUrl = this.hostConfig.media.defaultPoster;\r\n            }\r\n\r\n            if (posterUrl) {\r\n                const posterImageElement = document.createElement(\"img\");\r\n                posterImageElement.style.width = \"100%\";\r\n                posterImageElement.style.height = \"100%\";\r\n                posterImageElement.setAttribute(\"role\", \"presentation\");\r\n\r\n                posterImageElement.onerror = (_e: Event) => {\r\n                    if (posterImageElement.parentNode) {\r\n                        posterImageElement.parentNode.removeChild(posterImageElement);\r\n                    }\r\n\r\n                    posterRootElement.classList.add(\"empty\");\r\n                    posterRootElement.style.minHeight = \"150px\";\r\n                };\r\n\r\n                posterImageElement.src = posterUrl;\r\n\r\n                posterRootElement.appendChild(posterImageElement);\r\n            } else {\r\n                posterRootElement.classList.add(\"empty\");\r\n                posterRootElement.style.minHeight = \"150px\";\r\n            }\r\n\r\n            if (this.hostConfig.supportsInteractivity && this._mediaPlayer.canPlay()) {\r\n                const playButtonOuterElement = document.createElement(\"div\");\r\n                playButtonOuterElement.tabIndex = 0;\r\n                playButtonOuterElement.setAttribute(\"role\", \"button\");\r\n                playButtonOuterElement.setAttribute(\r\n                    \"aria-label\",\r\n                    Strings.defaults.mediaPlayerPlayMedia()\r\n                );\r\n                playButtonOuterElement.className =\r\n                    this.hostConfig.makeCssClassName(\"ac-media-playButton\");\r\n                playButtonOuterElement.style.display = \"flex\";\r\n                playButtonOuterElement.style.alignItems = \"center\";\r\n                playButtonOuterElement.style.justifyContent = \"center\";\r\n                playButtonOuterElement.onclick = (e) => {\r\n                    this.handlePlayButtonInvoke(e);\r\n                };\r\n\r\n                playButtonOuterElement.onkeypress = (e: KeyboardEvent) => {\r\n                    if (e.code === \"Enter\" || e.code === \"Space\") {\r\n                        // space or enter\r\n                        this.handlePlayButtonInvoke(e);\r\n                    }\r\n                };\r\n\r\n                const playButtonInnerElement = document.createElement(\"div\");\r\n                playButtonInnerElement.className = this.hostConfig.makeCssClassName(\r\n                    \"ac-media-playButton-arrow\"\r\n                );\r\n                playButtonInnerElement.style.width = playButtonArrowWidth + \"px\";\r\n                playButtonInnerElement.style.height = playButtonArrowHeight + \"px\";\r\n                playButtonInnerElement.style.borderTopWidth = playButtonArrowHeight / 2 + \"px\";\r\n                playButtonInnerElement.style.borderBottomWidth = playButtonArrowHeight / 2 + \"px\";\r\n                playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + \"px\";\r\n                playButtonInnerElement.style.borderRightWidth = \"0\";\r\n                playButtonInnerElement.style.borderStyle = \"solid\";\r\n                playButtonInnerElement.style.borderTopColor = \"transparent\";\r\n                playButtonInnerElement.style.borderRightColor = \"transparent\";\r\n                playButtonInnerElement.style.borderBottomColor = \"transparent\";\r\n                playButtonInnerElement.style.transform =\r\n                    \"translate(\" + playButtonArrowWidth / 10 + \"px,0px)\";\r\n\r\n                playButtonOuterElement.appendChild(playButtonInnerElement);\r\n\r\n                const playButtonContainer = document.createElement(\"div\");\r\n                playButtonContainer.style.position = \"absolute\";\r\n                playButtonContainer.style.left = \"0\";\r\n                playButtonContainer.style.top = \"0\";\r\n                playButtonContainer.style.width = \"100%\";\r\n                playButtonContainer.style.height = \"100%\";\r\n                playButtonContainer.style.display = \"flex\";\r\n                playButtonContainer.style.justifyContent = \"center\";\r\n                playButtonContainer.style.alignItems = \"center\";\r\n\r\n                playButtonContainer.appendChild(playButtonOuterElement);\r\n                posterRootElement.appendChild(playButtonContainer);\r\n            }\r\n\r\n            clearElement(this.renderedElement);\r\n            this.renderedElement.appendChild(posterRootElement);\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        const element = <HTMLElement>document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-media\");\r\n\r\n        return element;\r\n    }\r\n\r\n    static onPlay?: (sender: Media) => void;\r\n\r\n    render(): HTMLElement | undefined {\r\n        let result = super.render();\r\n\r\n        if (result) {\r\n            this._mediaPlayer = this.createMediaPlayer();\r\n\r\n            this._mediaPlayer.fetchVideoDetails().then(() => this.displayPoster());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    releaseDOMResources() {\r\n        super.releaseDOMResources();\r\n\r\n        this.displayPoster();\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Media\";\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        const result: IResourceInformation[] = [];\r\n\r\n        if (this._mediaPlayer) {\r\n            const posterUrl = this.poster ? this.poster : this.hostConfig.media.defaultPoster;\r\n\r\n            if (posterUrl) {\r\n                result.push({ url: posterUrl, mimeType: \"image\" });\r\n            }\r\n        }\r\n\r\n        for (const mediaSource of this.sources) {\r\n            if (mediaSource.isValid()) {\r\n                result.push({\r\n                    /* eslint-disable @typescript-eslint/no-unnecessary-type-assertion -- `mediaSource.url` is of type `string | undefined`, but is validated by `isValid()` call */\r\n                    url: mediaSource.url!,\r\n                    mimeType: mediaSource.mimeType!\r\n                    /* eslint-enable @typescript-eslint/no-unnecessary-type-assertion */\r\n                });\r\n            }\r\n        }\r\n\r\n        for (const captionSource of this.captionSources) {\r\n            if (captionSource.isValid()) {\r\n                result.push({\r\n                    /* eslint-disable @typescript-eslint/no-unnecessary-type-assertion -- `captionSource.url` is of type `string | undefined`, but is validated by `isValid()` call */\r\n                    url: captionSource.url!,\r\n                    mimeType: captionSource.mimeType!\r\n                    /* eslint-enable @typescript-eslint/no-unnecessary-type-assertion */\r\n                });\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get selectedMediaType(): string | undefined {\r\n        return this._mediaPlayer.selectedMediaType;\r\n    }\r\n}\r\n\r\nexport abstract class Input extends CardElement implements IInput {\r\n    //#region Schema\r\n\r\n    static readonly labelProperty = new StringProperty(Versions.v1_3, \"label\", true);\r\n    static readonly isRequiredProperty = new BoolProperty(Versions.v1_3, \"isRequired\", false);\r\n    static readonly errorMessageProperty = new StringProperty(Versions.v1_3, \"errorMessage\", true);\r\n\r\n    @property(Input.labelProperty)\r\n    label?: string;\r\n\r\n    @property(Input.isRequiredProperty)\r\n    isRequired: boolean;\r\n\r\n    @property(Input.errorMessageProperty)\r\n    errorMessage?: string;\r\n\r\n    //#endregion\r\n\r\n    private _outerContainerElement: HTMLElement;\r\n    private _inputControlContainerElement: HTMLElement;\r\n    private _renderedErrorMessageElement?: HTMLElement;\r\n    private _renderedLabelElement?: HTMLElement;\r\n    private _renderedInputControlElement?: HTMLElement;\r\n    private _oldValue: any;\r\n\r\n    protected getAllLabelIds(): string[] {\r\n        const labelIds: string[] = [];\r\n\r\n        if (this.labelledBy) {\r\n            labelIds.push(this.labelledBy);\r\n        }\r\n\r\n        if (this._renderedLabelElement) {\r\n            labelIds.push(this._renderedLabelElement.id);\r\n        }\r\n\r\n        if (this._renderedErrorMessageElement) {\r\n            labelIds.push(this._renderedErrorMessageElement.id);\r\n        }\r\n\r\n        return labelIds;\r\n    }\r\n\r\n    protected updateInputControlAriaLabelledBy() {\r\n        if (this._renderedInputControlElement) {\r\n            const labelIds: string[] = this.getAllLabelIds();\r\n\r\n            if (labelIds.length > 0) {\r\n                this._renderedInputControlElement.setAttribute(\r\n                    \"aria-labelledby\",\r\n                    labelIds.join(\" \")\r\n                );\r\n            } else {\r\n                this._renderedInputControlElement.removeAttribute(\"aria-labelledby\");\r\n            }\r\n        }\r\n    }\r\n\r\n    protected get isNullable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get renderedInputControlElement(): HTMLElement | undefined {\r\n        return this._renderedInputControlElement;\r\n    }\r\n\r\n    protected get inputControlContainerElement(): HTMLElement {\r\n        return this._inputControlContainerElement;\r\n    }\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        const hostConfig = this.hostConfig;\r\n\r\n        this._outerContainerElement = document.createElement(\"div\");\r\n        this._outerContainerElement.style.display = \"flex\";\r\n        this._outerContainerElement.style.flexDirection = \"column\";\r\n\r\n        const renderedInputControlId = Utils.generateUniqueId();\r\n\r\n        if (this.label) {\r\n            const labelRichTextBlock = new RichTextBlock();\r\n            labelRichTextBlock.setParent(this);\r\n            labelRichTextBlock.forElementId = renderedInputControlId;\r\n\r\n            const labelInline = new TextRun(this.label);\r\n            labelRichTextBlock.addInline(labelInline);\r\n\r\n            if (this.isRequired) {\r\n                labelInline.init(hostConfig.inputs.label.requiredInputs);\r\n\r\n                const isRequiredCueInline = new TextRun(\r\n                    hostConfig.inputs.label.requiredInputs.suffix\r\n                );\r\n                isRequiredCueInline.color = hostConfig.inputs.label.requiredInputs.suffixColor;\r\n                isRequiredCueInline.ariaHidden = true;\r\n\r\n                labelRichTextBlock.addInline(isRequiredCueInline);\r\n            } else {\r\n                labelInline.init(hostConfig.inputs.label.optionalInputs);\r\n            }\r\n\r\n            this._renderedLabelElement = labelRichTextBlock.render();\r\n\r\n            if (this._renderedLabelElement) {\r\n                this._renderedLabelElement.id = Utils.generateUniqueId();\r\n                this._renderedLabelElement.style.marginBottom =\r\n                    hostConfig.getEffectiveSpacing(hostConfig.inputs.label.inputSpacing) + \"px\";\r\n\r\n                this._outerContainerElement.appendChild(this._renderedLabelElement);\r\n            }\r\n        }\r\n\r\n        this._inputControlContainerElement = document.createElement(\"div\");\r\n        this._inputControlContainerElement.className =\r\n            hostConfig.makeCssClassName(\"ac-input-container\");\r\n        this._inputControlContainerElement.style.display = \"flex\";\r\n\r\n        if (this.height === \"stretch\") {\r\n            this._inputControlContainerElement.style.alignItems = \"stretch\";\r\n            this._inputControlContainerElement.style.flex = \"1 1 auto\";\r\n        }\r\n\r\n        this._renderedInputControlElement = this.internalRender();\r\n\r\n        if (this._renderedInputControlElement) {\r\n            this._renderedInputControlElement.id = renderedInputControlId;\r\n            this._renderedInputControlElement.style.minWidth = \"0px\";\r\n\r\n            if (this.isNullable && this.isRequired) {\r\n                this._renderedInputControlElement.setAttribute(\"aria-required\", \"true\");\r\n                this._renderedInputControlElement.classList.add(\r\n                    hostConfig.makeCssClassName(\"ac-input-required\")\r\n                );\r\n            }\r\n\r\n            this._inputControlContainerElement.appendChild(this._renderedInputControlElement);\r\n            this._outerContainerElement.appendChild(this._inputControlContainerElement);\r\n\r\n            this.updateInputControlAriaLabelledBy();\r\n\r\n            return this._outerContainerElement;\r\n        }\r\n\r\n        this.resetDirtyState();\r\n\r\n        return undefined;\r\n    }\r\n\r\n    protected valueChanged() {\r\n        this.getRootElement().updateActionsEnabledState();\r\n\r\n        if (this.isValid()) {\r\n            this.resetValidationFailureCue();\r\n        }\r\n\r\n        if (this.onValueChanged) {\r\n            this.onValueChanged(this);\r\n        }\r\n\r\n        raiseInputValueChangedEvent(this);\r\n    }\r\n\r\n    protected resetValidationFailureCue() {\r\n        if (this.renderedInputControlElement) {\r\n            this.renderedInputControlElement.classList.remove(\r\n                this.hostConfig.makeCssClassName(\"ac-input-validation-failed\")\r\n            );\r\n\r\n            this.updateInputControlAriaLabelledBy();\r\n\r\n            if (this._renderedErrorMessageElement) {\r\n                this._outerContainerElement.removeChild(this._renderedErrorMessageElement);\r\n\r\n                this._renderedErrorMessageElement = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected showValidationErrorMessage() {\r\n        if (\r\n            this.renderedElement &&\r\n            this.errorMessage &&\r\n            GlobalSettings.displayInputValidationErrors\r\n        ) {\r\n            const errorMessageTextBlock = new TextBlock();\r\n            errorMessageTextBlock.setParent(this);\r\n            errorMessageTextBlock.text = this.errorMessage;\r\n            errorMessageTextBlock.wrap = true;\r\n            errorMessageTextBlock.init(this.hostConfig.inputs.errorMessage);\r\n\r\n            this._renderedErrorMessageElement = errorMessageTextBlock.render();\r\n\r\n            if (this._renderedErrorMessageElement) {\r\n                this._renderedErrorMessageElement.id = Utils.generateUniqueId();\r\n                this._outerContainerElement.appendChild(this._renderedErrorMessageElement);\r\n\r\n                this.updateInputControlAriaLabelledBy();\r\n            }\r\n        }\r\n    }\r\n\r\n    onValueChanged: (sender: Input) => void;\r\n\r\n    labelledBy?: string;\r\n\r\n    abstract isSet(): boolean;\r\n\r\n    focus() {\r\n        if (this._renderedInputControlElement) {\r\n            this._renderedInputControlElement.focus();\r\n        }\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return true;\r\n    }\r\n\r\n    isDirty(): boolean {\r\n        return this.value !== this._oldValue;\r\n    }\r\n\r\n    resetDirtyState() {\r\n        this._oldValue = this.value;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.id) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.inputsMustHaveUniqueId()\r\n            );\r\n        }\r\n\r\n        if (this.isRequired) {\r\n            if (!this.label) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.RequiredInputsShouldHaveLabel,\r\n                    \"Required inputs should have a label\"\r\n                );\r\n            }\r\n\r\n            if (!this.errorMessage) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.RequiredInputsShouldHaveErrorMessage,\r\n                    \"Required inputs should have an error message\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    validateValue(): boolean {\r\n        this.resetValidationFailureCue();\r\n\r\n        const result = this.isRequired ? this.isSet() && this.isValid() : this.isValid();\r\n\r\n        if (!result && this.renderedInputControlElement) {\r\n            this.renderedInputControlElement.classList.add(\r\n                this.hostConfig.makeCssClassName(\"ac-input-validation-failed\")\r\n            );\r\n\r\n            this.showValidationErrorMessage();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return [this];\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        let result = super.render();\r\n\r\n        this.resetDirtyState();\r\n\r\n        return result;\r\n    }\r\n\r\n    abstract get value(): any;\r\n\r\n    get isInteractive(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class TextInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly maxLengthProperty = new NumProperty(Versions.v1_0, \"maxLength\");\r\n    static readonly isMultilineProperty = new BoolProperty(Versions.v1_0, \"isMultiline\", false);\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly styleProperty = new EnumProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        Enums.InputTextStyle,\r\n        Enums.InputTextStyle.Text,\r\n        [\r\n            { value: Enums.InputTextStyle.Text },\r\n            { value: Enums.InputTextStyle.Tel },\r\n            { value: Enums.InputTextStyle.Url },\r\n            { value: Enums.InputTextStyle.Email },\r\n            { value: Enums.InputTextStyle.Password, targetVersion: Versions.v1_5 }\r\n        ]\r\n    );\r\n    static readonly inlineActionProperty = new ActionProperty(Versions.v1_0, \"inlineAction\", [\r\n        \"Action.ShowCard\"\r\n    ]);\r\n    static readonly regexProperty = new StringProperty(Versions.v1_3, \"regex\", true);\r\n\r\n    @property(TextInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(TextInput.maxLengthProperty)\r\n    maxLength?: number;\r\n\r\n    @property(TextInput.isMultilineProperty)\r\n    isMultiline: boolean = false;\r\n\r\n    @property(TextInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    @property(TextInput.styleProperty)\r\n    style: Enums.InputTextStyle = Enums.InputTextStyle.Text;\r\n\r\n    @property(TextInput.inlineActionProperty)\r\n    inlineAction?: Action;\r\n\r\n    @property(TextInput.regexProperty)\r\n    regex?: string;\r\n\r\n    //#endregion\r\n\r\n    private setupInput(input: HTMLInputElement | HTMLTextAreaElement) {\r\n        input.style.flex = \"1 1 auto\";\r\n\r\n        input.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n        if (this.placeholder) {\r\n            input.placeholder = this.placeholder;\r\n            input.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        if (this.defaultValue) {\r\n            input.value = this.defaultValue;\r\n        }\r\n\r\n        if (this.maxLength && this.maxLength > 0) {\r\n            input.maxLength = this.maxLength;\r\n        }\r\n\r\n        input.oninput = () => {\r\n            this.valueChanged();\r\n        };\r\n        input.onkeypress = (e: KeyboardEvent) => {\r\n            // Ctrl+Enter pressed\r\n            if (\r\n                e.ctrlKey &&\r\n                e.code === \"Enter\" &&\r\n                this.inlineAction &&\r\n                this.inlineAction.isEffectivelyEnabled()\r\n            ) {\r\n                this.inlineAction.execute();\r\n            }\r\n        };\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        let result: HTMLInputElement | HTMLTextAreaElement;\r\n\r\n        if (this.isMultiline && this.style !== Enums.InputTextStyle.Password) {\r\n            result = document.createElement(\"textarea\");\r\n            result.className = this.hostConfig.makeCssClassName(\r\n                \"ac-input\",\r\n                \"ac-textInput\",\r\n                \"ac-multiline\"\r\n            );\r\n\r\n            if (this.height === \"stretch\") {\r\n                result.style.height = \"initial\";\r\n            }\r\n        } else {\r\n            result = document.createElement(\"input\");\r\n            result.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-textInput\");\r\n            result.type = Enums.InputTextStyle[this.style].toLowerCase();\r\n        }\r\n\r\n        this.setupInput(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    protected overrideInternalRender(): HTMLElement | undefined {\r\n        const renderedInputControl = super.overrideInternalRender();\r\n\r\n        if (this.inlineAction) {\r\n            const button = document.createElement(\"button\");\r\n            button.className = this.hostConfig.makeCssClassName(\r\n                this.inlineAction.isEffectivelyEnabled()\r\n                    ? \"ac-inlineActionButton\"\r\n                    : \"ac-inlineActionButton-disabled\"\r\n            );\r\n\r\n            button.onclick = (e) => {\r\n                if (this.inlineAction && this.inlineAction.isEffectivelyEnabled()) {\r\n                    e.preventDefault();\r\n                    e.cancelBubble = true;\r\n\r\n                    this.inlineAction.execute();\r\n                }\r\n            };\r\n\r\n            if (this.inlineAction.iconUrl) {\r\n                button.classList.add(\"iconOnly\");\r\n\r\n                const icon = document.createElement(\"img\");\r\n                icon.style.height = \"100%\";\r\n                icon.setAttribute(\"role\", \"presentation\");\r\n\r\n                // The below trick is necessary as a workaround in Chrome where the icon is initially displayed\r\n                // at its native size then resized to 100% of the button's height. This cfreates an unpleasant\r\n                // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button\r\n                // after the image has loaded and been gicven its final size. The below trick also fixes that.\r\n                icon.style.display = \"none\";\r\n                icon.onload = () => {\r\n                    icon.style.removeProperty(\"display\");\r\n                };\r\n                icon.onerror = () => {\r\n                    button.removeChild(icon);\r\n                    button.classList.remove(\"iconOnly\");\r\n                    button.classList.add(\"textOnly\");\r\n                    button.textContent =\r\n                        this.inlineAction && this.inlineAction.title\r\n                            ? this.inlineAction.title\r\n                            : Strings.defaults.inlineActionTitle();\r\n                };\r\n\r\n                icon.src = this.inlineAction.iconUrl;\r\n\r\n                button.appendChild(icon);\r\n                button.title = this.inlineAction.title\r\n                    ? this.inlineAction.title\r\n                    : Strings.defaults.inlineActionTitle();\r\n            } else {\r\n                button.classList.add(\"textOnly\");\r\n                button.textContent = this.inlineAction.title\r\n                    ? this.inlineAction.title\r\n                    : Strings.defaults.inlineActionTitle();\r\n            }\r\n\r\n            this.inlineAction.setupElementForAccessibility(button, true);\r\n\r\n            button.style.marginLeft = \"8px\";\r\n\r\n            this.inputControlContainerElement.appendChild(button);\r\n        }\r\n\r\n        return renderedInputControl;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Text\";\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result = super.getAllActions();\r\n\r\n        if (this.inlineAction) {\r\n            result.push(this.inlineAction);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getActionById(id: string) {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result && this.inlineAction) {\r\n            result = this.inlineAction.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this.value) {\r\n            return true;\r\n        }\r\n\r\n        if (this.regex) {\r\n            return new RegExp(this.regex, \"g\").test(this.value);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (this.renderedInputControlElement) {\r\n            if (this.isMultiline) {\r\n                return (<HTMLTextAreaElement>this.renderedInputControlElement).value;\r\n            } else {\r\n                return (<HTMLInputElement>this.renderedInputControlElement).value;\r\n            }\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ToggleInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueOnProperty = new StringProperty(\r\n        Versions.v1_0,\r\n        \"valueOn\",\r\n        true,\r\n        undefined,\r\n        \"true\",\r\n        (sender: SerializableObject) => {\r\n            return \"true\";\r\n        }\r\n    );\r\n    static readonly valueOffProperty = new StringProperty(\r\n        Versions.v1_0,\r\n        \"valueOff\",\r\n        true,\r\n        undefined,\r\n        \"false\",\r\n        (sender: SerializableObject) => {\r\n            return \"false\";\r\n        }\r\n    );\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\r\n\r\n    @property(ToggleInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(ToggleInput.titleProperty)\r\n    title?: string;\r\n\r\n    @property(ToggleInput.valueOnProperty)\r\n    valueOn: string = \"true\";\r\n\r\n    @property(ToggleInput.valueOffProperty)\r\n    valueOff: string = \"false\";\r\n\r\n    @property(ToggleInput.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    private _checkboxInputElement: HTMLInputElement;\r\n    private _checkboxInputLabelElement: HTMLElement | undefined;\r\n    private _oldCheckboxValue: boolean;\r\n\r\n    protected updateInputControlAriaLabelledBy() {\r\n        if (this._checkboxInputElement) {\r\n            let joinedLabelIds = this.getAllLabelIds().join(\" \");\r\n\r\n            if (this._checkboxInputLabelElement && this._checkboxInputLabelElement.id) {\r\n                joinedLabelIds += \" \" + this._checkboxInputLabelElement.id;\r\n            }\r\n\r\n            if (joinedLabelIds) {\r\n                this._checkboxInputElement.setAttribute(\"aria-labelledby\", joinedLabelIds);\r\n            } else {\r\n                this._checkboxInputElement.removeAttribute(\"aria-labelledby\");\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        const element = document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", \"ac-toggleInput\");\r\n        element.style.width = \"100%\";\r\n        element.style.display = \"flex\";\r\n        element.style.alignItems = \"center\";\r\n\r\n        this._checkboxInputElement = document.createElement(\"input\");\r\n        this._checkboxInputElement.id = Utils.generateUniqueId();\r\n        this._checkboxInputElement.type = \"checkbox\";\r\n        this._checkboxInputElement.style.display = \"inline-block\";\r\n        this._checkboxInputElement.style.verticalAlign = \"middle\";\r\n        this._checkboxInputElement.style.margin = \"0\";\r\n        this._checkboxInputElement.style.flex = \"0 0 auto\";\r\n\r\n        if (this.title) {\r\n            this._checkboxInputElement.setAttribute(\"aria-label\", this.title);\r\n        }\r\n\r\n        if (this.isRequired) {\r\n            this._checkboxInputElement.setAttribute(\"aria-required\", \"true\");\r\n        }\r\n\r\n        this._checkboxInputElement.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n        if (this.defaultValue === this.valueOn) {\r\n            this._checkboxInputElement.checked = true;\r\n        }\r\n\r\n        this._oldCheckboxValue = this._checkboxInputElement.checked;\r\n\r\n        this._checkboxInputElement.onchange = () => {\r\n            this.valueChanged();\r\n        };\r\n\r\n        Utils.appendChild(element, this._checkboxInputElement);\r\n\r\n        if (this.title || this.isDesignMode()) {\r\n            const label = new TextBlock();\r\n            label.setParent(this);\r\n            label.forElementId = this._checkboxInputElement.id;\r\n            label.hostConfig = this.hostConfig;\r\n            label.text = !this.title ? this.getJsonTypeName() : this.title;\r\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\r\n            label.wrap = this.wrap;\r\n\r\n            this._checkboxInputLabelElement = label.render();\r\n\r\n            if (this._checkboxInputLabelElement) {\r\n                this._checkboxInputLabelElement.id = Utils.generateUniqueId();\r\n                this._checkboxInputLabelElement.style.display = \"inline-block\";\r\n                this._checkboxInputLabelElement.style.flex = \"1 1 auto\";\r\n                this._checkboxInputLabelElement.style.marginLeft = \"6px\";\r\n                this._checkboxInputLabelElement.style.verticalAlign = \"middle\";\r\n\r\n                const spacerElement = document.createElement(\"div\");\r\n                spacerElement.style.width = \"6px\";\r\n\r\n                Utils.appendChild(element, spacerElement);\r\n                Utils.appendChild(element, this._checkboxInputLabelElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected get isNullable(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Toggle\";\r\n    }\r\n\r\n    focus() {\r\n        if (this._checkboxInputElement) {\r\n            this._checkboxInputElement.focus();\r\n        }\r\n    }\r\n\r\n    isSet(): boolean {\r\n        if (this.isRequired) {\r\n            return this.value === this.valueOn;\r\n        }\r\n\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isDirty(): boolean {\r\n        return this._checkboxInputElement\r\n            ? this._checkboxInputElement.checked !== this._oldCheckboxValue\r\n            : false;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (this._checkboxInputElement) {\r\n            return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Choice extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n\r\n    @property(Choice.titleProperty)\r\n    title?: string;\r\n\r\n    @property(Choice.valueProperty)\r\n    value?: string;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"Choice\";\r\n    }\r\n\r\n    constructor(title?: string, value?: string) {\r\n        super();\r\n\r\n        this.title = title;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class ChoiceSetInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly choicesProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_0,\r\n        \"choices\",\r\n        Choice\r\n    );\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_0,\r\n        \"style\",\r\n        [\r\n            { value: \"compact\" },\r\n            { value: \"expanded\" },\r\n            { value: \"filtered\", targetVersion: Versions.v1_5 }\r\n        ],\r\n        \"compact\"\r\n    );\r\n    static readonly isMultiSelectProperty = new BoolProperty(Versions.v1_0, \"isMultiSelect\", false);\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly wrapProperty = new BoolProperty(Versions.v1_2, \"wrap\", false);\r\n\r\n    @property(ChoiceSetInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(ChoiceSetInput.styleProperty)\r\n    style?: \"compact\" | \"expanded\" | \"filtered\";\r\n\r\n    get isCompact(): boolean {\r\n        return !this.style || this.style === \"compact\";\r\n    }\r\n\r\n    set isCompact(value: boolean) {\r\n        this.style = value ? undefined : \"expanded\";\r\n    }\r\n\r\n    @property(ChoiceSetInput.isMultiSelectProperty)\r\n    isMultiSelect: boolean = false;\r\n\r\n    @property(ChoiceSetInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    @property(ChoiceSetInput.wrapProperty)\r\n    wrap: boolean = false;\r\n\r\n    @property(ChoiceSetInput.choicesProperty)\r\n    choices: Choice[] = [];\r\n\r\n    //#endregion\r\n\r\n    private static _uniqueCategoryCounter = 0;\r\n\r\n    private static getUniqueCategoryName(): string {\r\n        const uniqueCategoryName = \"__ac-category\" + ChoiceSetInput._uniqueCategoryCounter;\r\n\r\n        ChoiceSetInput._uniqueCategoryCounter++;\r\n\r\n        return uniqueCategoryName;\r\n    }\r\n\r\n    private _uniqueCategoryName: string;\r\n    private _selectElement: HTMLSelectElement | undefined;\r\n    private _textInput: HTMLInputElement | undefined;\r\n    private _toggleInputs: HTMLInputElement[] | undefined;\r\n    private _labels: Array<HTMLElement | undefined>;\r\n\r\n    // Make sure `aria-current` is applied to the currently-selected item\r\n    private internalApplyAriaCurrent(): void {\r\n        if (this._selectElement) {\r\n            const options = this._selectElement.options;\r\n\r\n            if (options) {\r\n                for (const option of Array.from(options)) {\r\n                    if (option.selected) {\r\n                        option.setAttribute(\"aria-current\", \"true\");\r\n                    } else {\r\n                        option.removeAttribute(\"aria-current\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private renderCompoundInput(\r\n        cssClassName: string,\r\n        type: \"checkbox\" | \"radio\",\r\n        defaultValues: string[] | undefined\r\n    ): HTMLElement {\r\n        const element = document.createElement(\"div\");\r\n        element.className = this.hostConfig.makeCssClassName(\"ac-input\", cssClassName);\r\n        element.style.width = \"100%\";\r\n\r\n        element.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n        this._toggleInputs = [];\r\n        this._labels = [];\r\n\r\n        for (const choice of this.choices) {\r\n            const input = document.createElement(\"input\");\r\n            input.id = Utils.generateUniqueId();\r\n            input.type = type;\r\n            input.style.margin = \"0\";\r\n            input.style.display = \"inline-block\";\r\n            input.style.verticalAlign = \"middle\";\r\n            input.style.flex = \"0 0 auto\";\r\n            input.name = this.id ? this.id : this._uniqueCategoryName;\r\n\r\n            if (this.isRequired) {\r\n                input.setAttribute(\"aria-required\", \"true\");\r\n            }\r\n\r\n            input.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n            if (choice.value) {\r\n                input.value = choice.value;\r\n            }\r\n\r\n            if (choice.title) {\r\n                input.setAttribute(\"aria-label\", choice.title);\r\n            }\r\n\r\n            if (defaultValues && choice.value) {\r\n                if (defaultValues.indexOf(choice.value) >= 0) {\r\n                    input.checked = true;\r\n                }\r\n            }\r\n\r\n            input.onchange = () => {\r\n                this.valueChanged();\r\n            };\r\n\r\n            this._toggleInputs.push(input);\r\n\r\n            const compoundInput = document.createElement(\"div\");\r\n            compoundInput.style.display = \"flex\";\r\n            compoundInput.style.alignItems = \"center\";\r\n\r\n            Utils.appendChild(compoundInput, input);\r\n\r\n            const label = new TextBlock();\r\n            label.setParent(this);\r\n            label.forElementId = input.id;\r\n            label.hostConfig = this.hostConfig;\r\n            label.text = choice.title ? choice.title : \"Choice \" + this._toggleInputs.length;\r\n            label.useMarkdown = GlobalSettings.useMarkdownInRadioButtonAndCheckbox;\r\n            label.wrap = this.wrap;\r\n\r\n            const labelElement = label.render();\r\n\r\n            this._labels.push(labelElement);\r\n\r\n            if (labelElement) {\r\n                labelElement.id = Utils.generateUniqueId();\r\n                labelElement.style.display = \"inline-block\";\r\n                labelElement.style.flex = \"1 1 auto\";\r\n                labelElement.style.marginLeft = \"6px\";\r\n                labelElement.style.verticalAlign = \"middle\";\r\n\r\n                const spacerElement = document.createElement(\"div\");\r\n                spacerElement.style.width = \"6px\";\r\n\r\n                Utils.appendChild(compoundInput, spacerElement);\r\n                Utils.appendChild(compoundInput, labelElement);\r\n            }\r\n\r\n            Utils.appendChild(element, compoundInput);\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected updateInputControlAriaLabelledBy() {\r\n        if (\r\n            (this.isMultiSelect || this.style === \"expanded\") &&\r\n            this._toggleInputs &&\r\n            this._labels\r\n        ) {\r\n            const labelIds: string[] = this.getAllLabelIds();\r\n\r\n            for (let i = 0; i < this._toggleInputs.length; i++) {\r\n                let joinedLabelIds = labelIds.join(\" \");\r\n                const label = this._labels[i];\r\n\r\n                if (label && label.id) {\r\n                    joinedLabelIds += \" \" + label.id;\r\n                }\r\n\r\n                if (joinedLabelIds) {\r\n                    this._toggleInputs[i].setAttribute(\"aria-labelledby\", joinedLabelIds);\r\n                } else {\r\n                    this._toggleInputs[i].removeAttribute(\"aria-labelledby\");\r\n                }\r\n            }\r\n        } else {\r\n            super.updateInputControlAriaLabelledBy();\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();\r\n\r\n        if (this.isMultiSelect) {\r\n            // Render as a list of toggle inputs\r\n            return this.renderCompoundInput(\r\n                \"ac-choiceSetInput-multiSelect\",\r\n                \"checkbox\",\r\n                this.defaultValue\r\n                    ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator)\r\n                    : undefined\r\n            );\r\n        } else {\r\n            if (this.style === \"expanded\") {\r\n                // Render as a series of radio buttons\r\n                return this.renderCompoundInput(\r\n                    \"ac-choiceSetInput-expanded\",\r\n                    \"radio\",\r\n                    this.defaultValue ? [this.defaultValue] : undefined\r\n                );\r\n            } else if (this.style === \"filtered\") {\r\n                // Render as a text input coupled with a datalist\r\n                const inputContainer = document.createElement(\"div\");\r\n                inputContainer.style.width = \"100%\";\r\n\r\n                this._textInput = document.createElement(\"input\");\r\n                this._textInput.className = this.hostConfig.makeCssClassName(\r\n                    \"ac-input\",\r\n                    \"ac-multichoiceInput\",\r\n                    \"ac-choiceSetInput-filtered\"\r\n                );\r\n                this._textInput.type = \"text\";\r\n                this._textInput.style.width = \"100%\";\r\n                this._textInput.oninput = () => {\r\n                    this.valueChanged();\r\n\r\n                    if (this._textInput) {\r\n                        // Remove aria-label when value is not empty so narration software doesn't\r\n                        // read the placeholder\r\n                        if (this.value) {\r\n                            this._textInput.removeAttribute(\"placeholder\");\r\n                            this._textInput.removeAttribute(\"aria-label\");\r\n                        } else if (this.placeholder) {\r\n                            this._textInput.placeholder = this.placeholder;\r\n                            this._textInput.setAttribute(\"aria-label\", this.placeholder);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                if (this.defaultValue) {\r\n                    this._textInput.value = this.defaultValue;\r\n                }\r\n\r\n                if (this.placeholder && !this._textInput.value) {\r\n                    this._textInput.placeholder = this.placeholder;\r\n                    this._textInput.setAttribute(\"aria-label\", this.placeholder);\r\n                }\r\n\r\n                this._textInput.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n                const dataList = document.createElement(\"datalist\");\r\n                dataList.id = Utils.generateUniqueId();\r\n\r\n                for (const choice of this.choices) {\r\n                    const option = document.createElement(\"option\");\r\n                    // To fix https://stackoverflow.com/questions/29882361/show-datalist-labels-but-submit-the-actual-value\r\n                    // value is mapped to choice.title other than choice.value\r\n                    if (choice.title) {\r\n                        option.value = choice.title;\r\n                        option.setAttribute(\"aria-label\", choice.title);\r\n                    }\r\n\r\n                    option.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n                    dataList.appendChild(option);\r\n                }\r\n\r\n                this._textInput.setAttribute(\"list\", dataList.id);\r\n\r\n                inputContainer.append(this._textInput, dataList);\r\n\r\n                return inputContainer;\r\n            } else {\r\n                // Render as a combo box\r\n                this._selectElement = document.createElement(\"select\");\r\n                this._selectElement.className = this.hostConfig.makeCssClassName(\r\n                    \"ac-input\",\r\n                    \"ac-multichoiceInput\",\r\n                    \"ac-choiceSetInput-compact\"\r\n                );\r\n                this._selectElement.style.width = \"100%\";\r\n\r\n                this._selectElement.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n                const placeholderOption = document.createElement(\"option\");\r\n                placeholderOption.selected = true;\r\n                placeholderOption.disabled = true;\r\n                placeholderOption.hidden = true;\r\n                placeholderOption.value = \"\";\r\n\r\n                if (this.placeholder) {\r\n                    placeholderOption.text = this.placeholder;\r\n                }\r\n\r\n                Utils.appendChild(this._selectElement, placeholderOption);\r\n\r\n                for (const choice of this.choices) {\r\n                    const option = document.createElement(\"option\");\r\n                    option.value = choice.value!;\r\n\r\n                    if (choice.title) {\r\n                        option.text = choice.title;\r\n                        option.setAttribute(\"aria-label\", choice.title);\r\n                    }\r\n\r\n                    option.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n                    if (choice.value === this.defaultValue) {\r\n                        option.selected = true;\r\n                    }\r\n\r\n                    Utils.appendChild(this._selectElement, option);\r\n                }\r\n\r\n                this._selectElement.onchange = () => {\r\n                    this.internalApplyAriaCurrent();\r\n                    this.valueChanged();\r\n                };\r\n\r\n                this.internalApplyAriaCurrent();\r\n\r\n                return this._selectElement;\r\n            }\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.ChoiceSet\";\r\n    }\r\n\r\n    focus() {\r\n        if (this._toggleInputs && (this.isMultiSelect || this.style === \"expanded\")) {\r\n            if (this._toggleInputs.length > 0) {\r\n                this._toggleInputs[0].focus();\r\n            }\r\n        } else if (this._textInput) {\r\n            this._textInput.focus();\r\n        } else {\r\n            super.focus();\r\n        }\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this.choices.length === 0) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.CollectionCantBeEmpty,\r\n                Strings.errors.choiceSetMustHaveAtLeastOneChoice()\r\n            );\r\n        }\r\n\r\n        for (const choice of this.choices) {\r\n            if (!choice.title || !choice.value) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.PropertyCantBeNull,\r\n                    Strings.errors.choiceSetChoicesMustHaveTitleAndValue()\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (this._textInput) {\r\n            if (this.value === \"\" || this.value === this.placeholder) {\r\n                return true;\r\n            }\r\n            for (const choice of this.choices) {\r\n                if (this.value === choice.value) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return super.isValid();\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        if (!this.isMultiSelect) {\r\n            if (this._selectElement) {\r\n                return this._selectElement.selectedIndex > 0\r\n                    ? this._selectElement.value\r\n                    : undefined;\r\n            } else if (this._textInput) {\r\n                for (const choice of this.choices) {\r\n                    if (choice.title && this._textInput.value === choice.title) {\r\n                        return choice.value;\r\n                    }\r\n                }\r\n                return this._textInput.value;\r\n            } else if (this._toggleInputs && this._toggleInputs.length > 0) {\r\n                for (const toggleInput of this._toggleInputs) {\r\n                    if (toggleInput.checked) {\r\n                        return toggleInput.value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return undefined;\r\n        } else {\r\n            if (!this._toggleInputs || this._toggleInputs.length === 0) {\r\n                return undefined;\r\n            }\r\n\r\n            let result: string = \"\";\r\n\r\n            for (const toggleInput of this._toggleInputs) {\r\n                if (toggleInput.checked) {\r\n                    if (result !== \"\") {\r\n                        result += this.hostConfig.choiceSetInputValueSeparator;\r\n                    }\r\n\r\n                    result += toggleInput.value;\r\n                }\r\n            }\r\n\r\n            return result ? result : undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport class NumberInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new NumProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new NumProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new NumProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(NumberInput.valueProperty)\r\n    defaultValue?: number;\r\n\r\n    @property(NumberInput.minProperty)\r\n    min?: number;\r\n\r\n    @property(NumberInput.maxProperty)\r\n    max?: number;\r\n\r\n    @property(NumberInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _numberInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._numberInputElement = document.createElement(\"input\");\r\n        this._numberInputElement.setAttribute(\"type\", \"number\");\r\n\r\n        if (this.min !== undefined) {\r\n            this._numberInputElement.setAttribute(\"min\", this.min.toString());\r\n        }\r\n\r\n        if (this.max !== undefined) {\r\n            this._numberInputElement.setAttribute(\"max\", this.max.toString());\r\n        }\r\n\r\n        this._numberInputElement.className = this.hostConfig.makeCssClassName(\r\n            \"ac-input\",\r\n            \"ac-numberInput\"\r\n        );\r\n        this._numberInputElement.style.width = \"100%\";\r\n\r\n        this._numberInputElement.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n        if (this.defaultValue !== undefined) {\r\n            this._numberInputElement.valueAsNumber = this.defaultValue;\r\n        }\r\n\r\n        if (this.placeholder) {\r\n            this._numberInputElement.placeholder = this.placeholder;\r\n            this._numberInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        this._numberInputElement.oninput = () => {\r\n            this.valueChanged();\r\n        };\r\n\r\n        return this._numberInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Number\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value !== undefined && !isNaN(this.value);\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (this.value === undefined) {\r\n            return !this.isRequired;\r\n        }\r\n\r\n        let result = true;\r\n\r\n        if (this.min !== undefined) {\r\n            result = result && this.value >= this.min;\r\n        }\r\n\r\n        if (this.max !== undefined) {\r\n            result = result && this.value <= this.max;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get value(): number | undefined {\r\n        return this._numberInputElement ? this._numberInputElement.valueAsNumber : undefined;\r\n    }\r\n\r\n    set value(value: number | undefined) {\r\n        if (value && this._numberInputElement) {\r\n            this._numberInputElement.value = value.toString();\r\n        }\r\n    }\r\n}\r\n\r\nexport class DateInput extends Input {\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new StringProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new StringProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new StringProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(DateInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(DateInput.minProperty)\r\n    min?: string;\r\n\r\n    @property(DateInput.maxProperty)\r\n    max?: string;\r\n\r\n    @property(DateInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _dateInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._dateInputElement = document.createElement(\"input\");\r\n        this._dateInputElement.setAttribute(\"type\", \"date\");\r\n\r\n        if (this.min) {\r\n            this._dateInputElement.setAttribute(\"min\", this.min);\r\n        }\r\n\r\n        if (this.max) {\r\n            this._dateInputElement.setAttribute(\"max\", this.max);\r\n        }\r\n\r\n        if (this.placeholder) {\r\n            this._dateInputElement.placeholder = this.placeholder;\r\n            this._dateInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        this._dateInputElement.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n        this._dateInputElement.className = this.hostConfig.makeCssClassName(\r\n            \"ac-input\",\r\n            \"ac-dateInput\"\r\n        );\r\n        this._dateInputElement.style.width = \"100%\";\r\n\r\n        this._dateInputElement.oninput = () => {\r\n            this.valueChanged();\r\n        };\r\n\r\n        if (this.defaultValue) {\r\n            this._dateInputElement.value = this.defaultValue;\r\n        }\r\n\r\n        return this._dateInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Date\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this.value) {\r\n            return !this.isRequired;\r\n        }\r\n\r\n        const valueAsDate = new Date(this.value);\r\n\r\n        let result = true;\r\n\r\n        if (this.min) {\r\n            const minDate = new Date(this.min);\r\n\r\n            result = result && valueAsDate >= minDate;\r\n        }\r\n\r\n        if (this.max) {\r\n            const maxDate = new Date(this.max);\r\n\r\n            result = result && valueAsDate <= maxDate;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._dateInputElement ? this._dateInputElement.value : undefined;\r\n    }\r\n}\r\n\r\nexport class TimeProperty extends CustomProperty<string | undefined> {\r\n    constructor(readonly targetVersion: Version, readonly name: string) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            (\r\n                sender: SerializableObject,\r\n                prop: PropertyDefinition,\r\n                source: PropertyBag,\r\n                context: BaseSerializationContext\r\n            ) => {\r\n                const value = source[prop.name];\r\n\r\n                if (typeof value === \"string\" && value && /^[0-9]{2}:[0-9]{2}$/.test(value)) {\r\n                    return value;\r\n                }\r\n\r\n                return undefined;\r\n            },\r\n            (\r\n                sender: SerializableObject,\r\n                prop: PropertyDefinition,\r\n                target: PropertyBag,\r\n                value: string | undefined,\r\n                context: BaseSerializationContext\r\n            ) => {\r\n                context.serializeValue(target, prop.name, value);\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport class TimeInput extends Input {\r\n    private static convertTimeStringToDate(timeString: string): Date {\r\n        return new Date(\"1973-09-04T\" + timeString + \":00Z\");\r\n    }\r\n\r\n    //#region Schema\r\n\r\n    static readonly valueProperty = new TimeProperty(Versions.v1_0, \"value\");\r\n    static readonly placeholderProperty = new StringProperty(Versions.v1_0, \"placeholder\");\r\n    static readonly minProperty = new TimeProperty(Versions.v1_0, \"min\");\r\n    static readonly maxProperty = new TimeProperty(Versions.v1_0, \"max\");\r\n\r\n    @property(TimeInput.valueProperty)\r\n    defaultValue?: string;\r\n\r\n    @property(TimeInput.minProperty)\r\n    min?: string;\r\n\r\n    @property(TimeInput.maxProperty)\r\n    max?: string;\r\n\r\n    @property(TimeInput.placeholderProperty)\r\n    placeholder?: string;\r\n\r\n    //#endregion\r\n\r\n    private _timeInputElement: HTMLInputElement;\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._timeInputElement = document.createElement(\"input\");\r\n        this._timeInputElement.setAttribute(\"type\", \"time\");\r\n\r\n        if (this.min) {\r\n            this._timeInputElement.setAttribute(\"min\", this.min);\r\n        }\r\n\r\n        if (this.max) {\r\n            this._timeInputElement.setAttribute(\"max\", this.max);\r\n        }\r\n\r\n        this._timeInputElement.className = this.hostConfig.makeCssClassName(\r\n            \"ac-input\",\r\n            \"ac-timeInput\"\r\n        );\r\n        this._timeInputElement.style.width = \"100%\";\r\n        this._timeInputElement.oninput = () => {\r\n            this.valueChanged();\r\n        };\r\n\r\n        if (this.placeholder) {\r\n            this._timeInputElement.placeholder = this.placeholder;\r\n            this._timeInputElement.setAttribute(\"aria-label\", this.placeholder);\r\n        }\r\n\r\n        this._timeInputElement.tabIndex = this.isDesignMode() ? -1 : 0;\r\n\r\n        if (this.defaultValue) {\r\n            this._timeInputElement.value = this.defaultValue;\r\n        }\r\n\r\n        return this._timeInputElement;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Input.Time\";\r\n    }\r\n\r\n    isSet(): boolean {\r\n        return this.value ? true : false;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this.value) {\r\n            return !this.isRequired;\r\n        }\r\n\r\n        const valueAsDate = TimeInput.convertTimeStringToDate(this.value);\r\n\r\n        let result = true;\r\n\r\n        if (this.min) {\r\n            const minDate = TimeInput.convertTimeStringToDate(this.min);\r\n\r\n            result = result && valueAsDate >= minDate;\r\n        }\r\n\r\n        if (this.max) {\r\n            const maxDate = TimeInput.convertTimeStringToDate(this.max);\r\n\r\n            result = result && valueAsDate <= maxDate;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._timeInputElement ? this._timeInputElement.value : undefined;\r\n    }\r\n}\r\n\r\nexport const enum ActionButtonState {\r\n    Normal,\r\n    Expanded,\r\n    Subdued\r\n}\r\n\r\nexport type ActionType = { new (): Action };\r\n\r\nexport abstract class Action extends CardObject {\r\n    //#region Schema\r\n\r\n    static readonly titleProperty = new StringProperty(Versions.v1_0, \"title\");\r\n    static readonly iconUrlProperty = new StringProperty(Versions.v1_1, \"iconUrl\");\r\n    static readonly styleProperty = new ValueSetProperty(\r\n        Versions.v1_2,\r\n        \"style\",\r\n        [\r\n            { value: Enums.ActionStyle.Default },\r\n            { value: Enums.ActionStyle.Positive },\r\n            { value: Enums.ActionStyle.Destructive }\r\n        ],\r\n        Enums.ActionStyle.Default\r\n    );\r\n    static readonly modeProperty = new ValueSetProperty(\r\n        Versions.v1_5,\r\n        \"mode\",\r\n        [{ value: Enums.ActionMode.Primary }, { value: Enums.ActionMode.Secondary }],\r\n        Enums.ActionMode.Primary\r\n    );\r\n    static readonly tooltipProperty = new StringProperty(Versions.v1_5, \"tooltip\");\r\n    static readonly isEnabledProperty = new BoolProperty(Versions.v1_5, \"isEnabled\", true);\r\n\r\n    @property(Action.titleProperty)\r\n    title?: string;\r\n\r\n    @property(Action.iconUrlProperty)\r\n    iconUrl?: string;\r\n\r\n    @property(Action.styleProperty)\r\n    style: string = Enums.ActionStyle.Default;\r\n\r\n    @property(Action.modeProperty)\r\n    mode: string = Enums.ActionMode.Primary;\r\n\r\n    @property(Action.tooltipProperty)\r\n    tooltip?: string;\r\n\r\n    @property(Action.isEnabledProperty)\r\n    isEnabled: boolean;\r\n\r\n    //#endregion\r\n\r\n    private renderButtonContent() {\r\n        if (this.renderedElement) {\r\n            // Cache hostConfig for perf\r\n            const hostConfig = this.hostConfig;\r\n\r\n            const titleElement = document.createElement(\"div\");\r\n            titleElement.style.overflow = \"hidden\";\r\n            titleElement.style.textOverflow = \"ellipsis\";\r\n\r\n            if (\r\n                !(\r\n                    hostConfig.actions.iconPlacement === Enums.ActionIconPlacement.AboveTitle ||\r\n                    hostConfig.actions.allowTitleToWrap\r\n                )\r\n            ) {\r\n                titleElement.style.whiteSpace = \"nowrap\";\r\n            }\r\n\r\n            if (this.title) {\r\n                titleElement.innerText = this.title;\r\n            }\r\n\r\n            if (!this.iconUrl) {\r\n                this.renderedElement.classList.add(\"noIcon\");\r\n                this.renderedElement.appendChild(titleElement);\r\n            } else {\r\n                const iconElement = document.createElement(\"img\");\r\n                iconElement.src = this.iconUrl;\r\n                iconElement.style.width = hostConfig.actions.iconSize + \"px\";\r\n                iconElement.style.height = hostConfig.actions.iconSize + \"px\";\r\n                iconElement.style.flex = \"0 0 auto\";\r\n\r\n                if (hostConfig.actions.iconPlacement === Enums.ActionIconPlacement.AboveTitle) {\r\n                    this.renderedElement.classList.add(\"iconAbove\");\r\n                    this.renderedElement.style.flexDirection = \"column\";\r\n\r\n                    if (this.title) {\r\n                        iconElement.style.marginBottom = \"6px\";\r\n                    }\r\n                } else {\r\n                    this.renderedElement.classList.add(\"iconLeft\");\r\n\r\n                    iconElement.style.maxHeight = \"100%\";\r\n\r\n                    if (this.title) {\r\n                        iconElement.style.marginRight = \"6px\";\r\n                    }\r\n                }\r\n\r\n                this.renderedElement.appendChild(iconElement);\r\n                this.renderedElement.appendChild(titleElement);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getParentContainer(): Container | undefined {\r\n        if (this.parent instanceof Container) {\r\n            return this.parent;\r\n        }\r\n\r\n        return this.parent ? this.parent.getParentContainer() : undefined;\r\n    }\r\n\r\n    private _state: ActionButtonState = ActionButtonState.Normal;\r\n    private _actionCollection?: ActionCollection; // hold the reference to its action collection\r\n    private _isFocusable: boolean = true;\r\n\r\n    isDesignMode(): boolean {\r\n        const rootElement = this.getRootObject();\r\n\r\n        return rootElement instanceof CardElement && rootElement.isDesignMode();\r\n    }\r\n\r\n    protected updateCssClasses() {\r\n        if (this.parent && this.renderedElement) {\r\n            const hostConfig = this.parent.hostConfig;\r\n\r\n            this.renderedElement.className = hostConfig.makeCssClassName(\r\n                this.isEffectivelyEnabled() ? \"ac-pushButton\" : \"ac-pushButton-disabled\"\r\n            );\r\n\r\n            const parentContainer = this.getParentContainer();\r\n\r\n            if (parentContainer) {\r\n                const parentContainerStyle = parentContainer.getEffectiveStyle();\r\n\r\n                if (parentContainerStyle) {\r\n                    this.renderedElement.classList.add(\"style-\" + parentContainerStyle);\r\n                }\r\n            }\r\n\r\n            this.renderedElement.tabIndex = !this.isDesignMode() && this.isFocusable ? 0 : -1;\r\n\r\n            switch (this._state) {\r\n                case ActionButtonState.Normal:\r\n                    // No additional classes needed\r\n                    break;\r\n\r\n                case ActionButtonState.Expanded:\r\n                    this.renderedElement.classList.add(hostConfig.makeCssClassName(\"expanded\"));\r\n                    break;\r\n                case ActionButtonState.Subdued:\r\n                    this.renderedElement.classList.add(hostConfig.makeCssClassName(\"subdued\"));\r\n                    break;\r\n            }\r\n\r\n            if (this.style && this.isEffectivelyEnabled()) {\r\n                if (this.style === Enums.ActionStyle.Positive) {\r\n                    this.renderedElement.classList.add(\r\n                        ...hostConfig.makeCssClassNames(\"primary\", \"style-positive\")\r\n                    );\r\n                } else {\r\n                    this.renderedElement.classList.add(\r\n                        ...hostConfig.makeCssClassNames(\"style-\" + this.style.toLowerCase())\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SerializationContext();\r\n    }\r\n\r\n    protected internalGetReferencedInputs(): Dictionary<Input> {\r\n        return {};\r\n    }\r\n\r\n    protected internalPrepareForExecution(_inputs: Dictionary<Input> | undefined) {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    protected internalValidateInputs(referencedInputs: Dictionary<Input> | undefined): Input[] {\r\n        const result: Input[] = [];\r\n\r\n        if (referencedInputs) {\r\n            for (const key of Object.keys(referencedInputs)) {\r\n                const input = referencedInputs[key];\r\n\r\n                if (!input.validateValue()) {\r\n                    result.push(input);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected shouldSerialize(context: SerializationContext): boolean {\r\n        return context.actionRegistry.findByName(this.getJsonTypeName()) !== undefined;\r\n    }\r\n\r\n    protected raiseExecuteActionEvent() {\r\n        if (this.onExecute) {\r\n            this.onExecute(this);\r\n        }\r\n\r\n        raiseExecuteActionEvent(this);\r\n    }\r\n\r\n    protected internalAfterExecute() {\r\n        let rootObject = this.getRootObject();\r\n\r\n        if (rootObject instanceof CardElement) {\r\n            rootObject.updateActionsEnabledState();\r\n        }\r\n    }\r\n\r\n    onExecute: (sender: Action) => void;\r\n\r\n    getHref(): string | undefined {\r\n        return \"\";\r\n    }\r\n\r\n    getAriaRole(): string {\r\n        return \"button\";\r\n    }\r\n\r\n    setupElementForAccessibility(element: HTMLElement, promoteTooltipToLabel: boolean = false) {\r\n        element.tabIndex = this.isEffectivelyEnabled() && !this.isDesignMode() ? 0 : -1;\r\n\r\n        element.setAttribute(\"role\", this.getAriaRole());\r\n\r\n        if (element instanceof HTMLButtonElement) {\r\n            element.disabled = !this.isEffectivelyEnabled();\r\n        }\r\n\r\n        if (!this.isEffectivelyEnabled()) {\r\n            element.setAttribute(\"aria-disabled\", \"true\");\r\n        } else {\r\n            element.removeAttribute(\"aria-disabled\");\r\n            element.classList.add(this.hostConfig.makeCssClassName(\"ac-selectable\"));\r\n        }\r\n\r\n        if (this.title) {\r\n            element.setAttribute(\"aria-label\", this.title);\r\n            element.title = this.title;\r\n        } else {\r\n            element.removeAttribute(\"aria-label\");\r\n            element.removeAttribute(\"title\");\r\n        }\r\n\r\n        if (this.tooltip) {\r\n            const targetAriaAttribute = promoteTooltipToLabel\r\n                ? this.title\r\n                    ? \"aria-description\"\r\n                    : \"aria-label\"\r\n                : \"aria-description\";\r\n\r\n            element.setAttribute(targetAriaAttribute, this.tooltip);\r\n            element.title = this.tooltip;\r\n        }\r\n    }\r\n\r\n    parse(source: any, context?: SerializationContext) {\r\n        return super.parse(source, context ? context : new SerializationContext());\r\n    }\r\n\r\n    render() {\r\n        const buttonElement = document.createElement(\"button\");\r\n        buttonElement.type = \"button\";\r\n        buttonElement.style.display = \"flex\";\r\n        buttonElement.style.alignItems = \"center\";\r\n        buttonElement.style.justifyContent = \"center\";\r\n        buttonElement.onclick = (e) => {\r\n            if (this.isEffectivelyEnabled()) {\r\n                e.preventDefault();\r\n                e.cancelBubble = true;\r\n\r\n                this.execute();\r\n            }\r\n        };\r\n\r\n        this._renderedElement = buttonElement;\r\n\r\n        this.renderButtonContent();\r\n        this.updateCssClasses();\r\n        this.setupElementForAccessibility(buttonElement);\r\n    }\r\n\r\n    execute() {\r\n        if (this._actionCollection) {\r\n            this._actionCollection.actionExecuted(this);\r\n        }\r\n\r\n        this.raiseExecuteActionEvent();\r\n        this.internalAfterExecute();\r\n    }\r\n\r\n    prepareForExecution(): boolean {\r\n        const referencedInputs = this.getReferencedInputs();\r\n        const invalidInputs = this.internalValidateInputs(referencedInputs);\r\n\r\n        if (invalidInputs.length > 0) {\r\n            invalidInputs[0].focus();\r\n\r\n            return false;\r\n        }\r\n\r\n        this.internalPrepareForExecution(referencedInputs);\r\n\r\n        return true;\r\n    }\r\n\r\n    remove(): boolean {\r\n        if (this._actionCollection) {\r\n            return this._actionCollection.removeAction(this);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return [];\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        return [this];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this.iconUrl ? [{ url: this.iconUrl, mimeType: \"image\" }] : [];\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        return this.id === id ? this : undefined;\r\n    }\r\n\r\n    getReferencedInputs(): Dictionary<Input> | undefined {\r\n        return this.internalGetReferencedInputs();\r\n    }\r\n\r\n    /**\r\n     * Validates the inputs associated with this action.\r\n     *\r\n     * @returns A list of inputs that failed validation, or an empty array if no input failed validation.\r\n     */\r\n    validateInputs(): Input[] {\r\n        return this.internalValidateInputs(this.getReferencedInputs());\r\n    }\r\n\r\n    updateEnabledState() {\r\n        // Do nothing in base implementation\r\n    }\r\n\r\n    isEffectivelyEnabled(): boolean {\r\n        return this.isEnabled;\r\n    }\r\n\r\n    get isPrimary(): boolean {\r\n        return this.style === Enums.ActionStyle.Positive;\r\n    }\r\n\r\n    set isPrimary(value: boolean) {\r\n        if (value) {\r\n            this.style = Enums.ActionStyle.Positive;\r\n        } else {\r\n            if (this.style === Enums.ActionStyle.Positive) {\r\n                this.style = Enums.ActionStyle.Default;\r\n            }\r\n        }\r\n    }\r\n\r\n    get hostConfig(): HostConfig {\r\n        return this.parent ? this.parent.hostConfig : defaultHostConfig;\r\n    }\r\n\r\n    get parent(): CardElement | undefined {\r\n        return <CardElement>this._parent;\r\n    }\r\n\r\n    get state(): ActionButtonState {\r\n        return this._state;\r\n    }\r\n\r\n    set state(value: ActionButtonState) {\r\n        if (this._state !== value) {\r\n            this._state = value;\r\n\r\n            this.updateCssClasses();\r\n        }\r\n    }\r\n\r\n    get isFocusable(): boolean {\r\n        return this._isFocusable;\r\n    }\r\n\r\n    set isFocusable(value: boolean) {\r\n        if (this._isFocusable !== value) {\r\n            this._isFocusable = value;\r\n\r\n            this.updateCssClasses();\r\n        }\r\n    }\r\n}\r\n\r\nexport abstract class SubmitActionBase extends Action {\r\n    //#region Schema\r\n\r\n    static readonly dataProperty = new PropertyDefinition(Versions.v1_0, \"data\");\r\n    static readonly associatedInputsProperty = new CustomProperty(\r\n        Versions.v1_3,\r\n        \"associatedInputs\",\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            source: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            const value = source[prop.name];\r\n\r\n            if (value !== undefined && typeof value === \"string\") {\r\n                return value.toLowerCase() === \"none\" ? \"none\" : \"auto\";\r\n            }\r\n\r\n            return undefined;\r\n        },\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            target: PropertyBag,\r\n            value: string | undefined,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            context.serializeValue(target, prop.name, value);\r\n        }\r\n    );\r\n    static readonly disabledUnlessAssociatedInputsChangeProperty = new BoolProperty(\r\n        Versions.v1_6,\r\n        \"disabledUnlessAssociatedInputsChange\",\r\n        false\r\n    );\r\n\r\n    @property(SubmitActionBase.dataProperty)\r\n    private _originalData?: PropertyBag;\r\n\r\n    @property(SubmitActionBase.associatedInputsProperty)\r\n    associatedInputs?: \"auto\" | \"none\";\r\n\r\n    @property(SubmitActionBase.disabledUnlessAssociatedInputsChangeProperty)\r\n    disabledUnlessAssociatedInputsChange: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    private _isPrepared: boolean = false;\r\n    private _processedData?: PropertyBag;\r\n    private _areReferencedInputsDirty: boolean = false;\r\n\r\n    protected internalGetReferencedInputs(): Dictionary<Input> {\r\n        const result: Dictionary<Input> = {};\r\n\r\n        if (this.associatedInputs !== \"none\") {\r\n            let current: CardElement | undefined = this.parent;\r\n            let inputs: Input[] = [];\r\n\r\n            while (current) {\r\n                inputs.push(...current.getAllInputs(false));\r\n\r\n                current = current.parent;\r\n            }\r\n\r\n            for (const input of inputs) {\r\n                if (input.id) {\r\n                    result[input.id] = input;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        if (this._originalData) {\r\n            this._processedData = JSON.parse(JSON.stringify(this._originalData));\r\n        } else {\r\n            this._processedData = {};\r\n        }\r\n\r\n        if (this._processedData && inputs) {\r\n            for (const key of Object.keys(inputs)) {\r\n                const input = inputs[key];\r\n\r\n                if (input.id && input.isSet()) {\r\n                    this._processedData[input.id] =\r\n                        typeof input.value === \"string\" ? input.value : input.value.toString();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isPrepared = true;\r\n    }\r\n\r\n    protected internalAfterExecute() {\r\n        if (GlobalSettings.resetInputsDirtyStateAfterActionExecution) {\r\n            this.resetReferencedInputsDirtyState();\r\n        }\r\n    }\r\n\r\n    resetReferencedInputsDirtyState() {\r\n        let referencedInputs = this.getReferencedInputs();\r\n\r\n        this._areReferencedInputsDirty = false;\r\n\r\n        if (referencedInputs) {\r\n            for (const key of Object.keys(referencedInputs)) {\r\n                const input = referencedInputs[key];\r\n\r\n                input.resetDirtyState();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateEnabledState() {\r\n        this._areReferencedInputsDirty = false;\r\n\r\n        let referencedInputs = this.getReferencedInputs();\r\n\r\n        if (referencedInputs) {\r\n            for (const key of Object.keys(referencedInputs)) {\r\n                const input = referencedInputs[key];\r\n\r\n                if (input.isDirty()) {\r\n                    this._areReferencedInputsDirty = true;\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateCssClasses();\r\n\r\n        if (this._renderedElement) {\r\n            this.setupElementForAccessibility(this._renderedElement);\r\n        }\r\n    }\r\n\r\n    isEffectivelyEnabled(): boolean {\r\n        let result = super.isEffectivelyEnabled();\r\n\r\n        return this.disabledUnlessAssociatedInputsChange\r\n            ? result && this._areReferencedInputsDirty\r\n            : result;\r\n    }\r\n\r\n    get data(): object | undefined {\r\n        return this._isPrepared ? this._processedData : this._originalData;\r\n    }\r\n\r\n    set data(value: object | undefined) {\r\n        this._originalData = value;\r\n        this._isPrepared = false;\r\n    }\r\n}\r\n\r\nexport class SubmitAction extends SubmitActionBase {\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.Submit\" = \"Action.Submit\";\r\n\r\n    getJsonTypeName(): string {\r\n        return SubmitAction.JsonTypeName;\r\n    }\r\n}\r\n\r\nexport class ExecuteAction extends SubmitActionBase {\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.Execute\" = \"Action.Execute\";\r\n\r\n    //#region Schema\r\n\r\n    static readonly verbProperty = new StringProperty(Versions.v1_4, \"verb\");\r\n\r\n    @property(ExecuteAction.verbProperty)\r\n    verb: string;\r\n\r\n    //#endregion\r\n\r\n    getJsonTypeName(): string {\r\n        return ExecuteAction.JsonTypeName;\r\n    }\r\n}\r\n\r\nexport class OpenUrlAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n\r\n    @property(OpenUrlAction.urlProperty)\r\n    url?: string;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.OpenUrl\" = \"Action.OpenUrl\";\r\n\r\n    getJsonTypeName(): string {\r\n        return OpenUrlAction.JsonTypeName;\r\n    }\r\n\r\n    getAriaRole(): string {\r\n        return \"link\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.url) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.propertyMustBeSet(\"url\")\r\n            );\r\n        }\r\n    }\r\n\r\n    getHref(): string | undefined {\r\n        return this.url;\r\n    }\r\n}\r\n\r\nexport class ToggleVisibilityAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly targetElementsProperty = new CustomProperty<PropertyBag>(\r\n        Versions.v1_2,\r\n        \"targetElements\",\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            source: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            const result: PropertyBag = {};\r\n\r\n            if (Array.isArray(source[prop.name])) {\r\n                for (const item of source[prop.name]) {\r\n                    if (typeof item === \"string\") {\r\n                        result[item] = undefined;\r\n                    } else if (typeof item === \"object\") {\r\n                        const elementId = item[\"elementId\"];\r\n\r\n                        if (typeof elementId === \"string\") {\r\n                            result[elementId] = Utils.parseBool(item[\"isVisible\"]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        },\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            target: PropertyBag,\r\n            value: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            const targetElements: any[] = [];\r\n\r\n            for (const id of Object.keys(value)) {\r\n                if (typeof value[id] === \"boolean\") {\r\n                    targetElements.push({\r\n                        elementId: id,\r\n                        isVisible: value[id]\r\n                    });\r\n                } else {\r\n                    targetElements.push(id);\r\n                }\r\n            }\r\n\r\n            context.serializeArray(target, prop.name, targetElements);\r\n        },\r\n        {},\r\n        (sender: SerializableObject) => {\r\n            return {};\r\n        }\r\n    );\r\n\r\n    @property(ToggleVisibilityAction.targetElementsProperty)\r\n    targetElements: { [key: string]: any } = {};\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.ToggleVisibility\" = \"Action.ToggleVisibility\";\r\n\r\n    private updateAriaControlsAttribute() {\r\n        // apply aria labels to make it clear which elements this action will toggle\r\n        if (this.targetElements) {\r\n            const elementIds = Object.keys(this.targetElements);\r\n\r\n            if (this._renderedElement) {\r\n                if (elementIds.length > 0) {\r\n                    this._renderedElement.setAttribute(\"aria-controls\", elementIds.join(\" \"));\r\n                } else {\r\n                    this._renderedElement.removeAttribute(\"aria-controls\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.targetElements) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.propertyMustBeSet(\"targetElements\")\r\n            );\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return ToggleVisibilityAction.JsonTypeName;\r\n    }\r\n\r\n    render() {\r\n        super.render();\r\n\r\n        this.updateAriaControlsAttribute();\r\n    }\r\n\r\n    execute() {\r\n        super.execute();\r\n        if (this.parent) {\r\n            for (const elementId of Object.keys(this.targetElements)) {\r\n                const targetElement = this.parent.getRootElement().getElementById(elementId);\r\n\r\n                if (targetElement) {\r\n                    if (typeof this.targetElements[elementId] === \"boolean\") {\r\n                        targetElement.isVisible = this.targetElements[elementId];\r\n                    } else {\r\n                        targetElement.isVisible = !targetElement.isVisible;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addTargetElement(elementId: string, isVisible: boolean | undefined = undefined) {\r\n        this.targetElements[elementId] = isVisible;\r\n        this.updateAriaControlsAttribute();\r\n    }\r\n\r\n    removeTargetElement(elementId: string) {\r\n        delete this.targetElements[elementId];\r\n        this.updateAriaControlsAttribute();\r\n    }\r\n}\r\n\r\nclass StringWithSubstitutionProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: SerializableObject,\r\n        source: PropertyBag,\r\n        context: BaseSerializationContext\r\n    ): StringWithSubstitutions {\r\n        const result = new StringWithSubstitutions();\r\n        result.set(Utils.parseString(source[this.name]));\r\n\r\n        return result;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: StringWithSubstitutions,\r\n        context: BaseSerializationContext\r\n    ): void {\r\n        context.serializeValue(target, this.name, value.getOriginal());\r\n    }\r\n\r\n    constructor(readonly targetVersion: Version, readonly name: string) {\r\n        super(targetVersion, name, undefined, () => {\r\n            return new StringWithSubstitutions();\r\n        });\r\n    }\r\n}\r\n\r\nexport class HttpHeader extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly nameProperty = new StringProperty(Versions.v1_0, \"name\");\r\n    static readonly valueProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"value\");\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"HttpHeader\";\r\n    }\r\n\r\n    @property(HttpHeader.nameProperty)\r\n    name: string;\r\n\r\n    @property(HttpHeader.valueProperty)\r\n    private _value: StringWithSubstitutions;\r\n\r\n    //#endregion\r\n\r\n    constructor(name: string = \"\", value: string = \"\") {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n\r\n    getReferencedInputs(inputs: Input[], referencedInputs: Dictionary<Input>) {\r\n        this._value.getReferencedInputs(inputs, referencedInputs);\r\n    }\r\n\r\n    prepareForExecution(inputs: Dictionary<Input>) {\r\n        this._value.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\r\n    }\r\n\r\n    get value(): string | undefined {\r\n        return this._value.get();\r\n    }\r\n\r\n    set value(newValue: string | undefined) {\r\n        this._value.set(newValue);\r\n    }\r\n}\r\n\r\nexport class HttpAction extends Action {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"url\");\r\n    static readonly bodyProperty = new StringWithSubstitutionProperty(Versions.v1_0, \"body\");\r\n    static readonly methodProperty = new StringProperty(Versions.v1_0, \"method\");\r\n    static readonly headersProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_0,\r\n        \"headers\",\r\n        HttpHeader\r\n    );\r\n    static readonly ignoreInputValidationProperty = new BoolProperty(\r\n        Versions.v1_3,\r\n        \"ignoreInputValidation\",\r\n        false\r\n    );\r\n\r\n    @property(HttpAction.urlProperty)\r\n    private _url: StringWithSubstitutions;\r\n\r\n    @property(HttpAction.bodyProperty)\r\n    private _body: StringWithSubstitutions;\r\n\r\n    @property(HttpAction.methodProperty)\r\n    method?: string;\r\n\r\n    @property(HttpAction.headersProperty)\r\n    headers: HttpHeader[];\r\n\r\n    @property(HttpAction.ignoreInputValidationProperty)\r\n    private _ignoreInputValidation: boolean = false;\r\n\r\n    //#endregion\r\n\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.Http\" = \"Action.Http\";\r\n\r\n    protected internalGetReferencedInputs(): Dictionary<Input> {\r\n        const allInputs = this.parent ? this.parent.getRootElement().getAllInputs() : [];\r\n        const result: Dictionary<Input> = {};\r\n\r\n        this._url.getReferencedInputs(allInputs, result);\r\n\r\n        for (const header of this.headers) {\r\n            header.getReferencedInputs(allInputs, result);\r\n        }\r\n\r\n        this._body.getReferencedInputs(allInputs, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    protected internalPrepareForExecution(inputs: Dictionary<Input> | undefined) {\r\n        if (inputs) {\r\n            this._url.substituteInputValues(inputs, ContentTypes.applicationXWwwFormUrlencoded);\r\n\r\n            let contentType = ContentTypes.applicationJson;\r\n\r\n            for (const header of this.headers) {\r\n                header.prepareForExecution(inputs);\r\n\r\n                if (header.name && header.name.toLowerCase() === \"content-type\") {\r\n                    contentType = header.value!;\r\n                }\r\n            }\r\n\r\n            this._body.substituteInputValues(inputs, contentType);\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return HttpAction.JsonTypeName;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (!this.url) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.propertyMustBeSet(\"url\")\r\n            );\r\n        }\r\n\r\n        if (this.headers.length > 0) {\r\n            for (const header of this.headers) {\r\n                if (!header.name) {\r\n                    context.addFailure(\r\n                        this,\r\n                        Enums.ValidationEvent.PropertyCantBeNull,\r\n                        Strings.errors.actionHttpHeadersMustHaveNameAndValue()\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get ignoreInputValidation(): boolean {\r\n        return this._ignoreInputValidation;\r\n    }\r\n\r\n    set ignoreInputValidation(value: boolean) {\r\n        this._ignoreInputValidation = value;\r\n    }\r\n\r\n    get url(): string | undefined {\r\n        return this._url.get();\r\n    }\r\n\r\n    set url(value: string | undefined) {\r\n        this._url.set(value);\r\n    }\r\n\r\n    get body(): string | undefined {\r\n        return this._body.get();\r\n    }\r\n\r\n    set body(value: string | undefined) {\r\n        this._body.set(value);\r\n    }\r\n}\r\n\r\nexport class ShowCardAction extends Action {\r\n    // Note the \"weird\" way this field is declared is to work around a breaking\r\n    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE\r\n    static readonly JsonTypeName: \"Action.ShowCard\" = \"Action.ShowCard\";\r\n\r\n    protected updateCssClasses() {\r\n        super.updateCssClasses();\r\n\r\n        if (this.renderedElement) {\r\n            const effectiveHostConfig = this.parent ? this.parent.hostConfig : defaultHostConfig;\r\n\r\n            this.renderedElement.classList.add(effectiveHostConfig.makeCssClassName(\"expandable\"));\r\n            this.renderedElement.setAttribute(\r\n                \"aria-expanded\",\r\n                (this.state === ActionButtonState.Expanded).toString()\r\n            );\r\n        }\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        const jsonCard = source[\"card\"];\r\n\r\n        if (jsonCard) {\r\n            this.card.parse(jsonCard, context);\r\n        } else {\r\n            context.logParseEvent(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.showCardMustHaveCard()\r\n            );\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        if (this.card) {\r\n            context.serializeValue(target, \"card\", this.card.toJSON(context));\r\n        }\r\n    }\r\n\r\n    protected raiseExecuteActionEvent() {\r\n        if (this.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {\r\n            // Only raise the event in Popup mode.\r\n            super.raiseExecuteActionEvent();\r\n        }\r\n    }\r\n\r\n    readonly card: AdaptiveCard = new InlineAdaptiveCard();\r\n\r\n    releaseDOMResources() {\r\n        super.releaseDOMResources();\r\n\r\n        this.card.releaseDOMResources();\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return ShowCardAction.JsonTypeName;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        this.card.internalValidateProperties(context);\r\n    }\r\n\r\n    setParent(value: CardElement) {\r\n        super.setParent(value);\r\n\r\n        this.card.setParent(value);\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return this.card.getAllInputs(processActions);\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result = super.getAllActions();\r\n\r\n        result.push(...this.card.getAllActions());\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result = super.getResourceInformation();\r\n\r\n        result.push(...this.card.getResourceInformation());\r\n\r\n        return result;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result = super.getActionById(id);\r\n\r\n        if (!result) {\r\n            result = this.card.getActionById(id);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nclass OverflowAction extends Action {\r\n    static readonly JsonTypeName: \"Action.Overflow\" = \"Action.Overflow\";\r\n    private _actions: Action[];\r\n\r\n    constructor(actions: Action[]) {\r\n        super();\r\n        this._actions = actions;\r\n\r\n        this.title = Strings.defaults.overflowButtonText();\r\n    }\r\n\r\n    getActions(): readonly Action[] {\r\n        return this._actions;\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result = super.getAllActions();\r\n\r\n        result.push(...this._actions);\r\n\r\n        return result;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return ShowCardAction.JsonTypeName;\r\n    }\r\n\r\n    execute() {\r\n        const shouldDisplayPopupMenu = !raiseDisplayOverflowActionMenuEvent(\r\n            this,\r\n            this.renderedElement\r\n        );\r\n\r\n        if (shouldDisplayPopupMenu && this.renderedElement) {\r\n            const contextMenu = new PopupMenu();\r\n            contextMenu.hostConfig = this.hostConfig;\r\n\r\n            for (let i = 0; i < this._actions.length; i++) {\r\n                const menuItem = new MenuItem(i.toString(), this._actions[i].title ?? \"\");\r\n                menuItem.isEnabled = this._actions[i].isEnabled;\r\n                menuItem.onClick = () => {\r\n                    const actionToExecute = this._actions[i];\r\n\r\n                    contextMenu.closePopup(false);\r\n\r\n                    if (actionToExecute.isEnabled) {\r\n                        actionToExecute.execute();\r\n                    }\r\n                };\r\n\r\n                contextMenu.items.add(menuItem);\r\n            }\r\n\r\n            contextMenu.popup(this.renderedElement);\r\n        }\r\n    }\r\n}\r\n\r\nclass ActionCollection {\r\n    private _owner: CardElement;\r\n    private _actionCardContainer: HTMLDivElement;\r\n    private _expandedAction?: ShowCardAction;\r\n    private _actionCard?: HTMLElement;\r\n\r\n    private isActionAllowed(action: Action): boolean {\r\n        const forbiddenTypes = this._owner.getForbiddenActionTypes();\r\n\r\n        if (forbiddenTypes) {\r\n            for (const forbiddenType of forbiddenTypes) {\r\n                if (action.constructor === forbiddenType) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private refreshContainer() {\r\n        clearElement(this._actionCardContainer);\r\n\r\n        if (!this._actionCard) {\r\n            this._actionCardContainer.style.marginTop = \"0px\";\r\n\r\n            return;\r\n        }\r\n\r\n        this._actionCardContainer.style.marginTop =\r\n            this.renderedActionCount > 0\r\n                ? this._owner.hostConfig.actions.showCard.inlineTopMargin + \"px\"\r\n                : \"0px\";\r\n\r\n        const padding = this._owner.getEffectivePadding();\r\n\r\n        this._owner.getImmediateSurroundingPadding(padding);\r\n\r\n        const physicalPadding =\r\n            this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n        if (this._actionCard) {\r\n            this._actionCard.style.paddingLeft = physicalPadding.left + \"px\";\r\n            this._actionCard.style.paddingRight = physicalPadding.right + \"px\";\r\n\r\n            this._actionCard.style.marginLeft = \"-\" + physicalPadding.left + \"px\";\r\n            this._actionCard.style.marginRight = \"-\" + physicalPadding.right + \"px\";\r\n\r\n            if (physicalPadding.bottom !== 0 && !this._owner.isDesignMode()) {\r\n                this._actionCard.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n                this._actionCard.style.marginBottom = \"-\" + physicalPadding.bottom + \"px\";\r\n            }\r\n\r\n            Utils.appendChild(this._actionCardContainer, this._actionCard);\r\n        }\r\n    }\r\n\r\n    private layoutChanged() {\r\n        this._owner.getRootElement().updateLayout();\r\n    }\r\n\r\n    private showActionCard(\r\n        action: ShowCardAction,\r\n        suppressStyle: boolean = false,\r\n        raiseEvent: boolean = true\r\n    ) {\r\n        (<InlineAdaptiveCard>action.card).suppressStyle = suppressStyle;\r\n\r\n        // Always re-render a ShowCard action in design mode; reuse already rendered ShowCard (if available) otherwise\r\n        const renderedCard =\r\n            action.card.renderedElement && !this._owner.isDesignMode()\r\n                ? action.card.renderedElement\r\n                : action.card.render();\r\n\r\n        this._actionCard = renderedCard;\r\n        this._expandedAction = action;\r\n\r\n        this.refreshContainer();\r\n\r\n        if (raiseEvent) {\r\n            this.layoutChanged();\r\n\r\n            raiseInlineCardExpandedEvent(action, true);\r\n        }\r\n    }\r\n\r\n    private collapseExpandedAction() {\r\n        for (const action of this._renderedActions) {\r\n            action.state = ActionButtonState.Normal;\r\n        }\r\n\r\n        const previouslyExpandedAction = this._expandedAction;\r\n\r\n        this._expandedAction = undefined;\r\n        this._actionCard = undefined;\r\n\r\n        this.refreshContainer();\r\n\r\n        if (previouslyExpandedAction) {\r\n            this.layoutChanged();\r\n\r\n            raiseInlineCardExpandedEvent(previouslyExpandedAction, false);\r\n        }\r\n    }\r\n\r\n    private expandShowCardAction(action: ShowCardAction, raiseEvent: boolean) {\r\n        let afterSelectedAction = false;\r\n\r\n        for (const renderedAction of this._renderedActions) {\r\n            // Remove actions after selected action from tabOrder if the actions are oriented horizontally, to skip focus directly to expanded card\r\n            if (\r\n                this._owner.hostConfig.actions.actionsOrientation == Enums.Orientation.Horizontal &&\r\n                afterSelectedAction\r\n            ) {\r\n                renderedAction.isFocusable = false;\r\n            }\r\n\r\n            if (renderedAction !== action) {\r\n                renderedAction.state = ActionButtonState.Subdued;\r\n            } else {\r\n                renderedAction.state = ActionButtonState.Expanded;\r\n\r\n                afterSelectedAction = true;\r\n\r\n                if (renderedAction.renderedElement) {\r\n                    renderedAction.renderedElement.onblur = (_e) => {\r\n                        for (const ra of this._renderedActions) {\r\n                            ra.isFocusable = true;\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.showActionCard(\r\n            action,\r\n            !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()),\r\n            raiseEvent\r\n        );\r\n    }\r\n\r\n    private _items: Action[] = [];\r\n    private _overflowAction?: OverflowAction;\r\n    private _renderedActions: Action[] = [];\r\n\r\n    constructor(owner: CardElement) {\r\n        this._owner = owner;\r\n    }\r\n\r\n    releaseDOMResources() {\r\n        for (let action of this._renderedActions) {\r\n            action.releaseDOMResources();\r\n        }\r\n    }\r\n\r\n    actionExecuted(action: Action) {\r\n        if (!(action instanceof ShowCardAction)) {\r\n            this.collapseExpandedAction();\r\n        } else {\r\n            if (action === this._expandedAction) {\r\n                this.collapseExpandedAction();\r\n            } else if (\r\n                this._owner.hostConfig.actions.showCard.actionMode ===\r\n                Enums.ShowCardActionMode.Inline\r\n            ) {\r\n                this.expandShowCardAction(action, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    parse(source: any, context: SerializationContext) {\r\n        this.clear();\r\n\r\n        if (Array.isArray(source)) {\r\n            for (const jsonAction of source) {\r\n                let forbiddenActions: string[] = [];\r\n\r\n                // If the action owner is a ContainerWithActions, we should check for forbidden actions\r\n                if (this._owner instanceof ContainerWithActions) {\r\n                    forbiddenActions = this._owner.getForbiddenActionNames();\r\n                }\r\n\r\n                const action = context.parseAction(\r\n                    this._owner,\r\n                    jsonAction,\r\n                    forbiddenActions,\r\n                    !this._owner.isDesignMode()\r\n                );\r\n\r\n                if (action) {\r\n                    this.addAction(action);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON(target: PropertyBag, propertyName: string, context: SerializationContext): any {\r\n        context.serializeArray(target, propertyName, this._items);\r\n    }\r\n\r\n    getActionAt(id: number): Action | undefined {\r\n        return this._items[id];\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return this._items.length;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = undefined;\r\n\r\n        for (const item of this._items) {\r\n            result = item.getActionById(id);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    validateProperties(context: ValidationResults) {\r\n        if (\r\n            this._owner.hostConfig.actions.maxActions &&\r\n            this._items.length > this._owner.hostConfig.actions.maxActions\r\n        ) {\r\n            context.addFailure(\r\n                this._owner,\r\n                Enums.ValidationEvent.TooManyActions,\r\n                Strings.errors.tooManyActions(this._owner.hostConfig.actions.maxActions)\r\n            );\r\n        }\r\n\r\n        if (this._items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {\r\n            context.addFailure(\r\n                this._owner,\r\n                Enums.ValidationEvent.InteractivityNotAllowed,\r\n                Strings.errors.interactivityNotAllowed()\r\n            );\r\n        }\r\n\r\n        for (const item of this._items) {\r\n            if (!this.isActionAllowed(item)) {\r\n                context.addFailure(\r\n                    this._owner,\r\n                    Enums.ValidationEvent.ActionTypeNotAllowed,\r\n                    Strings.errors.actionTypeNotAllowed(item.getJsonTypeName())\r\n                );\r\n            }\r\n\r\n            item.internalValidateProperties(context);\r\n        }\r\n    }\r\n\r\n    render(orientation: Enums.Orientation): HTMLElement | undefined {\r\n        // Cache hostConfig for better perf\r\n        const hostConfig = this._owner.hostConfig;\r\n\r\n        if (!hostConfig.supportsInteractivity) {\r\n            return undefined;\r\n        }\r\n\r\n        const element = document.createElement(\"div\");\r\n        const maxActions = hostConfig.actions.maxActions\r\n            ? Math.min(hostConfig.actions.maxActions, this._items.length)\r\n            : this._items.length;\r\n\r\n        this._actionCardContainer = document.createElement(\"div\");\r\n        this._renderedActions = [];\r\n\r\n        if (\r\n            hostConfig.actions.preExpandSingleShowCardAction &&\r\n            maxActions === 1 &&\r\n            this._items[0] instanceof ShowCardAction &&\r\n            this.isActionAllowed(this._items[0])\r\n        ) {\r\n            this.showActionCard(this._items[0], true);\r\n            this._renderedActions.push(this._items[0]);\r\n        } else {\r\n            const buttonStrip = document.createElement(\"div\");\r\n            buttonStrip.className = hostConfig.makeCssClassName(\"ac-actionSet\");\r\n            buttonStrip.style.display = \"flex\";\r\n\r\n            if (orientation === Enums.Orientation.Horizontal) {\r\n                buttonStrip.style.flexDirection = \"row\";\r\n\r\n                if (\r\n                    this._owner.horizontalAlignment &&\r\n                    hostConfig.actions.actionAlignment !== Enums.ActionAlignment.Stretch\r\n                ) {\r\n                    switch (this._owner.horizontalAlignment) {\r\n                        case Enums.HorizontalAlignment.Center:\r\n                            buttonStrip.style.justifyContent = \"center\";\r\n                            break;\r\n                        case Enums.HorizontalAlignment.Right:\r\n                            buttonStrip.style.justifyContent = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.justifyContent = \"flex-start\";\r\n                            break;\r\n                    }\r\n                } else {\r\n                    switch (hostConfig.actions.actionAlignment) {\r\n                        case Enums.ActionAlignment.Center:\r\n                            buttonStrip.style.justifyContent = \"center\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Right:\r\n                            buttonStrip.style.justifyContent = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.justifyContent = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n            } else {\r\n                buttonStrip.style.flexDirection = \"column\";\r\n\r\n                if (\r\n                    this._owner.horizontalAlignment &&\r\n                    hostConfig.actions.actionAlignment !== Enums.ActionAlignment.Stretch\r\n                ) {\r\n                    switch (this._owner.horizontalAlignment) {\r\n                        case Enums.HorizontalAlignment.Center:\r\n                            buttonStrip.style.alignItems = \"center\";\r\n                            break;\r\n                        case Enums.HorizontalAlignment.Right:\r\n                            buttonStrip.style.alignItems = \"flex-end\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.alignItems = \"flex-start\";\r\n                            break;\r\n                    }\r\n                } else {\r\n                    switch (hostConfig.actions.actionAlignment) {\r\n                        case Enums.ActionAlignment.Center:\r\n                            buttonStrip.style.alignItems = \"center\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Right:\r\n                            buttonStrip.style.alignItems = \"flex-end\";\r\n                            break;\r\n                        case Enums.ActionAlignment.Stretch:\r\n                            buttonStrip.style.alignItems = \"stretch\";\r\n                            break;\r\n                        default:\r\n                            buttonStrip.style.alignItems = \"flex-start\";\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const allowedActions = this._items.filter(this.isActionAllowed.bind(this));\r\n\r\n            let primaryActions: Action[] = [];\r\n            const secondaryActions: Action[] = [];\r\n\r\n            if (!this._owner.isDesignMode()) {\r\n                allowedActions.forEach((action) =>\r\n                    action.mode === Enums.ActionMode.Secondary\r\n                        ? secondaryActions.push(action)\r\n                        : primaryActions.push(action)\r\n                );\r\n\r\n                // If primaryActions.length > maxActions, extra actions are moved to overflow\r\n                const overflowPrimaryActions = primaryActions.splice(hostConfig.actions.maxActions);\r\n\r\n                if (GlobalSettings.allowMoreThanMaxActionsInOverflowMenu) {\r\n                    secondaryActions.push(...overflowPrimaryActions);\r\n                }\r\n\r\n                let shouldRenderOverflowActionButton = true;\r\n\r\n                if (secondaryActions.length > 0) {\r\n                    if (!this._overflowAction) {\r\n                        this._overflowAction = new OverflowAction(secondaryActions);\r\n                        this._overflowAction.setParent(this._owner);\r\n                        this._overflowAction[\"_actionCollection\"] = this;\r\n                    }\r\n\r\n                    const isRootAction = this._owner instanceof AdaptiveCard && !this._owner.parent;\r\n                    shouldRenderOverflowActionButton = !raiseRenderOverflowActionsEvent(\r\n                        this._overflowAction,\r\n                        isRootAction\r\n                    );\r\n                }\r\n\r\n                if (this._overflowAction && shouldRenderOverflowActionButton) {\r\n                    primaryActions.push(this._overflowAction);\r\n                }\r\n            } else {\r\n                primaryActions = allowedActions;\r\n            }\r\n\r\n            for (let i = 0; i < primaryActions.length; i++) {\r\n                const action = primaryActions[i];\r\n                action.render();\r\n\r\n                if (action.renderedElement) {\r\n                    if (\r\n                        hostConfig.actions.actionsOrientation === Enums.Orientation.Horizontal &&\r\n                        hostConfig.actions.actionAlignment === Enums.ActionAlignment.Stretch\r\n                    ) {\r\n                        action.renderedElement.style.flex = \"0 1 100%\";\r\n                    } else {\r\n                        action.renderedElement.style.flex = \"0 1 auto\";\r\n                    }\r\n\r\n                    buttonStrip.appendChild(action.renderedElement);\r\n\r\n                    this._renderedActions.push(action);\r\n\r\n                    if (i < primaryActions.length - 1 && hostConfig.actions.buttonSpacing > 0) {\r\n                        const spacer = document.createElement(\"div\");\r\n\r\n                        if (orientation === Enums.Orientation.Horizontal) {\r\n                            spacer.style.flex = \"0 0 auto\";\r\n                            spacer.style.width = hostConfig.actions.buttonSpacing + \"px\";\r\n                        } else {\r\n                            spacer.style.height = hostConfig.actions.buttonSpacing + \"px\";\r\n                        }\r\n\r\n                        Utils.appendChild(buttonStrip, spacer);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const buttonStripContainer = document.createElement(\"div\");\r\n            buttonStripContainer.style.overflow = \"hidden\";\r\n            buttonStripContainer.appendChild(buttonStrip);\r\n\r\n            Utils.appendChild(element, buttonStripContainer);\r\n        }\r\n\r\n        Utils.appendChild(element, this._actionCardContainer);\r\n\r\n        for (const renderedAction of this._renderedActions) {\r\n            if (renderedAction.state === ActionButtonState.Expanded) {\r\n                this.expandShowCardAction(<ShowCardAction>renderedAction, false);\r\n\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this._renderedActions.length > 0 ? element : undefined;\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        if (!action) {\r\n            throw new Error(\"The action parameter cannot be null.\");\r\n        }\r\n\r\n        if ((!action.parent || action.parent === this._owner) && this._items.indexOf(action) < 0) {\r\n            this._items.push(action);\r\n\r\n            if (!action.parent) {\r\n                action.setParent(this._owner);\r\n            }\r\n\r\n            action[\"_actionCollection\"] = this;\r\n        } else {\r\n            throw new Error(Strings.errors.actionAlreadyParented());\r\n        }\r\n    }\r\n\r\n    removeAction(action: Action): boolean {\r\n        if (this.expandedAction && this._expandedAction === action) {\r\n            this.collapseExpandedAction();\r\n        }\r\n\r\n        const actionIndex = this._items.indexOf(action);\r\n\r\n        if (actionIndex >= 0) {\r\n            this._items.splice(actionIndex, 1);\r\n\r\n            action.setParent(undefined);\r\n\r\n            action[\"_actionCollection\"] = undefined;\r\n\r\n            for (let i = 0; i < this._renderedActions.length; i++) {\r\n                if (this._renderedActions[i] === action) {\r\n                    this._renderedActions.splice(i, 1);\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this._items = [];\r\n        this._renderedActions = [];\r\n        this._expandedAction = undefined;\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        let result: Input[] = [];\r\n\r\n        if (processActions) {\r\n            for (const action of this._items) {\r\n                result.push(...action.getAllInputs());\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result: IResourceInformation[] = [];\r\n\r\n        for (const action of this._items) {\r\n            result.push(...action.getResourceInformation());\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get renderedActionCount(): number {\r\n        return this._renderedActions.length;\r\n    }\r\n\r\n    get expandedAction(): ShowCardAction | undefined {\r\n        return this._expandedAction;\r\n    }\r\n}\r\n\r\nexport class ActionSet extends CardElement {\r\n    //#region Schema\r\n\r\n    static readonly orientationProperty = new EnumProperty(\r\n        Versions.v1_1,\r\n        \"orientation\",\r\n        Enums.Orientation\r\n    );\r\n\r\n    @property(ActionSet.orientationProperty)\r\n    orientation?: Enums.Orientation;\r\n\r\n    //#endregion\r\n\r\n    private _actionCollection: ActionCollection;\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._actionCollection.parse(source[\"actions\"], context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        this._actionCollection.toJSON(target, \"actions\", context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        return this._actionCollection.render(\r\n            this.orientation !== undefined\r\n                ? this.orientation\r\n                : this.hostConfig.actions.actionsOrientation\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._actionCollection = new ActionCollection(this);\r\n    }\r\n\r\n    releaseDOMResources() {\r\n        super.releaseDOMResources();\r\n\r\n        this._actionCollection.releaseDOMResources();\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this._actionCollection.renderedActionCount === 0) {\r\n            return super.isBleedingAtBottom();\r\n        } else {\r\n            if (this._actionCollection.getActionCount() === 1) {\r\n                return (\r\n                    this._actionCollection.expandedAction !== undefined &&\r\n                    !this.hostConfig.actions.preExpandSingleShowCardAction\r\n                );\r\n            } else {\r\n                return this._actionCollection.expandedAction !== undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ActionSet\";\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return this._actionCollection.getActionCount();\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        if (index >= 0 && index < this.getActionCount()) {\r\n            return this._actionCollection.getActionAt(index);\r\n        } else {\r\n            return super.getActionAt(index);\r\n        }\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        const result: Action | undefined = this._actionCollection.getActionById(id);\r\n\r\n        return result ? result : super.getActionById(id);\r\n    }\r\n\r\n    getAllActions(): Action[] {\r\n        const result = super.getAllActions();\r\n\r\n        for (let i = 0; i < this.getActionCount(); i++) {\r\n            let action = this.getActionAt(i);\r\n\r\n            if (action) {\r\n                result.push(action);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        this._actionCollection.validateProperties(context);\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        this._actionCollection.addAction(action);\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        return processActions ? this._actionCollection.getAllInputs() : [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        return this._actionCollection.getResourceInformation();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    findDOMNodeOwner(node: Node): CardObject | undefined {\r\n        let target: CardObject | undefined = undefined;\r\n\r\n        for (let i = 0; i < this.getActionCount(); i++) {\r\n            const action = this.getActionAt(i);\r\n\r\n            if (action) {\r\n                // recur through each Action\r\n                target = action.findDOMNodeOwner(node);\r\n\r\n                if (target) {\r\n                    return target;\r\n                }\r\n            }\r\n        }\r\n\r\n        // if not found in any Action, defer to parent implementation\r\n        return super.findDOMNodeOwner(node);\r\n    }\r\n\r\n    get isInteractive(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class ContainerStyleProperty extends ValueSetProperty {\r\n    constructor(\r\n        readonly targetVersion: Version,\r\n        readonly name: string,\r\n        readonly defaultValue?: string,\r\n        readonly onGetInitialValue?: (sender: SerializableObject) => string\r\n    ) {\r\n        super(\r\n            targetVersion,\r\n            name,\r\n            [\r\n                { value: Enums.ContainerStyle.Default },\r\n                { value: Enums.ContainerStyle.Emphasis },\r\n                { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Accent },\r\n                { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Good },\r\n                { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Attention },\r\n                { targetVersion: Versions.v1_2, value: Enums.ContainerStyle.Warning }\r\n            ],\r\n            defaultValue,\r\n            onGetInitialValue\r\n        );\r\n    }\r\n}\r\n\r\nexport abstract class StylableCardElementContainer extends CardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly styleProperty = new ContainerStyleProperty(Versions.v1_0, \"style\");\r\n\r\n    @property(StylableCardElementContainer.styleProperty)\r\n    get style(): string | undefined {\r\n        if (this.allowCustomStyle) {\r\n            const style = this.getValue(StylableCardElementContainer.styleProperty);\r\n\r\n            if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\r\n                return style;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    set style(value: string | undefined) {\r\n        this.setValue(StylableCardElementContainer.styleProperty, value);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    protected get allowCustomStyle(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get hasExplicitStyle(): boolean {\r\n        return this.getValue(StylableCardElementContainer.styleProperty) !== undefined;\r\n    }\r\n\r\n    protected applyBorder() {\r\n        // No border in base implementation\r\n    }\r\n\r\n    protected applyBackground() {\r\n        if (this.renderedElement) {\r\n            const styleDefinition = this.hostConfig.containerStyles.getStyleByName(\r\n                this.style,\r\n                this.hostConfig.containerStyles.getStyleByName(this.defaultStyle)\r\n            );\r\n\r\n            if (styleDefinition.backgroundColor) {\r\n                const bgColor = Utils.stringToCssColor(styleDefinition.backgroundColor);\r\n                if (bgColor) {\r\n                    this.renderedElement.style.backgroundColor = bgColor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected applyPadding() {\r\n        super.applyPadding();\r\n\r\n        if (!this.renderedElement) {\r\n            return;\r\n        }\r\n\r\n        let physicalPadding = new SpacingDefinition();\r\n\r\n        if (this.getEffectivePadding()) {\r\n            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(\r\n                this.getEffectivePadding()\r\n            );\r\n        }\r\n\r\n        this.renderedElement.style.paddingTop = physicalPadding.top + \"px\";\r\n        this.renderedElement.style.paddingRight = physicalPadding.right + \"px\";\r\n        this.renderedElement.style.paddingBottom = physicalPadding.bottom + \"px\";\r\n        this.renderedElement.style.paddingLeft = physicalPadding.left + \"px\";\r\n\r\n        if (this.isBleeding()) {\r\n            // Bleed into the first parent that does have padding\r\n            const padding = new PaddingDefinition();\r\n\r\n            this.getImmediateSurroundingPadding(padding);\r\n\r\n            const surroundingPadding =\r\n                this.hostConfig.paddingDefinitionToSpacingDefinition(padding);\r\n\r\n            this.renderedElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\r\n            this.renderedElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\r\n\r\n            if (!this.isDesignMode()) {\r\n                this.renderedElement.style.marginTop = \"-\" + surroundingPadding.top + \"px\";\r\n                this.renderedElement.style.marginBottom = \"-\" + surroundingPadding.bottom + \"px\";\r\n            }\r\n\r\n            if (\r\n                this.separatorElement &&\r\n                this.separatorOrientation === Enums.Orientation.Horizontal\r\n            ) {\r\n                this.separatorElement.style.marginLeft = \"-\" + surroundingPadding.left + \"px\";\r\n                this.separatorElement.style.marginRight = \"-\" + surroundingPadding.right + \"px\";\r\n            }\r\n        } else {\r\n            this.renderedElement.style.marginRight = \"0\";\r\n            this.renderedElement.style.marginLeft = \"0\";\r\n            this.renderedElement.style.marginTop = \"0\";\r\n            this.renderedElement.style.marginBottom = \"0\";\r\n\r\n            if (\r\n                this.separatorElement &&\r\n                this.separatorOrientation === Enums.Orientation.Horizontal\r\n            ) {\r\n                this.separatorElement.style.marginRight = \"0\";\r\n                this.separatorElement.style.marginLeft = \"0\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getHasBackground(ignoreBackgroundImages: boolean = false): boolean {\r\n        let currentElement: CardElement | undefined = this.parent;\r\n\r\n        while (currentElement) {\r\n            let currentElementHasBackgroundImage: boolean = false;\r\n\r\n            if (ignoreBackgroundImages) {\r\n                currentElementHasBackgroundImage = false;\r\n            } else {\r\n                currentElementHasBackgroundImage =\r\n                    currentElement instanceof Container\r\n                        ? currentElement.backgroundImage.isValid()\r\n                        : false;\r\n            }\r\n\r\n            if (currentElement instanceof StylableCardElementContainer) {\r\n                if (\r\n                    this.hasExplicitStyle &&\r\n                    (currentElement.getEffectiveStyle() !== this.getEffectiveStyle() ||\r\n                        currentElementHasBackgroundImage)\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            currentElement = currentElement.parent;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return this.getHasBackground() || this.getHasBorder()\r\n            ? new PaddingDefinition(\r\n                  Enums.Spacing.Padding,\r\n                  Enums.Spacing.Padding,\r\n                  Enums.Spacing.Padding,\r\n                  Enums.Spacing.Padding\r\n              )\r\n            : super.getDefaultPadding();\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        const explicitStyle = this.getValue(StylableCardElementContainer.styleProperty);\r\n\r\n        if (explicitStyle !== undefined) {\r\n            const styleDefinition = this.hostConfig.containerStyles.getStyleByName(explicitStyle);\r\n\r\n            if (!styleDefinition) {\r\n                context.addFailure(\r\n                    this,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidPropertyValue(explicitStyle, \"style\")\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): HTMLElement | undefined {\r\n        const renderedElement = super.render();\r\n\r\n        if (renderedElement && this.getHasBackground()) {\r\n            this.applyBackground();\r\n        }\r\n\r\n        this.applyBorder();\r\n\r\n        return renderedElement;\r\n    }\r\n\r\n    getEffectiveStyle(): string {\r\n        const effectiveStyle = this.style;\r\n\r\n        return effectiveStyle ? effectiveStyle : super.getEffectiveStyle();\r\n    }\r\n}\r\n\r\nexport abstract class ContainerBase extends StylableCardElementContainer {\r\n    //#region Schema\r\n\r\n    static readonly bleedProperty = new BoolProperty(Versions.v1_2, \"bleed\", false);\r\n    static readonly minHeightProperty = new PixelSizeProperty(Versions.v1_2, \"minHeight\");\r\n\r\n    @property(ContainerBase.bleedProperty)\r\n    private _bleed: boolean = false;\r\n\r\n    @property(ContainerBase.minHeightProperty)\r\n    minPixelHeight?: number;\r\n\r\n    //#endregion\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        super.adjustRenderedElementSize(renderedElement);\r\n\r\n        if (this.minPixelHeight) {\r\n            renderedElement.style.minHeight = this.minPixelHeight + \"px\";\r\n        }\r\n    }\r\n\r\n    protected getHasExpandedAction(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getBleed(): boolean {\r\n        return this._bleed;\r\n    }\r\n\r\n    protected setBleed(value: boolean) {\r\n        this._bleed = value;\r\n    }\r\n\r\n    protected get renderedActionCount(): number {\r\n        return 0;\r\n    }\r\n\r\n    isBleeding(): boolean {\r\n        return (this.getHasBackground() || this.hostConfig.alwaysAllowBleed) && this.getBleed();\r\n    }\r\n}\r\n\r\nexport class BackgroundImage extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly urlProperty = new StringProperty(Versions.v1_0, \"url\");\r\n    static readonly fillModeProperty = new EnumProperty(\r\n        Versions.v1_2,\r\n        \"fillMode\",\r\n        Enums.FillMode,\r\n        Enums.FillMode.Cover\r\n    );\r\n    static readonly horizontalAlignmentProperty = new EnumProperty(\r\n        Versions.v1_2,\r\n        \"horizontalAlignment\",\r\n        Enums.HorizontalAlignment,\r\n        Enums.HorizontalAlignment.Left\r\n    );\r\n    static readonly verticalAlignmentProperty = new EnumProperty(\r\n        Versions.v1_2,\r\n        \"verticalAlignment\",\r\n        Enums.VerticalAlignment,\r\n        Enums.VerticalAlignment.Top\r\n    );\r\n\r\n    @property(BackgroundImage.urlProperty)\r\n    url?: string;\r\n\r\n    @property(BackgroundImage.fillModeProperty)\r\n    fillMode: Enums.FillMode;\r\n\r\n    @property(BackgroundImage.horizontalAlignmentProperty)\r\n    horizontalAlignment: Enums.HorizontalAlignment;\r\n\r\n    @property(BackgroundImage.verticalAlignmentProperty)\r\n    verticalAlignment: Enums.VerticalAlignment;\r\n\r\n    //#endregion\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"BackgroundImage\";\r\n    }\r\n\r\n    protected internalParse(source: any, context: BaseSerializationContext) {\r\n        if (typeof source === \"string\") {\r\n            this.resetDefaultValues();\r\n            this.url = source;\r\n        } else {\r\n            return super.internalParse(source, context);\r\n        }\r\n    }\r\n\r\n    apply(element: CardElement) {\r\n        if (this.url && element.renderedElement) {\r\n            element.renderedElement.style.backgroundImage =\r\n                \"url('\" +\r\n                element.preProcessPropertyValue(BackgroundImage.urlProperty, this.url) +\r\n                \"')\";\r\n\r\n            switch (this.fillMode) {\r\n                case Enums.FillMode.Repeat:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat\";\r\n                    break;\r\n                case Enums.FillMode.RepeatHorizontally:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat-x\";\r\n                    break;\r\n                case Enums.FillMode.RepeatVertically:\r\n                    element.renderedElement.style.backgroundRepeat = \"repeat-y\";\r\n                    break;\r\n                case Enums.FillMode.Cover:\r\n                default:\r\n                    element.renderedElement.style.backgroundRepeat = \"no-repeat\";\r\n                    element.renderedElement.style.backgroundSize = \"cover\";\r\n                    break;\r\n            }\r\n\r\n            switch (this.horizontalAlignment) {\r\n                case Enums.HorizontalAlignment.Left:\r\n                    break;\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.renderedElement.style.backgroundPositionX = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.renderedElement.style.backgroundPositionX = \"right\";\r\n                    break;\r\n            }\r\n\r\n            switch (this.verticalAlignment) {\r\n                case Enums.VerticalAlignment.Top:\r\n                    break;\r\n                case Enums.VerticalAlignment.Center:\r\n                    element.renderedElement.style.backgroundPositionY = \"center\";\r\n                    break;\r\n                case Enums.VerticalAlignment.Bottom:\r\n                    element.renderedElement.style.backgroundPositionY = \"bottom\";\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return this.url ? true : false;\r\n    }\r\n}\r\n\r\nexport class Container extends ContainerBase {\r\n    //#region Schema\r\n    static readonly backgroundImageProperty = new SerializableObjectProperty(\r\n        Versions.v1_0,\r\n        \"backgroundImage\",\r\n        BackgroundImage\r\n    );\r\n    static readonly verticalContentAlignmentProperty = new EnumProperty(\r\n        Versions.v1_1,\r\n        \"verticalContentAlignment\",\r\n        Enums.VerticalAlignment\r\n    );\r\n    static readonly rtlProperty = new BoolProperty(Versions.v1_0, \"rtl\");\r\n\r\n    @property(Container.backgroundImageProperty)\r\n    get backgroundImage(): BackgroundImage {\r\n        return this.getValue(Container.backgroundImageProperty);\r\n    }\r\n\r\n    @property(Container.verticalContentAlignmentProperty)\r\n    verticalContentAlignment?: Enums.VerticalAlignment;\r\n\r\n    @property(Container.rtlProperty)\r\n    rtl?: boolean;\r\n\r\n    //#endregion\r\n\r\n    private _items: CardElement[] = [];\r\n    private _renderedItems: CardElement[] = [];\r\n\r\n    protected insertItemAt(item: CardElement, index: number, forceInsert: boolean) {\r\n        if (!item.parent || forceInsert) {\r\n            if (item.isStandalone) {\r\n                if (index < 0 || index >= this._items.length) {\r\n                    this._items.push(item);\r\n                } else {\r\n                    this._items.splice(index, 0, item);\r\n                }\r\n\r\n                item.setParent(this);\r\n            } else {\r\n                throw new Error(Strings.errors.elementTypeNotStandalone(item.getJsonTypeName()));\r\n            }\r\n        } else {\r\n            throw new Error(Strings.errors.elementAlreadyParented());\r\n        }\r\n    }\r\n\r\n    protected getItemsCollectionPropertyName(): string {\r\n        return \"items\";\r\n    }\r\n\r\n    protected applyBackground() {\r\n        if (this.backgroundImage.isValid() && this.renderedElement) {\r\n            this.backgroundImage.apply(this);\r\n        }\r\n\r\n        super.applyBackground();\r\n    }\r\n\r\n    protected applyRTL(element: HTMLElement) {\r\n        if (this.rtl !== undefined) {\r\n            element.dir = this.rtl ? \"rtl\" : \"ltr\";\r\n        }\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._renderedItems = [];\r\n\r\n        // Cache hostConfig to avoid walking the parent hierarchy several times\r\n        const hostConfig = this.hostConfig;\r\n\r\n        const element = document.createElement(\"div\");\r\n\r\n        this.applyRTL(element);\r\n\r\n        element.classList.add(hostConfig.makeCssClassName(\"ac-container\"));\r\n        element.style.display = \"flex\";\r\n        element.style.flexDirection = \"column\";\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation) {\r\n            // Forces the container to be at least as tall as its content.\r\n            //\r\n            // Fixes a quirk in Chrome where, for nested flex elements, the\r\n            // inner element's height would never exceed the outer element's\r\n            // height. This caused overflow truncation to break -- containers\r\n            // would always be measured as not overflowing, since their heights\r\n            // were constrained by their parents as opposed to truly reflecting\r\n            // the height of their content.\r\n            //\r\n            // See the \"Browser Rendering Notes\" section of this answer:\r\n            // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size\r\n            element.style.minHeight = \"-webkit-min-content\";\r\n        }\r\n\r\n        switch (this.getEffectiveVerticalContentAlignment()) {\r\n            case Enums.VerticalAlignment.Center:\r\n                element.style.justifyContent = \"center\";\r\n                break;\r\n            case Enums.VerticalAlignment.Bottom:\r\n                element.style.justifyContent = \"flex-end\";\r\n                break;\r\n            default:\r\n                element.style.justifyContent = \"flex-start\";\r\n                break;\r\n        }\r\n\r\n        if (this._items.length > 0) {\r\n            for (const item of this._items) {\r\n                const renderedItem = this.isElementAllowed(item) ? item.render() : undefined;\r\n\r\n                if (renderedItem) {\r\n                    if (this._renderedItems.length > 0 && item.separatorElement) {\r\n                        item.separatorElement.style.flex = \"0 0 auto\";\r\n\r\n                        Utils.appendChild(element, item.separatorElement);\r\n                    }\r\n\r\n                    Utils.appendChild(element, renderedItem);\r\n\r\n                    this._renderedItems.push(item);\r\n                }\r\n            }\r\n        } else {\r\n            if (this.isDesignMode()) {\r\n                const placeholderElement = this.createPlaceholderElement();\r\n                placeholderElement.style.width = \"100%\";\r\n                placeholderElement.style.height = \"100%\";\r\n\r\n                element.appendChild(placeholderElement);\r\n            }\r\n        }\r\n\r\n        return element;\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        if (this.renderedElement) {\r\n            // Add 1 to account for rounding differences between browsers\r\n            const boundary = this.renderedElement.offsetTop + maxHeight + 1;\r\n\r\n            const handleElement = (cardElement: CardElement) => {\r\n                const elt = cardElement.renderedElement;\r\n\r\n                if (elt) {\r\n                    switch (Utils.getFitStatus(elt, boundary)) {\r\n                        case Enums.ContainerFitStatus.FullyInContainer:\r\n                            const sizeChanged = cardElement[\"resetOverflow\"]();\r\n                            // If the element's size changed after resetting content,\r\n                            // we have to check if it still fits fully in the card\r\n                            if (sizeChanged) {\r\n                                handleElement(cardElement);\r\n                            }\r\n                            break;\r\n                        case Enums.ContainerFitStatus.Overflowing:\r\n                            const containerMaxHeight = boundary - elt.offsetTop;\r\n                            cardElement[\"handleOverflow\"](containerMaxHeight);\r\n                            break;\r\n                        case Enums.ContainerFitStatus.FullyOutOfContainer:\r\n                            cardElement[\"handleOverflow\"](0);\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            for (const item of this._items) {\r\n                handleElement(item);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        for (const item of this._items) {\r\n            item[\"resetOverflow\"]();\r\n        }\r\n    }\r\n\r\n    protected getHasBackground(ignoreBackgroundImages: boolean = false): boolean {\r\n        let result = ignoreBackgroundImages ? false : this.backgroundImage.isValid();\r\n\r\n        return result || super.getHasBackground(ignoreBackgroundImages);\r\n    }\r\n\r\n    protected canHostSingletons() {\r\n        return false;\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this.clear();\r\n        this.setShouldFallback(false);\r\n\r\n        let jsonItems = source[this.getItemsCollectionPropertyName()];\r\n\r\n        if (\r\n            !Array.isArray(jsonItems) &&\r\n            typeof jsonItems === \"object\" &&\r\n            this.canHostSingletons()\r\n        ) {\r\n            const typeName = Utils.parseString(jsonItems[\"type\"]);\r\n            if (typeName) {\r\n                const registration = context.elementRegistry.findByName(typeName);\r\n                if (registration?.singletonBehavior !== ElementSingletonBehavior.NotAllowed) {\r\n                    const element = context.parseElement(\r\n                        this,\r\n                        jsonItems,\r\n                        [],\r\n                        !this.isDesignMode(),\r\n                        true\r\n                    );\r\n\r\n                    if (element) {\r\n                        this.insertItemAt(element, -1, true);\r\n                    }\r\n                }\r\n            }\r\n        } else if (Array.isArray(jsonItems)) {\r\n            for (const item of jsonItems) {\r\n                const element = context.parseElement(\r\n                    this,\r\n                    item,\r\n                    this.forbiddenChildElements(),\r\n                    !this.isDesignMode()\r\n                );\r\n\r\n                if (element) {\r\n                    this.insertItemAt(element, -1, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        const collectionPropertyName = this.getItemsCollectionPropertyName();\r\n\r\n        if (\r\n            this._items.length === 1 &&\r\n            this._items[0].getElementSingletonBehavior() === ElementSingletonBehavior.Only\r\n        ) {\r\n            // If the element is only allowed in a singleton context, parse it to an object instead of an array\r\n            context.serializeValue(target, collectionPropertyName, this._items[0].toJSON(context));\r\n        } else {\r\n            context.serializeArray(target, collectionPropertyName, this._items);\r\n        }\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    getEffectivePadding(): PaddingDefinition {\r\n        if (\r\n            GlobalSettings.removePaddingFromContainersWithBackgroundImage &&\r\n            !this.getHasBackground(true)\r\n        ) {\r\n            return new PaddingDefinition();\r\n        }\r\n\r\n        return super.getEffectivePadding();\r\n    }\r\n\r\n    getEffectiveVerticalContentAlignment(): Enums.VerticalAlignment {\r\n        if (this.verticalContentAlignment !== undefined) {\r\n            return this.verticalContentAlignment;\r\n        }\r\n\r\n        const parentContainer = this.getParentContainer();\r\n\r\n        return parentContainer\r\n            ? parentContainer.getEffectiveVerticalContentAlignment()\r\n            : Enums.VerticalAlignment.Top;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._items.length;\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this._items[index];\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\r\n            for (const item of this._renderedItems) {\r\n                if (item.isVisible) {\r\n                    return item;\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {\r\n            for (let i = this._renderedItems.length - 1; i >= 0; i--) {\r\n                if (this._renderedItems[i].isVisible) {\r\n                    return this._renderedItems[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Container\";\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        const designMode = this.isDesignMode();\r\n\r\n        for (const item of this._items) {\r\n            if (item.isVisible || designMode) {\r\n                return item === element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        const designMode = this.isDesignMode();\r\n\r\n        for (let i = this._items.length - 1; i >= 0; i--) {\r\n            if (this._items[i].isVisible || designMode) {\r\n                return this._items[i] === element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isRtl(): boolean {\r\n        if (this.rtl !== undefined) {\r\n            return this.rtl;\r\n        } else {\r\n            const parentContainer = this.getParentContainer();\r\n\r\n            return parentContainer ? parentContainer.isRtl() : false;\r\n        }\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        const firstRenderedItem = this.getFirstVisibleRenderedItem();\r\n\r\n        return (\r\n            this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false)\r\n        );\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        const lastRenderedItem = this.getLastVisibleRenderedItem();\r\n\r\n        return (\r\n            this.isBleeding() ||\r\n            (lastRenderedItem\r\n                ? lastRenderedItem.isBleedingAtBottom() &&\r\n                  lastRenderedItem.getEffectiveStyle() === this.getEffectiveStyle()\r\n                : false)\r\n        );\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return this._items.indexOf(cardElement);\r\n    }\r\n\r\n    addItem(item: CardElement) {\r\n        this.insertItemAt(item, -1, false);\r\n    }\r\n\r\n    insertItemBefore(item: CardElement, insertBefore: CardElement) {\r\n        this.insertItemAt(item, this._items.indexOf(insertBefore), false);\r\n    }\r\n\r\n    insertItemAfter(item: CardElement, insertAfter: CardElement) {\r\n        this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        const itemIndex = this._items.indexOf(item);\r\n\r\n        if (itemIndex >= 0) {\r\n            this._items.splice(itemIndex, 1);\r\n\r\n            item.setParent(undefined);\r\n\r\n            this.updateLayout();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clear() {\r\n        this._items = [];\r\n        this._renderedItems = [];\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        const result = super.getResourceInformation();\r\n\r\n        if (this.backgroundImage.isValid()) {\r\n            result.push({\r\n                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion -- validated by `isValid()`\r\n                url: this.backgroundImage.url!,\r\n                mimeType: \"image\"\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = super.getActionById(id);\r\n\r\n        if (!result) {\r\n            if (this.selectAction) {\r\n                result = this.selectAction.getActionById(id);\r\n            }\r\n\r\n            if (!result) {\r\n                for (const item of this._items) {\r\n                    result = item.getActionById(id);\r\n\r\n                    if (result) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get padding(): PaddingDefinition | undefined {\r\n        return this.getPadding();\r\n    }\r\n\r\n    set padding(value: PaddingDefinition | undefined) {\r\n        this.setPadding(value);\r\n    }\r\n\r\n    get selectAction(): Action | undefined {\r\n        return this._selectAction;\r\n    }\r\n\r\n    set selectAction(value: Action | undefined) {\r\n        this._selectAction = value;\r\n    }\r\n\r\n    get bleed(): boolean {\r\n        return this.getBleed();\r\n    }\r\n\r\n    set bleed(value: boolean) {\r\n        this.setBleed(value);\r\n    }\r\n}\r\n\r\nexport type ColumnWidth = SizeAndUnit | \"auto\" | \"stretch\";\r\n\r\nexport class Column extends Container {\r\n    //#region Schema\r\n\r\n    static readonly widthProperty = new CustomProperty<ColumnWidth>(\r\n        Versions.v1_0,\r\n        \"width\",\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            source: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            let result: ColumnWidth = prop.defaultValue;\r\n            const value = source[prop.name];\r\n            let invalidWidth = false;\r\n\r\n            if (typeof value === \"number\" && !isNaN(value)) {\r\n                result = new SizeAndUnit(value, Enums.SizeUnit.Weight);\r\n            } else if (value === \"auto\" || value === \"stretch\") {\r\n                result = value;\r\n            } else if (typeof value === \"string\") {\r\n                try {\r\n                    result = SizeAndUnit.parse(value);\r\n\r\n                    if (\r\n                        result.unit === Enums.SizeUnit.Pixel &&\r\n                        prop.targetVersion.compareTo(context.targetVersion) > 0\r\n                    ) {\r\n                        invalidWidth = true;\r\n                    }\r\n                } catch (e) {\r\n                    invalidWidth = true;\r\n                }\r\n            } else {\r\n                invalidWidth = true;\r\n            }\r\n\r\n            if (invalidWidth) {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidColumnWidth(value)\r\n                );\r\n\r\n                result = \"auto\";\r\n            }\r\n\r\n            return result;\r\n        },\r\n        (\r\n            sender: SerializableObject,\r\n            property: PropertyDefinition,\r\n            target: PropertyBag,\r\n            value: ColumnWidth,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            if (value instanceof SizeAndUnit) {\r\n                if (value.unit === Enums.SizeUnit.Pixel) {\r\n                    context.serializeValue(target, \"width\", value.physicalSize + \"px\");\r\n                } else {\r\n                    context.serializeNumber(target, \"width\", value.physicalSize);\r\n                }\r\n            } else {\r\n                context.serializeValue(target, \"width\", value);\r\n            }\r\n        },\r\n        \"stretch\"\r\n    );\r\n\r\n    @property(Column.widthProperty)\r\n    width: ColumnWidth = \"stretch\";\r\n\r\n    //#endregion\r\n\r\n    private _computedWeight: number = 0;\r\n\r\n    protected adjustRenderedElementSize(renderedElement: HTMLElement) {\r\n        const minDesignTimeColumnHeight = 20;\r\n\r\n        if (this.isDesignMode()) {\r\n            renderedElement.style.minWidth = \"20px\";\r\n            renderedElement.style.minHeight =\r\n                (!this.minPixelHeight\r\n                    ? minDesignTimeColumnHeight\r\n                    : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + \"px\";\r\n        } else {\r\n            renderedElement.style.minWidth = \"0\";\r\n\r\n            if (this.minPixelHeight) {\r\n                renderedElement.style.minHeight = this.minPixelHeight + \"px\";\r\n            }\r\n        }\r\n\r\n        if (this.width === \"auto\") {\r\n            renderedElement.style.flex = \"0 1 auto\";\r\n        } else if (this.width === \"stretch\") {\r\n            renderedElement.style.flex = \"1 1 50px\";\r\n        } else if (this.width instanceof SizeAndUnit) {\r\n            if (this.width.unit === Enums.SizeUnit.Pixel) {\r\n                renderedElement.style.flex = \"0 0 auto\";\r\n                renderedElement.style.width = this.width.physicalSize + \"px\";\r\n            } else {\r\n                renderedElement.style.flex =\r\n                    \"1 1 \" +\r\n                    (this._computedWeight > 0 ? this._computedWeight : this.width.physicalSize) +\r\n                    \"%\";\r\n            }\r\n        }\r\n    }\r\n\r\n    protected shouldSerialize(_context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get separatorOrientation(): Enums.Orientation {\r\n        return Enums.Orientation.Vertical;\r\n    }\r\n\r\n    constructor(width: ColumnWidth = \"stretch\") {\r\n        super();\r\n\r\n        this.width = width;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Column\";\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        if (this.parent && this.parent instanceof ColumnSet) {\r\n            return this.separatorElement !== undefined && !this.parent.isLeftMostElement(this);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class ColumnSet extends ContainerBase {\r\n    private _columns: Column[] = [];\r\n    private _renderedColumns: Column[];\r\n\r\n    private createColumnInstance(source: any, context: SerializationContext): Column | undefined {\r\n        return context.parseCardObject<Column>(\r\n            this,\r\n            source,\r\n            [],\r\n            !this.isDesignMode(),\r\n            (typeName: string) => {\r\n                return !typeName || typeName === \"Column\" ? new Column() : undefined;\r\n            },\r\n            (typeName: string, _errorType: Enums.TypeErrorType) => {\r\n                context.logParseEvent(\r\n                    undefined,\r\n                    Enums.ValidationEvent.ElementTypeNotAllowed,\r\n                    Strings.errors.elementTypeNotAllowed(typeName)\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        this._renderedColumns = [];\r\n\r\n        if (this._columns.length > 0) {\r\n            // Cache hostConfig to avoid walking the parent hierarchy several times\r\n            const hostConfig = this.hostConfig;\r\n\r\n            const element = document.createElement(\"div\");\r\n            element.className = hostConfig.makeCssClassName(\"ac-columnSet\");\r\n            element.style.display = \"flex\";\r\n\r\n            if (GlobalSettings.useAdvancedCardBottomTruncation) {\r\n                // See comment in Container.internalRender()\r\n                element.style.minHeight = \"-webkit-min-content\";\r\n            }\r\n\r\n            switch (this.getEffectiveHorizontalAlignment()) {\r\n                case Enums.HorizontalAlignment.Center:\r\n                    element.style.justifyContent = \"center\";\r\n                    break;\r\n                case Enums.HorizontalAlignment.Right:\r\n                    element.style.justifyContent = \"flex-end\";\r\n                    break;\r\n                default:\r\n                    element.style.justifyContent = \"flex-start\";\r\n                    break;\r\n            }\r\n\r\n            let totalWeight: number = 0;\r\n\r\n            for (const column of this._columns) {\r\n                if (\r\n                    column.width instanceof SizeAndUnit &&\r\n                    column.width.unit === Enums.SizeUnit.Weight\r\n                ) {\r\n                    totalWeight += column.width.physicalSize;\r\n                }\r\n            }\r\n\r\n            for (const column of this._columns) {\r\n                if (\r\n                    column.width instanceof SizeAndUnit &&\r\n                    column.width.unit === Enums.SizeUnit.Weight &&\r\n                    totalWeight > 0\r\n                ) {\r\n                    const computedWeight = (100 / totalWeight) * column.width.physicalSize;\r\n\r\n                    // Best way to emulate \"internal\" access I know of\r\n                    column[\"_computedWeight\"] = computedWeight;\r\n                }\r\n\r\n                const renderedColumn = column.render();\r\n\r\n                if (renderedColumn) {\r\n                    if (this._renderedColumns.length > 0 && column.separatorElement) {\r\n                        column.separatorElement.style.flex = \"0 0 auto\";\r\n\r\n                        Utils.appendChild(element, column.separatorElement);\r\n                    }\r\n\r\n                    Utils.appendChild(element, renderedColumn);\r\n\r\n                    this._renderedColumns.push(column);\r\n                }\r\n            }\r\n\r\n            return this._renderedColumns.length > 0 ? element : undefined;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected truncateOverflow(maxHeight: number): boolean {\r\n        for (const column of this._columns) {\r\n            column[\"handleOverflow\"](maxHeight);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected undoOverflowTruncation() {\r\n        for (const column of this._columns) {\r\n            column[\"resetOverflow\"]();\r\n        }\r\n    }\r\n\r\n    protected get isSelectable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._columns = [];\r\n        this._renderedColumns = [];\r\n\r\n        const jsonColumns = source[\"columns\"];\r\n\r\n        if (Array.isArray(jsonColumns)) {\r\n            for (const item of jsonColumns) {\r\n                const column = this.createColumnInstance(item, context);\r\n\r\n                if (column) {\r\n                    this._columns.push(column);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        context.serializeArray(target, \"columns\", this._columns);\r\n    }\r\n\r\n    isFirstElement(element: CardElement): boolean {\r\n        for (const column of this._columns) {\r\n            if (column.isVisible) {\r\n                return column === element;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtTop(): boolean {\r\n        if (this.isBleeding()) {\r\n            return true;\r\n        }\r\n\r\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\r\n            for (const column of this._columns) {\r\n                if (column.isBleedingAtTop()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this.isBleeding()) {\r\n            return true;\r\n        }\r\n\r\n        if (this._renderedColumns && this._renderedColumns.length > 0) {\r\n            for (const column of this._columns) {\r\n                if (column.isBleedingAtBottom()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._columns.length;\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\r\n            return this._renderedColumns[0];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): CardElement | undefined {\r\n        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {\r\n            return this._renderedColumns[this._renderedColumns.length - 1];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    getColumnAt(index: number): Column {\r\n        return this._columns[index];\r\n    }\r\n\r\n    getItemAt(index: number): CardElement {\r\n        return this.getColumnAt(index);\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"ColumnSet\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        let weightedColumns: number = 0;\r\n        let stretchedColumns: number = 0;\r\n\r\n        for (const column of this._columns) {\r\n            if (typeof column.width === \"number\") {\r\n                weightedColumns++;\r\n            } else if (column.width === \"stretch\") {\r\n                stretchedColumns++;\r\n            }\r\n        }\r\n\r\n        if (weightedColumns > 0 && stretchedColumns > 0) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.Hint,\r\n                Strings.hints.dontUseWeightedAndStrecthedColumnsInSameSet()\r\n            );\r\n        }\r\n    }\r\n\r\n    addColumn(column: Column) {\r\n        if (!column.parent) {\r\n            this._columns.push(column);\r\n\r\n            column.setParent(this);\r\n        } else {\r\n            throw new Error(Strings.errors.columnAlreadyBelongsToAnotherSet());\r\n        }\r\n    }\r\n\r\n    removeItem(item: CardElement): boolean {\r\n        if (item instanceof Column) {\r\n            const itemIndex = this._columns.indexOf(item);\r\n\r\n            if (itemIndex >= 0) {\r\n                this._columns.splice(itemIndex, 1);\r\n\r\n                item.setParent(undefined);\r\n\r\n                this.updateLayout();\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;\r\n    }\r\n\r\n    isLeftMostElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) === 0;\r\n    }\r\n\r\n    isRightMostElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) === this._columns.length - 1;\r\n    }\r\n\r\n    isTopElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) >= 0;\r\n    }\r\n\r\n    isBottomElement(element: CardElement): boolean {\r\n        return this._columns.indexOf(<Column>element) >= 0;\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        let result: Action | undefined = undefined;\r\n\r\n        for (const column of this._columns) {\r\n            result = column.getActionById(id);\r\n\r\n            if (result) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    get bleed(): boolean {\r\n        return this.getBleed();\r\n    }\r\n\r\n    set bleed(value: boolean) {\r\n        this.setBleed(value);\r\n    }\r\n\r\n    get padding(): PaddingDefinition | undefined {\r\n        return this.getPadding();\r\n    }\r\n\r\n    set padding(value: PaddingDefinition | undefined) {\r\n        this.setPadding(value);\r\n    }\r\n\r\n    get selectAction(): Action | undefined {\r\n        return this._selectAction;\r\n    }\r\n\r\n    set selectAction(value: Action | undefined) {\r\n        this._selectAction = value;\r\n    }\r\n}\r\n\r\nfunction raiseImageLoadedEvent(image: Image) {\r\n    const card = image.getRootElement() as AdaptiveCard;\r\n    const onImageLoadedHandler =\r\n        card && card.onImageLoaded ? card.onImageLoaded : AdaptiveCard.onImageLoaded;\r\n\r\n    if (onImageLoadedHandler) {\r\n        onImageLoadedHandler(image);\r\n    }\r\n}\r\n\r\nfunction raiseAnchorClickedEvent(\r\n    element: CardElement,\r\n    anchor: HTMLAnchorElement,\r\n    ev?: MouseEvent\r\n): boolean {\r\n    const card = element.getRootElement() as AdaptiveCard;\r\n    const onAnchorClickedHandler =\r\n        card && card.onAnchorClicked ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;\r\n\r\n    return onAnchorClickedHandler !== undefined\r\n        ? onAnchorClickedHandler(element, anchor, ev)\r\n        : false;\r\n}\r\n\r\nfunction raiseExecuteActionEvent(action: Action) {\r\n    const card = action.parent ? (action.parent.getRootElement() as AdaptiveCard) : undefined;\r\n    const onExecuteActionHandler =\r\n        card && card.onExecuteAction ? card.onExecuteAction : AdaptiveCard.onExecuteAction;\r\n\r\n    if (action.prepareForExecution() && onExecuteActionHandler) {\r\n        onExecuteActionHandler(action);\r\n    }\r\n}\r\n\r\nfunction raiseInlineCardExpandedEvent(action: ShowCardAction, isExpanded: boolean) {\r\n    const card = action.parent ? (action.parent.getRootElement() as AdaptiveCard) : undefined;\r\n    const onInlineCardExpandedHandler =\r\n        card && card.onInlineCardExpanded\r\n            ? card.onInlineCardExpanded\r\n            : AdaptiveCard.onInlineCardExpanded;\r\n\r\n    if (onInlineCardExpandedHandler) {\r\n        onInlineCardExpandedHandler(action, isExpanded);\r\n    }\r\n}\r\n\r\nfunction raiseInputValueChangedEvent(input: Input) {\r\n    const card = input.getRootElement() as AdaptiveCard;\r\n    const onInputValueChangedHandler =\r\n        card && card.onInputValueChanged\r\n            ? card.onInputValueChanged\r\n            : AdaptiveCard.onInputValueChanged;\r\n\r\n    if (onInputValueChangedHandler) {\r\n        onInputValueChangedHandler(input);\r\n    }\r\n}\r\n\r\nfunction raiseElementVisibilityChangedEvent(\r\n    element: CardElement,\r\n    shouldUpdateLayout: boolean = true\r\n) {\r\n    const rootElement = element.getRootElement();\r\n\r\n    if (shouldUpdateLayout) {\r\n        rootElement.updateLayout();\r\n    }\r\n\r\n    const card = rootElement as AdaptiveCard;\r\n    const onElementVisibilityChangedHandler =\r\n        card && card.onElementVisibilityChanged\r\n            ? card.onElementVisibilityChanged\r\n            : AdaptiveCard.onElementVisibilityChanged;\r\n\r\n    if (onElementVisibilityChangedHandler !== undefined) {\r\n        onElementVisibilityChangedHandler(element);\r\n    }\r\n}\r\n\r\n/**\r\n * @returns return false to continue with default context menu; return true to skip SDK default context menu\r\n */\r\nfunction raiseDisplayOverflowActionMenuEvent(\r\n    action: OverflowAction,\r\n    target?: HTMLElement\r\n): boolean {\r\n    const card = action.parent ? (action.parent.getRootElement() as AdaptiveCard) : undefined;\r\n    const onDisplayOverflowActionMenuHandler =\r\n        card && card.onDisplayOverflowActionMenu\r\n            ? card.onDisplayOverflowActionMenu\r\n            : AdaptiveCard.onDisplayOverflowActionMenu;\r\n\r\n    return onDisplayOverflowActionMenuHandler !== undefined\r\n        ? onDisplayOverflowActionMenuHandler(action.getActions(), target)\r\n        : false;\r\n}\r\n\r\n/**\r\n * @returns return false to continue with default action button; return true to skip SDK default action button\r\n */\r\nfunction raiseRenderOverflowActionsEvent(\r\n    action: OverflowAction,\r\n    isAtRootLevelActions: boolean\r\n): boolean {\r\n    const card = action.parent ? (action.parent.getRootElement() as AdaptiveCard) : undefined;\r\n    const onRenderOverflowActionsHandler =\r\n        card && card.onRenderOverflowActions\r\n            ? card.onRenderOverflowActions\r\n            : AdaptiveCard.onRenderOverflowActions;\r\n\r\n    return onRenderOverflowActionsHandler !== undefined\r\n        ? onRenderOverflowActionsHandler(action.getActions(), isAtRootLevelActions)\r\n        : false;\r\n}\r\n\r\nexport abstract class ContainerWithActions extends Container {\r\n    private _actionCollection: ActionCollection;\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this.parseActions(source, context);\r\n    }\r\n\r\n    protected parseActions(source: any, context: SerializationContext) {\r\n        this._actionCollection.parse(source[\"actions\"], context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        this._actionCollection.toJSON(target, \"actions\", context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        const element = super.internalRender();\r\n\r\n        if (element) {\r\n            const renderedActions = this._actionCollection.render(\r\n                this.hostConfig.actions.actionsOrientation\r\n            );\r\n\r\n            if (renderedActions) {\r\n                Utils.appendChild(\r\n                    element,\r\n                    renderSeparation(\r\n                        this.hostConfig,\r\n                        {\r\n                            spacing: this.hostConfig.getEffectiveSpacing(\r\n                                this.hostConfig.actions.spacing\r\n                            )\r\n                        },\r\n                        Enums.Orientation.Horizontal\r\n                    )\r\n                );\r\n                Utils.appendChild(element, renderedActions);\r\n            }\r\n\r\n            if (this.renderIfEmpty) {\r\n                return element;\r\n            } else {\r\n                return element.children.length > 0 ? element : undefined;\r\n            }\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected getHasExpandedAction(): boolean {\r\n        if (this.renderedActionCount === 0) {\r\n            return false;\r\n        } else if (this.renderedActionCount === 1) {\r\n            return (\r\n                this._actionCollection.expandedAction !== undefined &&\r\n                !this.hostConfig.actions.preExpandSingleShowCardAction\r\n            );\r\n        } else {\r\n            return this._actionCollection.expandedAction !== undefined;\r\n        }\r\n    }\r\n\r\n    protected get renderedActionCount(): number {\r\n        return this._actionCollection.renderedActionCount;\r\n    }\r\n\r\n    protected get renderIfEmpty(): boolean {\r\n        return false;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this._actionCollection = new ActionCollection(this);\r\n    }\r\n\r\n    releaseDOMResources() {\r\n        super.releaseDOMResources();\r\n\r\n        this._actionCollection.releaseDOMResources();\r\n    }\r\n\r\n    getActionCount(): number {\r\n        return this._actionCollection.getActionCount();\r\n    }\r\n\r\n    getActionAt(index: number): Action | undefined {\r\n        if (index >= 0 && index < this.getActionCount()) {\r\n            return this._actionCollection.getActionAt(index);\r\n        } else {\r\n            return super.getActionAt(index);\r\n        }\r\n    }\r\n\r\n    getActionById(id: string): Action | undefined {\r\n        const result: Action | undefined = this._actionCollection.getActionById(id);\r\n\r\n        return result ? result : super.getActionById(id);\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this._actionCollection) {\r\n            this._actionCollection.validateProperties(context);\r\n        }\r\n    }\r\n\r\n    isLastElement(element: CardElement): boolean {\r\n        return super.isLastElement(element) && this._actionCollection.getActionCount() === 0;\r\n    }\r\n\r\n    addAction(action: Action) {\r\n        this._actionCollection.addAction(action);\r\n    }\r\n\r\n    clear() {\r\n        super.clear();\r\n\r\n        this._actionCollection.clear();\r\n    }\r\n\r\n    getAllInputs(processActions: boolean = true): Input[] {\r\n        let result = super.getAllInputs(processActions);\r\n\r\n        if (processActions) {\r\n            result.push(...this._actionCollection.getAllInputs(processActions));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    getResourceInformation(): IResourceInformation[] {\r\n        let result = super.getResourceInformation();\r\n\r\n        result.push(...this._actionCollection.getResourceInformation());\r\n\r\n        return result;\r\n    }\r\n\r\n    isBleedingAtBottom(): boolean {\r\n        if (this._actionCollection.renderedActionCount === 0) {\r\n            return super.isBleedingAtBottom();\r\n        } else {\r\n            if (this._actionCollection.getActionCount() === 1) {\r\n                return (\r\n                    this._actionCollection.expandedAction !== undefined &&\r\n                    !this.hostConfig.actions.preExpandSingleShowCardAction\r\n                );\r\n            } else {\r\n                return this._actionCollection.expandedAction !== undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    getForbiddenActionNames(): string[] {\r\n        return [];\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport interface IMarkdownProcessingResult {\r\n    didProcess: boolean;\r\n    outputHtml?: any;\r\n}\r\n\r\nexport class RefreshActionProperty extends PropertyDefinition {\r\n    parse(\r\n        sender: RefreshDefinition,\r\n        source: PropertyBag,\r\n        context: SerializationContext\r\n    ): ExecuteAction | undefined {\r\n        const action = context.parseAction(sender.parent, source[this.name], [], false);\r\n\r\n        if (action !== undefined) {\r\n            if (action instanceof ExecuteAction) {\r\n                return action;\r\n            }\r\n\r\n            context.logParseEvent(\r\n                sender,\r\n                Enums.ValidationEvent.ActionTypeNotAllowed,\r\n                Strings.errors.actionTypeNotAllowed(action.getJsonTypeName())\r\n            );\r\n        }\r\n\r\n        context.logParseEvent(\r\n            sender,\r\n            Enums.ValidationEvent.PropertyCantBeNull,\r\n            Strings.errors.propertyMustBeSet(\"action\")\r\n        );\r\n\r\n        return undefined;\r\n    }\r\n\r\n    toJSON(\r\n        sender: SerializableObject,\r\n        target: PropertyBag,\r\n        value: ExecuteAction | undefined,\r\n        context: SerializationContext\r\n    ) {\r\n        context.serializeValue(\r\n            target,\r\n            this.name,\r\n            value ? value.toJSON(context) : undefined,\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    constructor(readonly targetVersion: Version, readonly name: string) {\r\n        super(targetVersion, name, undefined);\r\n    }\r\n}\r\n\r\nexport class RefreshDefinition extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly actionProperty = new RefreshActionProperty(Versions.v1_4, \"action\");\r\n    static readonly userIdsProperty = new StringArrayProperty(Versions.v1_4, \"userIds\");\r\n\r\n    @property(RefreshDefinition.actionProperty)\r\n    get action(): ExecuteAction {\r\n        return this.getValue(RefreshDefinition.actionProperty);\r\n    }\r\n\r\n    set action(value: ExecuteAction) {\r\n        this.setValue(RefreshDefinition.actionProperty, value);\r\n\r\n        if (value) {\r\n            value.setParent(this.parent);\r\n        }\r\n    }\r\n\r\n    @property(RefreshDefinition.userIdsProperty)\r\n    userIds?: string[];\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"RefreshDefinition\";\r\n    }\r\n\r\n    //#endregion\r\n\r\n    parent: CardElement;\r\n}\r\n\r\nexport class AuthCardButton extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly typeProperty = new StringProperty(Versions.v1_4, \"type\");\r\n    static readonly titleProperty = new StringProperty(Versions.v1_4, \"title\");\r\n    static readonly imageProperty = new StringProperty(Versions.v1_4, \"image\");\r\n    static readonly valueProperty = new StringProperty(Versions.v1_4, \"value\");\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"AuthCardButton\";\r\n    }\r\n\r\n    //#endregion\r\n\r\n    @property(AuthCardButton.typeProperty)\r\n    type: string;\r\n\r\n    @property(AuthCardButton.titleProperty)\r\n    title?: string;\r\n\r\n    @property(AuthCardButton.imageProperty)\r\n    image?: string;\r\n\r\n    @property(AuthCardButton.valueProperty)\r\n    value: string;\r\n}\r\n\r\nexport class TokenExchangeResource extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly idProperty = new StringProperty(Versions.v1_4, \"id\");\r\n    static readonly uriProperty = new StringProperty(Versions.v1_4, \"uri\");\r\n    static readonly providerIdProperty = new StringProperty(Versions.v1_4, \"providerId\");\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"TokenExchangeResource\";\r\n    }\r\n\r\n    //#endregion\r\n\r\n    @property(TokenExchangeResource.idProperty)\r\n    id?: string;\r\n\r\n    @property(TokenExchangeResource.uriProperty)\r\n    uri?: string;\r\n\r\n    @property(TokenExchangeResource.providerIdProperty)\r\n    providerId?: string;\r\n}\r\n\r\nexport class Authentication extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly textProperty = new StringProperty(Versions.v1_4, \"text\");\r\n    static readonly connectionNameProperty = new StringProperty(Versions.v1_4, \"connectionName\");\r\n    static readonly buttonsProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_4,\r\n        \"buttons\",\r\n        AuthCardButton\r\n    );\r\n    static readonly tokenExchangeResourceProperty = new SerializableObjectProperty(\r\n        Versions.v1_4,\r\n        \"tokenExchangeResource\",\r\n        TokenExchangeResource,\r\n        true\r\n    );\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"Authentication\";\r\n    }\r\n\r\n    //#endregion\r\n\r\n    @property(Authentication.textProperty)\r\n    text?: string;\r\n\r\n    @property(Authentication.connectionNameProperty)\r\n    connectionName?: string;\r\n\r\n    @property(Authentication.buttonsProperty)\r\n    buttons: AuthCardButton[];\r\n\r\n    @property(Authentication.tokenExchangeResourceProperty)\r\n    tokenExchangeResource?: TokenExchangeResource;\r\n}\r\n\r\n// @dynamic\r\nexport class AdaptiveCard extends ContainerWithActions {\r\n    static readonly schemaUrl = \"http://adaptivecards.io/schemas/adaptive-card.json\";\r\n\r\n    //#region Schema\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static readonly $schemaProperty = new CustomProperty<string>(\r\n        Versions.v1_0,\r\n        \"$schema\",\r\n        (\r\n            sender: SerializableObject,\r\n            property: PropertyDefinition,\r\n            source: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            return AdaptiveCard.schemaUrl;\r\n        },\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            target: PropertyBag,\r\n            value: Versions | undefined,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            context.serializeValue(target, prop.name, AdaptiveCard.schemaUrl);\r\n        }\r\n    );\r\n\r\n    static readonly versionProperty = new CustomProperty<Version | undefined>(\r\n        Versions.v1_0,\r\n        \"version\",\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            source: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            let version = Version.parse(source[prop.name], context);\r\n\r\n            if (version === undefined) {\r\n                version = Versions.latest;\r\n\r\n                context.logParseEvent(\r\n                    sender,\r\n                    Enums.ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidCardVersion(version.toString())\r\n                );\r\n            }\r\n\r\n            return version;\r\n        },\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            target: PropertyBag,\r\n            value: Version | undefined,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            if (value !== undefined) {\r\n                context.serializeValue(target, prop.name, value.toString());\r\n            }\r\n        },\r\n        Versions.v1_0\r\n    );\r\n\r\n    static readonly fallbackTextProperty = new StringProperty(Versions.v1_0, \"fallbackText\");\r\n    static readonly speakProperty = new StringProperty(Versions.v1_0, \"speak\");\r\n    static readonly refreshProperty = new SerializableObjectProperty(\r\n        Versions.v1_4,\r\n        \"refresh\",\r\n        RefreshDefinition,\r\n        true\r\n    );\r\n    static readonly authenticationProperty = new SerializableObjectProperty(\r\n        Versions.v1_4,\r\n        \"authentication\",\r\n        Authentication,\r\n        true\r\n    );\r\n\r\n    @property(AdaptiveCard.versionProperty)\r\n    version: Version;\r\n\r\n    @property(AdaptiveCard.fallbackTextProperty)\r\n    fallbackText?: string;\r\n\r\n    @property(AdaptiveCard.speakProperty)\r\n    speak?: string;\r\n\r\n    @property(AdaptiveCard.refreshProperty)\r\n    get refresh(): RefreshDefinition | undefined {\r\n        return this.getValue(AdaptiveCard.refreshProperty);\r\n    }\r\n\r\n    set refresh(value: RefreshDefinition | undefined) {\r\n        this.setValue(AdaptiveCard.refreshProperty, value);\r\n\r\n        if (value) {\r\n            value.parent = this;\r\n        }\r\n    }\r\n\r\n    @property(AdaptiveCard.authenticationProperty)\r\n    authentication?: Authentication;\r\n\r\n    //#endregion\r\n\r\n    private static _haveWarnedAboutNoMarkdownProcessing = false;\r\n\r\n    static onAnchorClicked?: (\r\n        element: CardElement,\r\n        anchor: HTMLAnchorElement,\r\n        ev?: MouseEvent\r\n    ) => boolean;\r\n    static onExecuteAction?: (action: Action) => void;\r\n    static onElementVisibilityChanged?: (element: CardElement) => void;\r\n    static onImageLoaded?: (image: Image) => void;\r\n    static onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\r\n    static onInputValueChanged?: (input: Input) => void;\r\n    static onProcessMarkdown?: (text: string, result: IMarkdownProcessingResult) => void;\r\n    static onDisplayOverflowActionMenu?: (\r\n        actions: readonly Action[],\r\n        target?: HTMLElement\r\n    ) => boolean;\r\n    static onRenderOverflowActions?: (\r\n        actions: readonly Action[],\r\n        isRootLevelActions: boolean\r\n    ) => boolean;\r\n\r\n    static get processMarkdown(): (text: string) => string {\r\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    static set processMarkdown(_value: (text: string) => string) {\r\n        throw new Error(Strings.errors.processMarkdownEventRemoved());\r\n    }\r\n\r\n    static applyMarkdown(text: string): IMarkdownProcessingResult {\r\n        const result: IMarkdownProcessingResult = {\r\n            didProcess: false\r\n        };\r\n\r\n        if (AdaptiveCard.onProcessMarkdown) {\r\n            AdaptiveCard.onProcessMarkdown(text, result);\r\n        } else if ((<any>window).markdownit) {\r\n            // Check for markdownit\r\n            const markdownIt: any = (<any>window).markdownit;\r\n            result.outputHtml = markdownIt().render(text);\r\n            result.didProcess = true;\r\n        } else if (!AdaptiveCard._haveWarnedAboutNoMarkdownProcessing) {\r\n            // eslint-disable-next-line no-console\r\n            console.warn(Strings.errors.markdownProcessingNotEnabled);\r\n            AdaptiveCard._haveWarnedAboutNoMarkdownProcessing = true;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _fallbackCard?: AdaptiveCard;\r\n\r\n    private isVersionSupported(): boolean {\r\n        if (this.bypassVersionCheck) {\r\n            return true;\r\n        } else {\r\n            const unsupportedVersion: boolean =\r\n                !this.version ||\r\n                !this.version.isValid ||\r\n                this.maxVersion.major < this.version.major ||\r\n                (this.maxVersion.major === this.version.major &&\r\n                    this.maxVersion.minor < this.version.minor);\r\n\r\n            return !unsupportedVersion;\r\n        }\r\n    }\r\n\r\n    protected getDefaultSerializationContext(): BaseSerializationContext {\r\n        return new SerializationContext(this.version);\r\n    }\r\n\r\n    protected getItemsCollectionPropertyName(): string {\r\n        return \"body\";\r\n    }\r\n\r\n    protected canHostSingletons() {\r\n        return true;\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        this._fallbackCard = undefined;\r\n\r\n        const fallbackElement = context.parseElement(\r\n            undefined,\r\n            source[\"fallback\"],\r\n            this.forbiddenChildElements(),\r\n            !this.isDesignMode()\r\n        );\r\n\r\n        if (fallbackElement) {\r\n            this._fallbackCard = new AdaptiveCard();\r\n            this._fallbackCard.addItem(fallbackElement);\r\n        }\r\n\r\n        super.internalParse(source, context);\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        this.setValue(AdaptiveCard.versionProperty, context.targetVersion);\r\n\r\n        super.internalToJSON(target, context);\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        const renderedElement = super.internalRender();\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && renderedElement) {\r\n            // Unlike containers, the root card element should be allowed to\r\n            // be shorter than its content (otherwise the overflow truncation\r\n            // logic would never get triggered)\r\n            renderedElement.style.removeProperty(\"minHeight\");\r\n        }\r\n\r\n        return renderedElement;\r\n    }\r\n\r\n    protected getHasBackground(ignoreBackgroundImages: boolean = false): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition(\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding\r\n        );\r\n    }\r\n\r\n    protected shouldSerialize(_context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get renderIfEmpty(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get bypassVersionCheck(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected get allowCustomStyle() {\r\n        return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;\r\n    }\r\n\r\n    protected get hasBackground(): boolean {\r\n        return true;\r\n    }\r\n\r\n    onAnchorClicked?: (element: CardElement, anchor: HTMLAnchorElement, ev?: MouseEvent) => boolean;\r\n    onExecuteAction?: (action: Action) => void;\r\n    onElementVisibilityChanged?: (element: CardElement) => void;\r\n    onImageLoaded?: (image: Image) => void;\r\n    onInlineCardExpanded?: (action: ShowCardAction, isExpanded: boolean) => void;\r\n    onInputValueChanged?: (input: Input) => void;\r\n    onDisplayOverflowActionMenu?: (actions: readonly Action[], target?: HTMLElement) => boolean;\r\n    onRenderOverflowActions?: (actions: readonly Action[], isRootLevelActions: boolean) => boolean;\r\n\r\n    designMode: boolean = false;\r\n\r\n    getJsonTypeName(): string {\r\n        return \"AdaptiveCard\";\r\n    }\r\n\r\n    internalValidateProperties(context: ValidationResults) {\r\n        super.internalValidateProperties(context);\r\n\r\n        if (this.getValue(CardElement.typeNameProperty) !== \"AdaptiveCard\") {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.MissingCardType,\r\n                Strings.errors.invalidCardType()\r\n            );\r\n        }\r\n\r\n        if (!this.bypassVersionCheck && !this.version) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.PropertyCantBeNull,\r\n                Strings.errors.propertyMustBeSet(\"version\")\r\n            );\r\n        } else if (!this.isVersionSupported()) {\r\n            context.addFailure(\r\n                this,\r\n                Enums.ValidationEvent.UnsupportedCardVersion,\r\n                Strings.errors.unsupportedCardVersion(\r\n                    this.version.toString(),\r\n                    this.maxVersion.toString()\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    render(target?: HTMLElement): HTMLElement | undefined {\r\n        let renderedCard: HTMLElement | undefined;\r\n\r\n        if (this.shouldFallback() && this._fallbackCard) {\r\n            this._fallbackCard.hostConfig = this.hostConfig;\r\n\r\n            renderedCard = this._fallbackCard.render();\r\n        } else {\r\n            renderedCard = super.render();\r\n\r\n            if (renderedCard) {\r\n                renderedCard.classList.add(this.hostConfig.makeCssClassName(\"ac-adaptiveCard\"));\r\n\r\n                // Having a tabIndex on the root container for a card can mess up accessibility in some scenarios.\r\n                // However, we've shipped this behavior before, and so can't just turn it off in a point release. For\r\n                // now, to unblock accessibility scenarios for our customers, we've got an option to turn it off. In a\r\n                // future release, we should strongly consider flipping the default such that we *don't* emit a tabIndex\r\n                // by default.\r\n                if (GlobalSettings.setTabIndexAtCardRoot) {\r\n                    renderedCard.tabIndex = 0;\r\n                }\r\n\r\n                if (this.speak) {\r\n                    renderedCard.setAttribute(\"aria-label\", this.speak);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (target) {\r\n            Utils.appendChild(target, renderedCard);\r\n\r\n            this.updateLayout();\r\n        }\r\n\r\n        return renderedCard;\r\n    }\r\n\r\n    updateLayout(processChildren: boolean = true) {\r\n        super.updateLayout(processChildren);\r\n\r\n        if (GlobalSettings.useAdvancedCardBottomTruncation && this.isDisplayed()) {\r\n            const padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\r\n            this[\"handleOverflow\"](this.renderedElement!.offsetHeight - padding);\r\n        }\r\n    }\r\n\r\n    shouldFallback(): boolean {\r\n        return super.shouldFallback() || !this.isVersionSupported();\r\n    }\r\n\r\n    get hasVisibleSeparator(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass InlineAdaptiveCard extends AdaptiveCard {\r\n    //#region Schema\r\n\r\n    protected getSchemaKey(): string {\r\n        return \"InlineAdaptiveCard\";\r\n    }\r\n\r\n    protected populateSchema(schema: SerializableObjectSchema) {\r\n        super.populateSchema(schema);\r\n\r\n        schema.remove(AdaptiveCard.$schemaProperty, AdaptiveCard.versionProperty);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition(\r\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding,\r\n            this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding,\r\n            Enums.Spacing.Padding\r\n        );\r\n    }\r\n\r\n    protected get bypassVersionCheck(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected get defaultStyle(): string {\r\n        if (this.suppressStyle) {\r\n            return Enums.ContainerStyle.Default;\r\n        } else {\r\n            return this.hostConfig.actions.showCard.style\r\n                ? this.hostConfig.actions.showCard.style\r\n                : Enums.ContainerStyle.Emphasis;\r\n        }\r\n    }\r\n\r\n    suppressStyle: boolean = false;\r\n\r\n    render(target?: HTMLElement): HTMLElement | undefined {\r\n        const renderedCard = super.render(target);\r\n\r\n        if (renderedCard) {\r\n            renderedCard.setAttribute(\"aria-live\", \"polite\");\r\n            renderedCard.removeAttribute(\"tabindex\");\r\n        }\r\n\r\n        return renderedCard;\r\n    }\r\n}\r\n\r\nexport class SerializationContext extends BaseSerializationContext {\r\n    private _elementRegistry?: CardObjectRegistry<CardElement>;\r\n    private _actionRegistry?: CardObjectRegistry<Action>;\r\n\r\n    private _forbiddenTypes: Set<string> = new Set<string>();\r\n    private internalParseCardObject<T extends CardObject>(\r\n        parent: CardElement | undefined,\r\n        source: any,\r\n        forbiddenTypes: Set<string>,\r\n        allowFallback: boolean,\r\n        createInstanceCallback: (typeName: string | undefined) => T | undefined,\r\n        logParseEvent: (typeName: string | undefined, errorType: Enums.TypeErrorType) => void,\r\n        parsingSingletonObject: boolean = false\r\n    ): T | undefined {\r\n        let result: T | undefined = undefined;\r\n\r\n        if (source && typeof source === \"object\") {\r\n            const oldForbiddenTypes = new Set<string>();\r\n            this._forbiddenTypes.forEach((type) => {\r\n                oldForbiddenTypes.add(type);\r\n            });\r\n            forbiddenTypes.forEach((type) => {\r\n                this._forbiddenTypes.add(type);\r\n            });\r\n\r\n            const typeName = Utils.parseString(source[\"type\"]);\r\n\r\n            const ignoreForbiddenType = parsingSingletonObject && typeName === \"Carousel\";\r\n\r\n            if (typeName && this._forbiddenTypes.has(typeName) && !ignoreForbiddenType) {\r\n                logParseEvent(typeName, Enums.TypeErrorType.ForbiddenType);\r\n            } else {\r\n                let tryToFallback = false;\r\n\r\n                result = createInstanceCallback(typeName);\r\n\r\n                if (!result) {\r\n                    tryToFallback = GlobalSettings.enableFallback && allowFallback;\r\n\r\n                    logParseEvent(typeName, Enums.TypeErrorType.UnknownType);\r\n                } else {\r\n                    result.setParent(parent);\r\n                    result.parse(source, this);\r\n\r\n                    tryToFallback =\r\n                        GlobalSettings.enableFallback && allowFallback && result.shouldFallback();\r\n                }\r\n\r\n                if (tryToFallback) {\r\n                    const fallback = source[\"fallback\"];\r\n\r\n                    if (!fallback && parent) {\r\n                        parent.setShouldFallback(true);\r\n                    }\r\n                    if (typeof fallback === \"string\" && fallback.toLowerCase() === \"drop\") {\r\n                        result = undefined;\r\n                    } else if (typeof fallback === \"object\") {\r\n                        result = this.internalParseCardObject<T>(\r\n                            parent,\r\n                            fallback,\r\n                            forbiddenTypes,\r\n                            true,\r\n                            createInstanceCallback,\r\n                            logParseEvent\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._forbiddenTypes = oldForbiddenTypes;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected cardObjectParsed(o: SerializableObject, source: any) {\r\n        if (o instanceof Action && this.onParseAction) {\r\n            this.onParseAction(o, source, this);\r\n        } else if (o instanceof CardElement && this.onParseElement) {\r\n            this.onParseElement(o, source, this);\r\n        }\r\n    }\r\n\r\n    onParseAction?: (action: Action, source: any, context: SerializationContext) => void;\r\n    onParseElement?: (element: CardElement, source: any, context: SerializationContext) => void;\r\n\r\n    shouldSerialize(o: SerializableObject): boolean {\r\n        if (o instanceof Action) {\r\n            return this.actionRegistry.findByName(o.getJsonTypeName()) !== undefined;\r\n        } else if (o instanceof CardElement) {\r\n            return this.elementRegistry.findByName(o.getJsonTypeName()) !== undefined;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    parseCardObject<T extends CardObject>(\r\n        parent: CardElement | undefined,\r\n        source: any,\r\n        forbiddenTypeNames: string[],\r\n        allowFallback: boolean,\r\n        createInstanceCallback: (typeName: string) => T | undefined,\r\n        logParseEvent: (typeName: string, errorType: Enums.TypeErrorType) => void,\r\n        parsingSingletonObject: boolean = false\r\n    ): T | undefined {\r\n        const forbiddenTypes = new Set<string>(forbiddenTypeNames);\r\n        const result = this.internalParseCardObject(\r\n            parent,\r\n            source,\r\n            forbiddenTypes,\r\n            allowFallback,\r\n            createInstanceCallback,\r\n            logParseEvent,\r\n            parsingSingletonObject\r\n        );\r\n\r\n        if (result !== undefined) {\r\n            this.cardObjectParsed(result, source);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseElement(\r\n        parent: CardElement | undefined,\r\n        source: any,\r\n        forbiddenTypes: string[],\r\n        allowFallback: boolean,\r\n        _parsingSingletonObject: boolean = false\r\n    ): CardElement | undefined {\r\n        return this.parseCardObject<CardElement>(\r\n            parent,\r\n            source,\r\n            forbiddenTypes,\r\n            allowFallback,\r\n            (typeName: string) => {\r\n                return this.elementRegistry.createInstance(typeName, this.targetVersion);\r\n            },\r\n            (typeName: string, errorType: Enums.TypeErrorType) => {\r\n                if (errorType === Enums.TypeErrorType.UnknownType) {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.UnknownElementType,\r\n                        Strings.errors.unknownElementType(typeName)\r\n                    );\r\n                } else {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.ElementTypeNotAllowed,\r\n                        Strings.errors.elementTypeNotAllowed(typeName)\r\n                    );\r\n                }\r\n            },\r\n            _parsingSingletonObject\r\n        );\r\n    }\r\n\r\n    parseAction(\r\n        parent: CardElement,\r\n        source: any,\r\n        forbiddenActionTypes: string[],\r\n        allowFallback: boolean\r\n    ): Action | undefined {\r\n        return this.parseCardObject<Action>(\r\n            parent,\r\n            source,\r\n            forbiddenActionTypes,\r\n            allowFallback,\r\n            (typeName: string) => {\r\n                return this.actionRegistry.createInstance(typeName, this.targetVersion);\r\n            },\r\n            (typeName: string, errorType: Enums.TypeErrorType) => {\r\n                if (errorType === Enums.TypeErrorType.UnknownType) {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.UnknownActionType,\r\n                        Strings.errors.unknownActionType(typeName)\r\n                    );\r\n                } else {\r\n                    this.logParseEvent(\r\n                        undefined,\r\n                        Enums.ValidationEvent.ActionTypeNotAllowed,\r\n                        Strings.errors.actionTypeNotAllowed(typeName)\r\n                    );\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    get elementRegistry(): CardObjectRegistry<CardElement> {\r\n        return this._elementRegistry ?? GlobalRegistry.elements;\r\n    }\r\n\r\n    // Not using a property setter here because the setter should accept \"undefined\"\r\n    // whereas the getter should never return undefined.\r\n    setElementRegistry(value: CardObjectRegistry<CardElement> | undefined) {\r\n        this._elementRegistry = value;\r\n    }\r\n\r\n    get actionRegistry(): CardObjectRegistry<Action> {\r\n        return this._actionRegistry ?? GlobalRegistry.actions;\r\n    }\r\n\r\n    // Not using a property setter here because the setter should accept \"undefined\"\r\n    // whereas the getter should never return undefined.\r\n    setActionRegistry(value: CardObjectRegistry<Action> | undefined) {\r\n        this._actionRegistry = value;\r\n    }\r\n}\r\n\r\nGlobalRegistry.defaultElements.register(\"Container\", Container);\r\nGlobalRegistry.defaultElements.register(\"TextBlock\", TextBlock);\r\nGlobalRegistry.defaultElements.register(\"RichTextBlock\", RichTextBlock, Versions.v1_2);\r\nGlobalRegistry.defaultElements.register(\"TextRun\", TextRun, Versions.v1_2);\r\nGlobalRegistry.defaultElements.register(\"Image\", Image);\r\nGlobalRegistry.defaultElements.register(\"ImageSet\", ImageSet);\r\nGlobalRegistry.defaultElements.register(\"Media\", Media, Versions.v1_1);\r\nGlobalRegistry.defaultElements.register(\"FactSet\", FactSet);\r\nGlobalRegistry.defaultElements.register(\"ColumnSet\", ColumnSet);\r\nGlobalRegistry.defaultElements.register(\"ActionSet\", ActionSet, Versions.v1_2);\r\nGlobalRegistry.defaultElements.register(\"Input.Text\", TextInput);\r\nGlobalRegistry.defaultElements.register(\"Input.Date\", DateInput);\r\nGlobalRegistry.defaultElements.register(\"Input.Time\", TimeInput);\r\nGlobalRegistry.defaultElements.register(\"Input.Number\", NumberInput);\r\nGlobalRegistry.defaultElements.register(\"Input.ChoiceSet\", ChoiceSetInput);\r\nGlobalRegistry.defaultElements.register(\"Input.Toggle\", ToggleInput);\r\n\r\nGlobalRegistry.defaultActions.register(OpenUrlAction.JsonTypeName, OpenUrlAction);\r\nGlobalRegistry.defaultActions.register(SubmitAction.JsonTypeName, SubmitAction);\r\nGlobalRegistry.defaultActions.register(ShowCardAction.JsonTypeName, ShowCardAction);\r\nGlobalRegistry.defaultActions.register(\r\n    ToggleVisibilityAction.JsonTypeName,\r\n    ToggleVisibilityAction,\r\n    Versions.v1_2\r\n);\r\nGlobalRegistry.defaultActions.register(ExecuteAction.JsonTypeName, ExecuteAction, Versions.v1_4);\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport {\r\n    CardElement,\r\n    StylableCardElementContainer,\r\n    SerializationContext,\r\n    Container,\r\n    ContainerStyleProperty\r\n} from \"./card-elements\";\r\nimport {\r\n    HorizontalAlignment,\r\n    VerticalAlignment,\r\n    SizeUnit,\r\n    ValidationEvent,\r\n    TypeErrorType,\r\n    Spacing\r\n} from \"./enums\";\r\nimport { TextStyleDefinition } from \"./host-config\";\r\nimport { GlobalRegistry } from \"./registry\";\r\nimport {\r\n    BaseSerializationContext,\r\n    BoolProperty,\r\n    CustomProperty,\r\n    EnumProperty,\r\n    property,\r\n    PropertyBag,\r\n    PropertyDefinition,\r\n    SerializableObject,\r\n    SerializableObjectCollectionProperty,\r\n    Versions\r\n} from \"./serialization\";\r\nimport { SizeAndUnit, PaddingDefinition } from \"./shared\";\r\nimport { Strings } from \"./strings\";\r\nimport { stringToCssColor } from \"./utils\";\r\n\r\nexport class TableColumnDefinition extends SerializableObject {\r\n    //#region Schema\r\n\r\n    static readonly horizontalCellContentAlignmentProperty = new EnumProperty(\r\n        Versions.v1_5,\r\n        \"horizontalCellContentAlignment\",\r\n        HorizontalAlignment\r\n    );\r\n    static readonly verticalCellContentAlignmentProperty = new EnumProperty(\r\n        Versions.v1_5,\r\n        \"verticalCellContentAlignment\",\r\n        VerticalAlignment\r\n    );\r\n\r\n    static readonly widthProperty = new CustomProperty<SizeAndUnit>(\r\n        Versions.v1_5,\r\n        \"width\",\r\n        (\r\n            sender: SerializableObject,\r\n            prop: PropertyDefinition,\r\n            source: PropertyBag,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            let result: SizeAndUnit = prop.defaultValue;\r\n            const value = source[prop.name];\r\n            let invalidWidth = false;\r\n\r\n            if (typeof value === \"number\" && !isNaN(value)) {\r\n                result = new SizeAndUnit(value, SizeUnit.Weight);\r\n            } else if (typeof value === \"string\") {\r\n                try {\r\n                    result = SizeAndUnit.parse(value);\r\n                } catch (e) {\r\n                    invalidWidth = true;\r\n                }\r\n            } else {\r\n                invalidWidth = true;\r\n            }\r\n\r\n            if (invalidWidth) {\r\n                context.logParseEvent(\r\n                    sender,\r\n                    ValidationEvent.InvalidPropertyValue,\r\n                    Strings.errors.invalidColumnWidth(value)\r\n                );\r\n            }\r\n\r\n            return result;\r\n        },\r\n        (\r\n            sender: SerializableObject,\r\n            property: PropertyDefinition,\r\n            target: PropertyBag,\r\n            value: SizeAndUnit,\r\n            context: BaseSerializationContext\r\n        ) => {\r\n            if (value.unit === SizeUnit.Pixel) {\r\n                context.serializeValue(target, \"width\", value.physicalSize + \"px\");\r\n            } else {\r\n                context.serializeNumber(target, \"width\", value.physicalSize);\r\n            }\r\n        },\r\n        new SizeAndUnit(1, SizeUnit.Weight)\r\n    );\r\n\r\n    @property(TableColumnDefinition.horizontalCellContentAlignmentProperty)\r\n    horizontalCellContentAlignment?: HorizontalAlignment;\r\n\r\n    @property(TableColumnDefinition.verticalCellContentAlignmentProperty)\r\n    verticalCellContentAlignment?: VerticalAlignment;\r\n\r\n    @property(TableColumnDefinition.widthProperty)\r\n    width: SizeAndUnit = new SizeAndUnit(1, SizeUnit.Weight);\r\n\r\n    getSchemaKey(): string {\r\n        return \"ColumnDefinition\";\r\n    }\r\n\r\n    //#endregion\r\n\r\n    computedWidth: SizeAndUnit;\r\n}\r\n\r\nexport abstract class StylableContainer<\r\n    T extends CardElement\r\n> extends StylableCardElementContainer {\r\n    private _items: T[] = [];\r\n\r\n    private parseItem(source: any, context: SerializationContext): T | undefined {\r\n        return context.parseCardObject<T>(\r\n            this,\r\n            source,\r\n            [], // Forbidden types not supported for elements for now\r\n            !this.isDesignMode(),\r\n            (typeName: string) => {\r\n                return this.createItemInstance(typeName);\r\n            },\r\n            (typeName: string, _errorType: TypeErrorType) => {\r\n                context.logParseEvent(\r\n                    undefined,\r\n                    ValidationEvent.ElementTypeNotAllowed,\r\n                    Strings.errors.elementTypeNotAllowed(typeName)\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    protected abstract getCollectionPropertyName(): string;\r\n    protected abstract createItemInstance(typeName: string): T | undefined;\r\n\r\n    protected internalAddItem(item: T) {\r\n        if (!item.parent) {\r\n            this._items.push(item);\r\n\r\n            item.setParent(this);\r\n        } else {\r\n            throw new Error(Strings.errors.elementAlreadyParented());\r\n        }\r\n    }\r\n\r\n    protected internalRemoveItem(item: T): boolean {\r\n        const itemIndex = this._items.indexOf(item);\r\n\r\n        if (itemIndex >= 0) {\r\n            this._items.splice(itemIndex, 1);\r\n\r\n            item.setParent(undefined);\r\n\r\n            this.updateLayout();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected internalIndexOf(item: T): number {\r\n        return this._items.indexOf(item);\r\n    }\r\n\r\n    protected internalParse(source: any, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this._items = [];\r\n\r\n        const items = source[this.getCollectionPropertyName()];\r\n\r\n        if (Array.isArray(items)) {\r\n            for (const item of items) {\r\n                const instance = this.parseItem(item, context);\r\n\r\n                if (instance) {\r\n                    this._items.push(instance);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected internalToJSON(target: PropertyBag, context: SerializationContext) {\r\n        super.internalToJSON(target, context);\r\n\r\n        context.serializeArray(target, this.getCollectionPropertyName(), this._items);\r\n    }\r\n\r\n    removeItem(item: T): boolean {\r\n        return this.internalRemoveItem(item);\r\n    }\r\n\r\n    getItemCount(): number {\r\n        return this._items.length;\r\n    }\r\n\r\n    getItemAt(index: number): T {\r\n        return this._items[index];\r\n    }\r\n\r\n    getFirstVisibleRenderedItem(): T | undefined {\r\n        return this.getItemCount() > 0 ? this.getItemAt(0) : undefined;\r\n    }\r\n\r\n    getLastVisibleRenderedItem(): T | undefined {\r\n        return this.getItemCount() > 0 ? this.getItemAt(this.getItemCount() - 1) : undefined;\r\n    }\r\n}\r\n\r\nexport type CellType = \"data\" | \"header\";\r\n\r\nexport class TableCell extends Container {\r\n    private _columnIndex: number = -1;\r\n    private _cellType: CellType = \"data\";\r\n\r\n    protected getHasBorder(): boolean {\r\n        return this.parentRow.parentTable.showGridLines;\r\n    }\r\n\r\n    protected applyBorder() {\r\n        if (this.renderedElement && this.getHasBorder()) {\r\n            const styleDefinition = this.hostConfig.containerStyles.getStyleByName(\r\n                this.parentRow.parentTable.gridStyle\r\n            );\r\n\r\n            if (styleDefinition.borderColor) {\r\n                const borderColor = stringToCssColor(styleDefinition.borderColor);\r\n\r\n                if (borderColor) {\r\n                    this.renderedElement.style.borderRight = \"1px solid \" + borderColor;\r\n                    this.renderedElement.style.borderBottom = \"1px solid \" + borderColor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return this.getHasBackground() || this.getHasBorder()\r\n            ? new PaddingDefinition(Spacing.Small, Spacing.Small, Spacing.Small, Spacing.Small)\r\n            : super.getDefaultPadding();\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        const cellElement = super.internalRender();\r\n\r\n        if (cellElement) {\r\n            cellElement.setAttribute(\"role\", this.cellType === \"data\" ? \"cell\" : \"columnheader\");\r\n            cellElement.style.minWidth = \"0\";\r\n\r\n            if (this.cellType === \"header\") {\r\n                cellElement.setAttribute(\"scope\", \"col\");\r\n            }\r\n        }\r\n\r\n        return cellElement;\r\n    }\r\n\r\n    protected shouldSerialize(_context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TableCell\";\r\n    }\r\n\r\n    getEffectiveTextStyleDefinition(): TextStyleDefinition {\r\n        if (this.cellType === \"header\") {\r\n            return this.hostConfig.textStyles.columnHeader;\r\n        }\r\n\r\n        return super.getEffectiveTextStyleDefinition();\r\n    }\r\n\r\n    getEffectiveHorizontalAlignment(): HorizontalAlignment {\r\n        if (this.horizontalAlignment !== undefined) {\r\n            return this.horizontalAlignment;\r\n        }\r\n\r\n        if (this.parentRow.horizontalCellContentAlignment !== undefined) {\r\n            return this.parentRow.horizontalCellContentAlignment;\r\n        }\r\n\r\n        if (this.columnIndex >= 0) {\r\n            const horizontalAlignment = this.parentRow.parentTable.getColumnAt(\r\n                this.columnIndex\r\n            ).horizontalCellContentAlignment;\r\n\r\n            if (horizontalAlignment !== undefined) {\r\n                return horizontalAlignment;\r\n            }\r\n        }\r\n\r\n        if (this.parentRow.parentTable.horizontalCellContentAlignment !== undefined) {\r\n            return this.parentRow.parentTable.horizontalCellContentAlignment;\r\n        }\r\n\r\n        return super.getEffectiveHorizontalAlignment();\r\n    }\r\n\r\n    getEffectiveVerticalContentAlignment(): VerticalAlignment {\r\n        if (this.verticalContentAlignment !== undefined) {\r\n            return this.verticalContentAlignment;\r\n        }\r\n\r\n        if (this.parentRow.verticalCellContentAlignment !== undefined) {\r\n            return this.parentRow.verticalCellContentAlignment;\r\n        }\r\n\r\n        if (this.columnIndex >= 0) {\r\n            const verticalAlignment = this.parentRow.parentTable.getColumnAt(\r\n                this.columnIndex\r\n            ).verticalCellContentAlignment;\r\n\r\n            if (verticalAlignment !== undefined) {\r\n                return verticalAlignment;\r\n            }\r\n        }\r\n\r\n        if (this.parentRow.parentTable.verticalCellContentAlignment !== undefined) {\r\n            return this.parentRow.parentTable.verticalCellContentAlignment;\r\n        }\r\n\r\n        return super.getEffectiveVerticalContentAlignment();\r\n    }\r\n\r\n    get columnIndex(): number {\r\n        return this._columnIndex;\r\n    }\r\n\r\n    get cellType(): CellType {\r\n        return this._cellType;\r\n    }\r\n\r\n    get parentRow(): TableRow {\r\n        return this.parent as TableRow;\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class TableRow extends StylableContainer<TableCell> {\r\n    //#region Schema\r\n\r\n    static readonly styleProperty = new ContainerStyleProperty(Versions.v1_5, \"style\");\r\n    static readonly horizontalCellContentAlignmentProperty = new EnumProperty(\r\n        Versions.v1_5,\r\n        \"horizontalCellContentAlignment\",\r\n        HorizontalAlignment\r\n    );\r\n    static readonly verticalCellContentAlignmentProperty = new EnumProperty(\r\n        Versions.v1_5,\r\n        \"verticalCellContentAlignment\",\r\n        VerticalAlignment\r\n    );\r\n\r\n    @property(TableRow.horizontalCellContentAlignmentProperty)\r\n    horizontalCellContentAlignment?: HorizontalAlignment;\r\n\r\n    @property(TableRow.verticalCellContentAlignmentProperty)\r\n    verticalCellContentAlignment?: VerticalAlignment;\r\n\r\n    //#endregion\r\n\r\n    protected getDefaultPadding(): PaddingDefinition {\r\n        return new PaddingDefinition(Spacing.None, Spacing.None, Spacing.None, Spacing.None);\r\n    }\r\n\r\n    protected applyBackground() {\r\n        if (this.renderedElement) {\r\n            const styleDefinition = this.hostConfig.containerStyles.getStyleByName(\r\n                this.style,\r\n                this.hostConfig.containerStyles.getStyleByName(this.defaultStyle)\r\n            );\r\n\r\n            if (styleDefinition.backgroundColor) {\r\n                const bgColor = stringToCssColor(styleDefinition.backgroundColor);\r\n\r\n                if (bgColor) {\r\n                    this.renderedElement.style.backgroundColor = bgColor;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected getCollectionPropertyName(): string {\r\n        return \"cells\";\r\n    }\r\n\r\n    protected createItemInstance(typeName: string): TableCell | undefined {\r\n        return !typeName || typeName === \"TableCell\" ? new TableCell() : undefined;\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        const isFirstRow = this.getIsFirstRow();\r\n        const cellSpacing = this.hostConfig.table.cellSpacing;\r\n\r\n        const rowElement = document.createElement(\"div\");\r\n        rowElement.setAttribute(\"role\", \"row\");\r\n        rowElement.style.display = \"flex\";\r\n        rowElement.style.flexDirection = \"row\";\r\n\r\n        for (let i = 0; i < Math.min(this.getItemCount(), this.parentTable.getColumnCount()); i++) {\r\n            const cell = this.getItemAt(i);\r\n\r\n            // Cheating a bit in order to keep cellType read-only\r\n            cell[\"_columnIndex\"] = i;\r\n            cell[\"_cellType\"] =\r\n                this.parentTable.firstRowAsHeaders && isFirstRow ? \"header\" : \"data\";\r\n\r\n            const renderedCell = cell.render();\r\n\r\n            if (renderedCell) {\r\n                const column = this.parentTable.getColumnAt(i);\r\n\r\n                if (column.computedWidth.unit === SizeUnit.Pixel) {\r\n                    renderedCell.style.flex = \"0 0 \" + column.computedWidth.physicalSize + \"px\";\r\n                } else {\r\n                    renderedCell.style.flex = \"1 1 \" + column.computedWidth.physicalSize + \"%\";\r\n                }\r\n\r\n                if (i > 0 && !this.parentTable.showGridLines && cellSpacing > 0) {\r\n                    renderedCell.style.marginLeft = cellSpacing + \"px\";\r\n                }\r\n\r\n                rowElement.appendChild(renderedCell);\r\n            }\r\n        }\r\n\r\n        return rowElement.children.length > 0 ? rowElement : undefined;\r\n    }\r\n\r\n    protected shouldSerialize(_context: SerializationContext): boolean {\r\n        return true;\r\n    }\r\n\r\n    addCell(cell: TableCell) {\r\n        this.internalAddItem(cell);\r\n    }\r\n\r\n    removeCellAt(columnIndex: number): boolean {\r\n        if (columnIndex >= 0 && columnIndex < this.getItemCount()) {\r\n            return this.removeItem(this.getItemAt(columnIndex));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof TableCell ? this.internalIndexOf(cardElement) : -1;\r\n    }\r\n\r\n    ensureHasEnoughCells(cellCount: number) {\r\n        while (this.getItemCount() < cellCount) {\r\n            this.addCell(new TableCell());\r\n        }\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"TableRow\";\r\n    }\r\n\r\n    getIsFirstRow(): boolean {\r\n        return this.parentTable.getItemAt(0) === this;\r\n    }\r\n\r\n    get parentTable(): Table {\r\n        return this.parent as Table;\r\n    }\r\n\r\n    get isStandalone(): boolean {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport class Table extends StylableContainer<TableRow> {\r\n    //#region Schema\r\n\r\n    private static readonly _columnsProperty = new SerializableObjectCollectionProperty(\r\n        Versions.v1_5,\r\n        \"columns\",\r\n        TableColumnDefinition\r\n    );\r\n\r\n    static readonly firstRowAsHeadersProperty = new BoolProperty(\r\n        Versions.v1_5,\r\n        \"firstRowAsHeaders\",\r\n        true\r\n    );\r\n    static readonly showGridLinesProperty = new BoolProperty(Versions.v1_5, \"showGridLines\", true);\r\n    static readonly gridStyleProperty = new ContainerStyleProperty(Versions.v1_5, \"gridStyle\");\r\n    static readonly horizontalCellContentAlignmentProperty = new EnumProperty(\r\n        Versions.v1_5,\r\n        \"horizontalCellContentAlignment\",\r\n        HorizontalAlignment\r\n    );\r\n    static readonly verticalCellContentAlignmentProperty = new EnumProperty(\r\n        Versions.v1_5,\r\n        \"verticalCellContentAlignment\",\r\n        VerticalAlignment\r\n    );\r\n\r\n    @property(Table._columnsProperty)\r\n    private _columns: TableColumnDefinition[] = [];\r\n\r\n    @property(Table.firstRowAsHeadersProperty)\r\n    firstRowAsHeaders: boolean = true;\r\n\r\n    @property(Table.showGridLinesProperty)\r\n    showGridLines: boolean = true;\r\n\r\n    @property(Table.gridStyleProperty)\r\n    get gridStyle(): string | undefined {\r\n        const style = this.getValue(Table.gridStyleProperty);\r\n\r\n        if (style && this.hostConfig.containerStyles.getStyleByName(style)) {\r\n            return style;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    set gridStyle(value: string | undefined) {\r\n        this.setValue(Table.gridStyleProperty, value);\r\n    }\r\n\r\n    @property(Table.horizontalCellContentAlignmentProperty)\r\n    horizontalCellContentAlignment?: HorizontalAlignment;\r\n\r\n    @property(Table.verticalCellContentAlignmentProperty)\r\n    verticalCellContentAlignment?: VerticalAlignment;\r\n\r\n    //#endregion\r\n\r\n    private ensureRowsHaveEnoughCells() {\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            this.getItemAt(i).ensureHasEnoughCells(this.getColumnCount());\r\n        }\r\n    }\r\n\r\n    private removeCellsFromColumn(columnIndex: number) {\r\n        for (let i = 0; i < this.getItemCount(); i++) {\r\n            this.getItemAt(i).removeCellAt(columnIndex);\r\n        }\r\n    }\r\n\r\n    protected getCollectionPropertyName(): string {\r\n        return \"rows\";\r\n    }\r\n\r\n    protected createItemInstance(typeName: string): TableRow | undefined {\r\n        return !typeName || typeName === \"TableRow\" ? new TableRow() : undefined;\r\n    }\r\n\r\n    protected internalParse(source: PropertyBag, context: SerializationContext) {\r\n        super.internalParse(source, context);\r\n\r\n        this.ensureRowsHaveEnoughCells();\r\n    }\r\n\r\n    protected internalRender(): HTMLElement | undefined {\r\n        if (this.getItemCount() > 0) {\r\n            let totalWeights: number = 0;\r\n\r\n            for (const column of this._columns) {\r\n                if (column.width.unit === SizeUnit.Weight) {\r\n                    totalWeights += column.width.physicalSize;\r\n                }\r\n            }\r\n\r\n            for (const column of this._columns) {\r\n                if (column.width.unit === SizeUnit.Pixel) {\r\n                    column.computedWidth = new SizeAndUnit(\r\n                        column.width.physicalSize,\r\n                        SizeUnit.Pixel\r\n                    );\r\n                } else {\r\n                    column.computedWidth = new SizeAndUnit(\r\n                        (100 / totalWeights) * column.width.physicalSize,\r\n                        SizeUnit.Weight\r\n                    );\r\n                }\r\n            }\r\n\r\n            const tableElement = document.createElement(\"div\");\r\n            tableElement.setAttribute(\"role\", \"table\");\r\n            tableElement.style.display = \"flex\";\r\n            tableElement.style.flexDirection = \"column\";\r\n\r\n            if (this.showGridLines) {\r\n                const styleDefinition = this.hostConfig.containerStyles.getStyleByName(\r\n                    this.gridStyle\r\n                );\r\n\r\n                if (styleDefinition.borderColor) {\r\n                    const borderColor = stringToCssColor(styleDefinition.borderColor);\r\n\r\n                    if (borderColor) {\r\n                        tableElement.style.borderTop = \"1px solid \" + borderColor;\r\n                        tableElement.style.borderLeft = \"1px solid \" + borderColor;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const cellSpacing = this.hostConfig.table.cellSpacing;\r\n\r\n            for (let i = 0; i < this.getItemCount(); i++) {\r\n                const renderedRow = this.getItemAt(i).render();\r\n\r\n                if (renderedRow) {\r\n                    if (i > 0 && !this.showGridLines && cellSpacing > 0) {\r\n                        const separatorRow = document.createElement(\"div\");\r\n                        separatorRow.setAttribute(\"aria-hidden\", \"true\");\r\n                        separatorRow.style.height = cellSpacing + \"px\";\r\n\r\n                        tableElement.appendChild(separatorRow);\r\n                    }\r\n\r\n                    tableElement.appendChild(renderedRow);\r\n                }\r\n            }\r\n\r\n            return tableElement;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    addColumn(column: TableColumnDefinition) {\r\n        this._columns.push(column);\r\n\r\n        this.ensureRowsHaveEnoughCells();\r\n    }\r\n\r\n    removeColumn(column: TableColumnDefinition) {\r\n        const index = this._columns.indexOf(column);\r\n\r\n        if (index >= 0) {\r\n            this.removeCellsFromColumn(index);\r\n\r\n            this._columns.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    getColumnCount(): number {\r\n        return this._columns.length;\r\n    }\r\n\r\n    getColumnAt(index: number): TableColumnDefinition {\r\n        return this._columns[index];\r\n    }\r\n\r\n    addRow(row: TableRow) {\r\n        this.internalAddItem(row);\r\n\r\n        row.ensureHasEnoughCells(this.getColumnCount());\r\n    }\r\n\r\n    indexOf(cardElement: CardElement): number {\r\n        return cardElement instanceof TableRow ? this.internalIndexOf(cardElement) : -1;\r\n    }\r\n\r\n    getJsonTypeName(): string {\r\n        return \"Table\";\r\n    }\r\n}\r\n\r\nGlobalRegistry.defaultElements.register(\"Table\", Table, Versions.v1_5);\r\n", "// Copyright (C) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ActivityResponse, IActivityRequest } from \"./activity-request\";\r\n\r\nexport abstract class ChannelAdapter {\r\n    abstract sendRequestAsync(request: IActivityRequest): Promise<ActivityResponse>;\r\n}\r\n", "// Copyright (C) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport {\r\n    Authentication,\r\n    AuthCardButton,\r\n    ExecuteAction,\r\n    TokenExchangeResource\r\n} from \"./card-elements\";\r\n\r\nexport enum ActivityRequestTrigger {\r\n    Automatic = \"automatic\",\r\n    Manual = \"manual\"\r\n}\r\n\r\nexport interface IActivityRequest {\r\n    readonly action: ExecuteAction;\r\n    readonly trigger: ActivityRequestTrigger;\r\n    readonly attemptNumber: number;\r\n    readonly consecutiveRefreshes: number;\r\n\r\n    authCode?: string;\r\n    authToken?: string;\r\n\r\n    retryAsync(): void;\r\n}\r\n\r\nexport class ActivityRequestError {\r\n    constructor(readonly code?: string, readonly message?: string) {}\r\n}\r\n\r\nexport abstract class ActivityResponse {\r\n    constructor(readonly request: IActivityRequest) {}\r\n}\r\n\r\nexport class SuccessResponse extends ActivityResponse {\r\n    constructor(readonly request: IActivityRequest, readonly rawContent?: string) {\r\n        super(request);\r\n    }\r\n}\r\n\r\nexport class ErrorResponse extends ActivityResponse {\r\n    constructor(readonly request: IActivityRequest, readonly error: ActivityRequestError) {\r\n        super(request);\r\n    }\r\n}\r\n\r\nexport class LoginRequestResponse extends ActivityResponse {\r\n    private _auth: Authentication;\r\n    readonly signinButton?: AuthCardButton;\r\n\r\n    constructor(readonly request: IActivityRequest, auth: Authentication) {\r\n        super(request);\r\n        this._auth = auth;\r\n\r\n        for (const button of this._auth.buttons) {\r\n            if (button.type === \"signin\" && button.value !== undefined) {\r\n                try {\r\n                    new URL(button.value);\r\n\r\n                    this.signinButton = button;\r\n\r\n                    break;\r\n                } catch (e) {\r\n                    // Ignore parsing error\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get tokenExchangeResource(): TokenExchangeResource | undefined {\r\n        return this._auth.tokenExchangeResource;\r\n    }\r\n}\r\n", "// Copyright (C) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as Enums from \"./enums\";\r\nimport * as Utils from \"./utils\";\r\nimport { GlobalSettings } from \"./shared\";\r\nimport { ChannelAdapter } from \"./channel-adapter\";\r\nimport {\r\n    ActivityResponse,\r\n    IActivityRequest,\r\n    ActivityRequestTrigger,\r\n    SuccessResponse,\r\n    ErrorResponse,\r\n    LoginRequestResponse\r\n} from \"./activity-request\";\r\nimport { Strings } from \"./strings\";\r\nimport {\r\n    SubmitAction,\r\n    ExecuteAction,\r\n    SerializationContext,\r\n    AdaptiveCard,\r\n    Action,\r\n    Input,\r\n    TokenExchangeResource,\r\n    AuthCardButton\r\n} from \"./card-elements\";\r\nimport { Versions } from \"./serialization\";\r\nimport { HostConfig } from \"./host-config\";\r\n\r\nfunction logEvent(level: Enums.LogLevel, message?: any, ...optionalParams: any[]) {\r\n    if (GlobalSettings.applets.logEnabled) {\r\n        if (GlobalSettings.applets.onLogEvent) {\r\n            GlobalSettings.applets.onLogEvent(level, message, optionalParams);\r\n        } else {\r\n            /* eslint-disable no-console */\r\n            switch (level) {\r\n                case Enums.LogLevel.Warning:\r\n                    console.warn(message, optionalParams);\r\n                    break;\r\n                case Enums.LogLevel.Error:\r\n                    console.error(message, optionalParams);\r\n                    break;\r\n                default:\r\n                    console.log(message, optionalParams);\r\n                    break;\r\n            }\r\n            /* eslint-enable no-console */\r\n        }\r\n    }\r\n}\r\n\r\nclass ActivityRequest implements IActivityRequest {\r\n    constructor(\r\n        readonly action: ExecuteAction,\r\n        readonly trigger: ActivityRequestTrigger,\r\n        readonly consecutiveRefreshes: number\r\n    ) {}\r\n\r\n    authCode?: string;\r\n    authToken?: string;\r\n    attemptNumber: number = 0;\r\n\r\n    onSend: (sender: ActivityRequest) => void;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    async retryAsync(): Promise<void> {\r\n        if (this.onSend) {\r\n            this.onSend(this);\r\n        }\r\n    }\r\n}\r\n\r\nexport class AdaptiveApplet {\r\n    private static readonly _submitMagicCodeActionId = \"submitMagicCode\";\r\n    private static readonly _cancelMagicCodeAuthActionId = \"cancelMagicCodeAuth\";\r\n\r\n    private _card?: AdaptiveCard;\r\n    private _cardPayload: any;\r\n    private _allowAutomaticCardUpdate: boolean = false;\r\n    private _refreshButtonHostElement: HTMLElement;\r\n    private _cardHostElement: HTMLElement;\r\n    private _progressOverlay?: HTMLElement;\r\n\r\n    private displayCard(card: AdaptiveCard) {\r\n        if (card.renderedElement) {\r\n            Utils.clearElementChildren(this._cardHostElement);\r\n\r\n            this._refreshButtonHostElement.style.display = \"none\";\r\n\r\n            this._cardHostElement.appendChild(card.renderedElement);\r\n        } else {\r\n            throw new Error(\"displayCard: undefined card.\");\r\n        }\r\n    }\r\n\r\n    private showManualRefreshButton(refreshAction: ExecuteAction) {\r\n        const displayBuiltInManualRefreshButton = this.onShowManualRefreshButton\r\n            ? this.onShowManualRefreshButton(this)\r\n            : true;\r\n\r\n        if (displayBuiltInManualRefreshButton) {\r\n            this._refreshButtonHostElement.style.display = \"none\";\r\n\r\n            let renderedRefreshButton: HTMLElement | undefined = undefined;\r\n\r\n            if (this.onRenderManualRefreshButton) {\r\n                renderedRefreshButton = this.onRenderManualRefreshButton(this);\r\n            } else {\r\n                let message = Strings.runtime.refreshThisCard();\r\n\r\n                if (GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic) {\r\n                    let autoRefreshPausedMessage = Strings.runtime.automaticRefreshPaused();\r\n\r\n                    if (autoRefreshPausedMessage[autoRefreshPausedMessage.length - 1] !== \" \") {\r\n                        autoRefreshPausedMessage += \" \";\r\n                    }\r\n\r\n                    message = Strings.runtime.clckToRestartAutomaticRefresh();\r\n                }\r\n\r\n                const cardPayload = {\r\n                    type: \"AdaptiveCard\",\r\n                    version: \"1.2\",\r\n                    body: [\r\n                        {\r\n                            type: \"RichTextBlock\",\r\n                            horizontalAlignment: \"right\",\r\n                            inlines: [\r\n                                {\r\n                                    type: \"TextRun\",\r\n                                    text: message,\r\n                                    selectAction: {\r\n                                        type: \"Action.Submit\",\r\n                                        id: \"refreshCard\"\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                };\r\n\r\n                const card = new AdaptiveCard();\r\n                card.parse(cardPayload, new SerializationContext(Versions.v1_2));\r\n                card.onExecuteAction = (action: Action) => {\r\n                    if (action.id === \"refreshCard\") {\r\n                        Utils.clearElementChildren(this._refreshButtonHostElement);\r\n\r\n                        this.internalExecuteAction(\r\n                            refreshAction,\r\n                            ActivityRequestTrigger.Automatic,\r\n                            0\r\n                        );\r\n                    }\r\n                };\r\n\r\n                renderedRefreshButton = card.render();\r\n            }\r\n\r\n            if (renderedRefreshButton) {\r\n                Utils.clearElementChildren(this._refreshButtonHostElement);\r\n\r\n                this._refreshButtonHostElement.appendChild(renderedRefreshButton);\r\n\r\n                this._refreshButtonHostElement.style.removeProperty(\"display\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private createActivityRequest(\r\n        action: ExecuteAction,\r\n        trigger: ActivityRequestTrigger,\r\n        consecutiveRefreshes: number\r\n    ): ActivityRequest | undefined {\r\n        if (this.card) {\r\n            const request = new ActivityRequest(action, trigger, consecutiveRefreshes);\r\n            request.onSend = (sender: ActivityRequest) => {\r\n                sender.attemptNumber++;\r\n\r\n                void this.internalSendActivityRequestAsync(request);\r\n            };\r\n\r\n            const cancel = this.onPrepareActivityRequest\r\n                ? !this.onPrepareActivityRequest(this, request, action)\r\n                : false;\r\n\r\n            return cancel ? undefined : request;\r\n        } else {\r\n            throw new Error(\"createActivityRequest: no card has been set.\");\r\n        }\r\n    }\r\n\r\n    private createMagicCodeInputCard(attemptNumber: number): AdaptiveCard {\r\n        const payload = {\r\n            type: \"AdaptiveCard\",\r\n            version: \"1.0\",\r\n            body: [\r\n                {\r\n                    type: \"TextBlock\",\r\n                    color: \"attention\",\r\n                    text: attemptNumber === 1 ? undefined : \"That didn't work... let's try again.\",\r\n                    wrap: true,\r\n                    horizontalAlignment: \"center\"\r\n                },\r\n                {\r\n                    type: \"TextBlock\",\r\n                    text: 'Please login in the popup. You will obtain a magic code. Paste that code below and select \"Submit\"',\r\n                    wrap: true,\r\n                    horizontalAlignment: \"center\"\r\n                },\r\n                {\r\n                    type: \"Input.Text\",\r\n                    id: \"magicCode\",\r\n                    placeholder: \"Enter magic code\"\r\n                },\r\n                {\r\n                    type: \"ActionSet\",\r\n                    horizontalAlignment: \"center\",\r\n                    actions: [\r\n                        {\r\n                            type: \"Action.Submit\",\r\n                            id: AdaptiveApplet._submitMagicCodeActionId,\r\n                            title: \"Submit\"\r\n                        },\r\n                        {\r\n                            type: \"Action.Submit\",\r\n                            id: AdaptiveApplet._cancelMagicCodeAuthActionId,\r\n                            title: \"Cancel\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        };\r\n\r\n        const card = new AdaptiveCard();\r\n        card.parse(payload);\r\n\r\n        return card;\r\n    }\r\n\r\n    private cancelAutomaticRefresh() {\r\n        if (this._allowAutomaticCardUpdate) {\r\n            logEvent(\r\n                Enums.LogLevel.Warning,\r\n                \"Automatic card refresh has been cancelled as a result of the user interacting with the card.\"\r\n            );\r\n        }\r\n\r\n        this._allowAutomaticCardUpdate = false;\r\n    }\r\n\r\n    private createSerializationContext(): SerializationContext {\r\n        return this.onCreateSerializationContext\r\n            ? this.onCreateSerializationContext(this)\r\n            : new SerializationContext();\r\n    }\r\n\r\n    private internalSetCard(payload: any, consecutiveRefreshes: number) {\r\n        if (typeof payload === \"object\" && payload[\"type\"] === \"AdaptiveCard\") {\r\n            this._cardPayload = payload;\r\n        }\r\n\r\n        if (this._cardPayload) {\r\n            try {\r\n                const card = new AdaptiveCard();\r\n\r\n                if (this.hostConfig) {\r\n                    card.hostConfig = this.hostConfig;\r\n                }\r\n\r\n                const serializationContext = this.createSerializationContext();\r\n\r\n                card.parse(this._cardPayload, serializationContext);\r\n\r\n                const doChangeCard = this.onCardChanging\r\n                    ? this.onCardChanging(this, this._cardPayload)\r\n                    : true;\r\n\r\n                if (doChangeCard) {\r\n                    this._card = card;\r\n\r\n                    if (\r\n                        this._card.authentication &&\r\n                        this._card.authentication.tokenExchangeResource &&\r\n                        this.onPrefetchSSOToken\r\n                    ) {\r\n                        this.onPrefetchSSOToken(\r\n                            this,\r\n                            this._card.authentication.tokenExchangeResource\r\n                        );\r\n                    }\r\n\r\n                    this._card.onExecuteAction = (action: Action) => {\r\n                        // If the user takes an action, cancel any pending automatic refresh\r\n                        this.cancelAutomaticRefresh();\r\n\r\n                        this.internalExecuteAction(action, ActivityRequestTrigger.Manual, 0);\r\n                    };\r\n                    this._card.onInputValueChanged = (_input: Input) => {\r\n                        // If the user modifies an input, cancel any pending automatic refresh\r\n                        this.cancelAutomaticRefresh();\r\n                    };\r\n\r\n                    this._card.render();\r\n\r\n                    if (this._card.renderedElement) {\r\n                        this.displayCard(this._card);\r\n\r\n                        if (this.onCardChanged) {\r\n                            this.onCardChanged(this);\r\n                        }\r\n\r\n                        if (this._card.refresh) {\r\n                            if (\r\n                                GlobalSettings.applets.refresh.mode ===\r\n                                    Enums.RefreshMode.Automatic &&\r\n                                consecutiveRefreshes <\r\n                                    GlobalSettings.applets.refresh\r\n                                        .maximumConsecutiveAutomaticRefreshes\r\n                            ) {\r\n                                if (\r\n                                    GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes <=\r\n                                    0\r\n                                ) {\r\n                                    logEvent(\r\n                                        Enums.LogLevel.Info,\r\n                                        \"Triggering automatic card refresh number \" +\r\n                                            (consecutiveRefreshes + 1)\r\n                                    );\r\n\r\n                                    this.internalExecuteAction(\r\n                                        this._card.refresh.action,\r\n                                        ActivityRequestTrigger.Automatic,\r\n                                        consecutiveRefreshes + 1\r\n                                    );\r\n                                } else {\r\n                                    logEvent(\r\n                                        Enums.LogLevel.Info,\r\n                                        \"Scheduling automatic card refresh number \" +\r\n                                            (consecutiveRefreshes + 1) +\r\n                                            \" in \" +\r\n                                            GlobalSettings.applets.refresh\r\n                                                .timeBetweenAutomaticRefreshes +\r\n                                            \"ms\"\r\n                                    );\r\n\r\n                                    const action = this._card.refresh.action;\r\n\r\n                                    this._allowAutomaticCardUpdate = true;\r\n\r\n                                    window.setTimeout(() => {\r\n                                        if (this._allowAutomaticCardUpdate) {\r\n                                            this.internalExecuteAction(\r\n                                                action,\r\n                                                ActivityRequestTrigger.Automatic,\r\n                                                consecutiveRefreshes + 1\r\n                                            );\r\n                                        }\r\n                                    }, GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes);\r\n                                }\r\n                            } else if (\r\n                                GlobalSettings.applets.refresh.mode !== Enums.RefreshMode.Disabled\r\n                            ) {\r\n                                if (consecutiveRefreshes > 0) {\r\n                                    logEvent(\r\n                                        Enums.LogLevel.Warning,\r\n                                        \"Stopping automatic refreshes after \" +\r\n                                            consecutiveRefreshes +\r\n                                            \" consecutive refreshes.\"\r\n                                    );\r\n                                } else {\r\n                                    logEvent(\r\n                                        Enums.LogLevel.Warning,\r\n                                        \"The card has a refresh section, but automatic refreshes are disabled.\"\r\n                                    );\r\n                                }\r\n\r\n                                if (\r\n                                    GlobalSettings.applets.refresh\r\n                                        .allowManualRefreshesAfterAutomaticRefreshes ||\r\n                                    GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Manual\r\n                                ) {\r\n                                    logEvent(Enums.LogLevel.Info, \"Showing manual refresh button.\");\r\n\r\n                                    this.showManualRefreshButton(this._card.refresh.action);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                // Ignore all errors\r\n                logEvent(Enums.LogLevel.Error, \"setCard: \" + error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private internalExecuteAction(\r\n        action: Action,\r\n        trigger: ActivityRequestTrigger,\r\n        consecutiveRefreshes: number\r\n    ) {\r\n        if (action instanceof ExecuteAction) {\r\n            if (this.channelAdapter) {\r\n                const request = this.createActivityRequest(action, trigger, consecutiveRefreshes);\r\n\r\n                if (request) {\r\n                    void request.retryAsync();\r\n                }\r\n            } else {\r\n                throw new Error(\"internalExecuteAction: No channel adapter set.\");\r\n            }\r\n        }\r\n\r\n        if (this.onAction) {\r\n            this.onAction(this, action);\r\n        }\r\n    }\r\n\r\n    private createProgressOverlay(request: ActivityRequest): HTMLElement | undefined {\r\n        if (!this._progressOverlay) {\r\n            if (this.onCreateProgressOverlay) {\r\n                this._progressOverlay = this.onCreateProgressOverlay(this, request);\r\n            } else {\r\n                this._progressOverlay = document.createElement(\"div\");\r\n                this._progressOverlay.className = \"aaf-progress-overlay\";\r\n\r\n                const spinner = document.createElement(\"div\");\r\n                spinner.className = \"aaf-spinner\";\r\n                spinner.style.width = \"28px\";\r\n                spinner.style.height = \"28px\";\r\n\r\n                this._progressOverlay.appendChild(spinner);\r\n            }\r\n        }\r\n\r\n        return this._progressOverlay;\r\n    }\r\n\r\n    private removeProgressOverlay(request: IActivityRequest) {\r\n        if (this.onRemoveProgressOverlay) {\r\n            this.onRemoveProgressOverlay(this, request);\r\n        }\r\n\r\n        if (this._progressOverlay !== undefined) {\r\n            this.renderedElement.removeChild(this._progressOverlay);\r\n\r\n            this._progressOverlay = undefined;\r\n        }\r\n    }\r\n\r\n    private activityRequestSucceeded(\r\n        response: SuccessResponse,\r\n        parsedContent: string | AdaptiveCard | undefined\r\n    ) {\r\n        if (this.onActivityRequestSucceeded) {\r\n            this.onActivityRequestSucceeded(this, response, parsedContent);\r\n        }\r\n    }\r\n\r\n    private activityRequestFailed(response: ErrorResponse): number {\r\n        return this.onActivityRequestFailed\r\n            ? this.onActivityRequestFailed(this, response)\r\n            : GlobalSettings.applets.defaultTimeBetweenRetryAttempts;\r\n    }\r\n\r\n    private showAuthCodeInputDialog(request: ActivityRequest) {\r\n        const showBuiltInAuthCodeInputCard = this.onShowAuthCodeInputDialog\r\n            ? this.onShowAuthCodeInputDialog(this, request)\r\n            : true;\r\n\r\n        if (showBuiltInAuthCodeInputCard) {\r\n            const authCodeInputCard = this.createMagicCodeInputCard(request.attemptNumber);\r\n            authCodeInputCard.render();\r\n            authCodeInputCard.onExecuteAction = (submitMagicCodeAction: Action) => {\r\n                if (this.card && submitMagicCodeAction instanceof SubmitAction) {\r\n                    switch (submitMagicCodeAction.id) {\r\n                        case AdaptiveApplet._submitMagicCodeActionId:\r\n                            let authCode: string | undefined = undefined;\r\n\r\n                            if (\r\n                                submitMagicCodeAction.data &&\r\n                                typeof (<any>submitMagicCodeAction.data)[\"magicCode\"] === \"string\"\r\n                            ) {\r\n                                authCode = (<any>submitMagicCodeAction.data)[\"magicCode\"];\r\n                            }\r\n\r\n                            if (authCode) {\r\n                                this.displayCard(this.card);\r\n\r\n                                request.authCode = authCode;\r\n                                void request.retryAsync();\r\n                            } else {\r\n                                alert(\"Please enter the magic code you received.\");\r\n                            }\r\n\r\n                            break;\r\n                        case AdaptiveApplet._cancelMagicCodeAuthActionId:\r\n                            logEvent(Enums.LogLevel.Warning, \"Authentication cancelled by user.\");\r\n\r\n                            this.displayCard(this.card);\r\n\r\n                            break;\r\n                        default:\r\n                            logEvent(\r\n                                Enums.LogLevel.Error,\r\n                                \"Unexpected action taken from magic code input card (id = \" +\r\n                                    submitMagicCodeAction.id +\r\n                                    \")\"\r\n                            );\r\n\r\n                            alert(Strings.magicCodeInputCard.somethingWentWrong());\r\n\r\n                            break;\r\n                    }\r\n                }\r\n            };\r\n\r\n            this.displayCard(authCodeInputCard);\r\n        }\r\n    }\r\n\r\n    private async internalSendActivityRequestAsync(request: ActivityRequest) {\r\n        if (!this.channelAdapter) {\r\n            throw new Error(\"internalSendActivityRequestAsync: channelAdapter is not set.\");\r\n        }\r\n\r\n        const overlay = this.createProgressOverlay(request);\r\n\r\n        if (overlay !== undefined) {\r\n            this.renderedElement.appendChild(overlay);\r\n        }\r\n\r\n        let done = false;\r\n\r\n        while (!done) {\r\n            let response: ActivityResponse | undefined = undefined;\r\n\r\n            if (request.attemptNumber === 1) {\r\n                logEvent(\r\n                    Enums.LogLevel.Info,\r\n                    \"Sending activity request to channel (attempt \" + request.attemptNumber + \")\"\r\n                );\r\n            } else {\r\n                logEvent(\r\n                    Enums.LogLevel.Info,\r\n                    \"Re-sending activity request to channel (attempt \" + request.attemptNumber + \")\"\r\n                );\r\n            }\r\n\r\n            try {\r\n                response = await this.channelAdapter.sendRequestAsync(request);\r\n            } catch (error) {\r\n                logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error);\r\n\r\n                this.removeProgressOverlay(request);\r\n\r\n                done = true;\r\n            }\r\n\r\n            if (response) {\r\n                if (response instanceof SuccessResponse) {\r\n                    this.removeProgressOverlay(request);\r\n\r\n                    if (response.rawContent === undefined) {\r\n                        throw new Error(\r\n                            \"internalSendActivityRequestAsync: Action.Execute result is undefined\"\r\n                        );\r\n                    }\r\n\r\n                    let parsedContent = response.rawContent;\r\n\r\n                    try {\r\n                        parsedContent = JSON.parse(response.rawContent);\r\n                    } catch {\r\n                        // Leave parseContent as is\r\n                    }\r\n\r\n                    if (typeof parsedContent === \"string\") {\r\n                        logEvent(\r\n                            Enums.LogLevel.Info,\r\n                            \"The activity request returned a string after \" +\r\n                                request.attemptNumber +\r\n                                \" attempt(s).\"\r\n                        );\r\n\r\n                        this.activityRequestSucceeded(response, parsedContent);\r\n                    } else if (\r\n                        typeof parsedContent === \"object\" &&\r\n                        parsedContent[\"type\"] === \"AdaptiveCard\"\r\n                    ) {\r\n                        logEvent(\r\n                            Enums.LogLevel.Info,\r\n                            \"The activity request returned an Adaptive Card after \" +\r\n                                request.attemptNumber +\r\n                                \" attempt(s).\"\r\n                        );\r\n\r\n                        this.internalSetCard(parsedContent, request.consecutiveRefreshes);\r\n                        this.activityRequestSucceeded(response, this.card);\r\n                    } else {\r\n                        throw new Error(\r\n                            \"internalSendActivityRequestAsync: Action.Execute result is of unsupported type (\" +\r\n                                typeof response.rawContent +\r\n                                \")\"\r\n                        );\r\n                    }\r\n\r\n                    done = true;\r\n                } else if (response instanceof ErrorResponse) {\r\n                    const retryIn: number = this.activityRequestFailed(response);\r\n\r\n                    if (\r\n                        retryIn >= 0 &&\r\n                        request.attemptNumber < GlobalSettings.applets.maximumRetryAttempts\r\n                    ) {\r\n                        logEvent(\r\n                            Enums.LogLevel.Warning,\r\n                            `Activity request failed: ${response.error.message}. Retrying in ${retryIn}ms`\r\n                        );\r\n\r\n                        request.attemptNumber++;\r\n\r\n                        await new Promise<void>((resolve, _reject) => {\r\n                            window.setTimeout(() => {\r\n                                resolve();\r\n                            }, retryIn);\r\n                        });\r\n                    } else {\r\n                        logEvent(\r\n                            Enums.LogLevel.Error,\r\n                            `Activity request failed: ${response.error.message}. Giving up after ${request.attemptNumber} attempt(s)`\r\n                        );\r\n\r\n                        this.removeProgressOverlay(request);\r\n\r\n                        done = true;\r\n                    }\r\n                } else if (response instanceof LoginRequestResponse) {\r\n                    logEvent(\r\n                        Enums.LogLevel.Info,\r\n                        \"The activity request returned a LoginRequestResponse after \" +\r\n                            request.attemptNumber +\r\n                            \" attempt(s).\"\r\n                    );\r\n\r\n                    if (request.attemptNumber <= GlobalSettings.applets.maximumRetryAttempts) {\r\n                        let attemptOAuth = true;\r\n\r\n                        if (response.tokenExchangeResource && this.onSSOTokenNeeded) {\r\n                            // Attempt to use SSO. The host will return true if it can handle SSO, in which case\r\n                            // we bypass OAuth\r\n                            attemptOAuth = !this.onSSOTokenNeeded(\r\n                                this,\r\n                                request,\r\n                                response.tokenExchangeResource\r\n                            );\r\n                        }\r\n\r\n                        if (attemptOAuth) {\r\n                            // Attempt to use OAuth\r\n                            this.removeProgressOverlay(request);\r\n\r\n                            if (response.signinButton === undefined) {\r\n                                throw new Error(\r\n                                    \"internalSendActivityRequestAsync: the login request doesn't contain a valid signin URL.\"\r\n                                );\r\n                            }\r\n\r\n                            logEvent(\r\n                                Enums.LogLevel.Info,\r\n                                \"Login required at \" + response.signinButton.value\r\n                            );\r\n\r\n                            if (this.onShowSigninPrompt) {\r\n                                // Bypass the built-in auth prompt if the host app handles it\r\n                                this.onShowSigninPrompt(this, request, response.signinButton);\r\n                            } else {\r\n                                this.showAuthCodeInputDialog(request);\r\n\r\n                                const left =\r\n                                    window.screenX +\r\n                                    (window.outerWidth - GlobalSettings.applets.authPromptWidth) /\r\n                                        2;\r\n                                const top =\r\n                                    window.screenY +\r\n                                    (window.outerHeight - GlobalSettings.applets.authPromptHeight) /\r\n                                        2;\r\n\r\n                                window.open(\r\n                                    response.signinButton.value,\r\n                                    response.signinButton.title\r\n                                        ? response.signinButton.title\r\n                                        : \"Sign in\",\r\n                                    `width=${GlobalSettings.applets.authPromptWidth},height=${GlobalSettings.applets.authPromptHeight},left=${left},top=${top}`\r\n                                );\r\n                            }\r\n                        }\r\n                    } else {\r\n                        logEvent(\r\n                            Enums.LogLevel.Error,\r\n                            \"Authentication failed. Giving up after \" +\r\n                                request.attemptNumber +\r\n                                \" attempt(s)\"\r\n                        );\r\n\r\n                        alert(Strings.magicCodeInputCard.authenticationFailed());\r\n                    }\r\n\r\n                    // Exit the loop. After a LoginRequestResponse, the host app is responsible for retrying the request\r\n                    break;\r\n                } else {\r\n                    throw new Error(\"Unhandled response type: \" + JSON.stringify(response));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    readonly renderedElement: HTMLElement;\r\n\r\n    hostConfig?: HostConfig;\r\n    channelAdapter?: ChannelAdapter;\r\n\r\n    onCardChanging?: (sender: AdaptiveApplet, card: any) => boolean;\r\n    onCardChanged?: (sender: AdaptiveApplet) => void;\r\n    onPrefetchSSOToken?: (\r\n        sender: AdaptiveApplet,\r\n        tokenExchangeResource: TokenExchangeResource\r\n    ) => void;\r\n    onSSOTokenNeeded?: (\r\n        sender: AdaptiveApplet,\r\n        request: IActivityRequest,\r\n        tokenExchangeResource: TokenExchangeResource\r\n    ) => boolean;\r\n    onPrepareActivityRequest?: (\r\n        sender: AdaptiveApplet,\r\n        request: IActivityRequest,\r\n        action: ExecuteAction\r\n    ) => boolean;\r\n    onActivityRequestSucceeded?: (\r\n        sender: AdaptiveApplet,\r\n        response: SuccessResponse,\r\n        parsedContent: string | AdaptiveCard | undefined\r\n    ) => void;\r\n    onActivityRequestFailed?: (sender: AdaptiveApplet, response: ErrorResponse) => number;\r\n    onCreateSerializationContext?: (sender: AdaptiveApplet) => SerializationContext;\r\n    onCreateProgressOverlay?: (\r\n        sender: AdaptiveApplet,\r\n        request: IActivityRequest\r\n    ) => HTMLElement | undefined;\r\n    onRemoveProgressOverlay?: (sender: AdaptiveApplet, request: IActivityRequest) => void;\r\n    onRenderManualRefreshButton?: (sender: AdaptiveApplet) => HTMLElement | undefined;\r\n    onAction?: (sender: AdaptiveApplet, action: Action) => void;\r\n    onShowManualRefreshButton?: (sender: AdaptiveApplet) => boolean;\r\n    onShowAuthCodeInputDialog?: (sender: AdaptiveApplet, request: IActivityRequest) => boolean;\r\n    onShowSigninPrompt?: (\r\n        sender: AdaptiveApplet,\r\n        request: IActivityRequest,\r\n        signinButton: AuthCardButton\r\n    ) => void;\r\n\r\n    constructor() {\r\n        this.renderedElement = document.createElement(\"div\");\r\n        this.renderedElement.className = \"aaf-cardHost\";\r\n        this.renderedElement.style.position = \"relative\";\r\n        this.renderedElement.style.display = \"flex\";\r\n        this.renderedElement.style.flexDirection = \"column\";\r\n\r\n        this._cardHostElement = document.createElement(\"div\");\r\n\r\n        this._refreshButtonHostElement = document.createElement(\"div\");\r\n        this._refreshButtonHostElement.className = \"aaf-refreshButtonHost\";\r\n        this._refreshButtonHostElement.style.display = \"none\";\r\n\r\n        this.renderedElement.appendChild(this._cardHostElement);\r\n        this.renderedElement.appendChild(this._refreshButtonHostElement);\r\n    }\r\n\r\n    refreshCard() {\r\n        if (this._card && this._card.refresh) {\r\n            this.internalExecuteAction(this._card.refresh.action, ActivityRequestTrigger.Manual, 0);\r\n        }\r\n    }\r\n\r\n    setCard(payload: any) {\r\n        this.internalSetCard(payload, 0);\r\n    }\r\n\r\n    get card(): AdaptiveCard | undefined {\r\n        return this._card;\r\n    }\r\n}\r\n", "// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport * from \"./strings\";\r\nexport * from \"./enums\";\r\nexport * from \"./shared\";\r\nexport * from \"./utils\";\r\nexport * from \"./serialization\";\r\nexport * from \"./host-capabilities\";\r\nexport * from \"./host-config\";\r\nexport * from \"./registry\";\r\nexport * from \"./card-object\";\r\nexport * from \"./card-elements\";\r\nexport * from \"./table\";\r\nexport * from \"./channel-adapter\";\r\nexport * from \"./activity-request\";\r\nexport * from \"./adaptive-applet\";\r\n\r\nexport { IAdaptiveCard, ICardElement } from \"./schema\";\r\n"],
  "mappings": "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",
  "names": ["Strings", "ContainerStyle", "ActionStyle", "ActionMode", "Size", "ImageSize", "SizeUnit", "TextSize", "TextWeight", "FontType", "Spacing", "TextColor", "HorizontalAlignment", "VerticalAlignment", "ActionAlignment", "ImageStyle", "ShowCardActionMode", "Orientation", "FillMode", "ActionIconPlacement", "InputTextStyle", "ValidationPhase", "ValidationEvent", "ContainerFitStatus", "TypeErrorType", "RefreshMode", "LogLevel", "GlobalSettings", "StringWithSubstitutions", "SpacingDefinition", "PaddingDefinition", "SizeAndUnit", "UUID", "_a", "Version", "Versions", "BaseSerializationContext", "SimpleSerializationContext", "PropertyDefinition", "StringProperty", "BoolProperty", "NumProperty", "PixelSizeProperty", "StringArrayProperty", "ValueSetProperty", "EnumProperty", "SerializableObjectProperty", "SerializableObjectCollectionProperty", "CustomProperty", "SerializableObjectSchema", "SerializableObject", "HostCapabilities", "ColorDefinition", "TextColorDefinition", "AdaptiveCardConfig", "ImageSetConfig", "MediaConfig", "TableConfig", "BaseTextDefinition", "TextStyleDefinition", "TextStyleSet", "TextBlockConfig", "RequiredInputLabelTextDefinition", "InputLabelConfig", "InputConfig", "FactTextDefinition", "FactTitleDefinition", "FactSetConfig", "ShowCardActionConfig", "ActionsConfig", "ColorSetDefinition", "ContainerStyleDefinition", "BuiltInContainerStyleDefinition", "ContainerStyleSet", "FontTypeDefinition", "FontTypeSet", "HostConfig", "ElementSingletonBehavior", "CardObjectRegistry", "GlobalRegistry", "ValidationResults", "CardObject", "AbstractTextFormatter", "DateFormatter", "TimeFormatter", "Constants", "MenuItem", "Collection", "PopupControl", "PopupMenu", "CardElement", "ActionProperty", "BaseTextBlock", "TextBlock", "_b", "_a", "anchor", "TextRun", "RichTextBlock", "Fact", "FactSet", "ImageDimensionProperty", "Image", "CardElementContainer", "ImageSet", "ContentSource", "CaptionSource", "MediaSource", "MediaPlayer", "HTML5MediaPlayer", "CustomMediaPlayer", "IFrameMediaMediaPlayer", "VimeoPlayer", "DailymotionPlayer", "YouTubePlayer", "Media", "Input", "TextInput", "ToggleInput", "Choice", "ChoiceSetInput", "NumberInput", "DateInput", "TimeProperty", "TimeInput", "Action", "SubmitActionBase", "SubmitAction", "ExecuteAction", "OpenUrlAction", "ToggleVisibilityAction", "StringWithSubstitutionProperty", "HttpHeader", "HttpAction", "ShowCardAction", "OverflowAction", "i", "ActionCollection", "_i", "action", "ActionSet", "ContainerStyleProperty", "StylableCardElementContainer", "ContainerBase", "BackgroundImage", "Container", "Column", "ColumnSet", "ContainerWithActions", "RefreshActionProperty", "RefreshDefinition", "AuthCardButton", "TokenExchangeResource", "Authentication", "AdaptiveCard", "InlineAdaptiveCard", "SerializationContext", "TableColumnDefinition", "StylableContainer", "TableCell", "TableRow", "Table", "ChannelAdapter", "ActivityRequestTrigger", "ActivityRequestError", "ActivityResponse", "SuccessResponse", "ErrorResponse", "LoginRequestResponse", "ActivityRequest", "AdaptiveApplet"]
}
